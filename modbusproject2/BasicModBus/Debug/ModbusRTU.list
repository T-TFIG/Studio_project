
ModbusRTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baf4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800bc90  0800bc90  0001bc90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcf0  0800bcf0  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcf0  0800bcf0  0001bcf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcf8  0800bcf8  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcf8  0800bcf8  0001bcf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcfc  0800bcfc  0001bcfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800bd00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b6c  20000238  0800bf38  00020238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000da4  0800bf38  00020da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ea1  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002536  00000000  00000000  00035109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00037640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  000387f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180fb  00000000  00000000  000398f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e83  00000000  00000000  000519eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dcdb  00000000  00000000  0006686e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea4  00000000  00000000  0010459c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000238 	.word	0x20000238
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bc74 	.word	0x0800bc74

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000023c 	.word	0x2000023c
 80001d4:	0800bc74 	.word	0x0800bc74

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b974 	b.w	8000e74 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	468e      	mov	lr, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14d      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	d969      	bls.n	8000c8c <__udivmoddi4+0xe8>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b152      	cbz	r2, 8000bd4 <__udivmoddi4+0x30>
 8000bbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc2:	f1c2 0120 	rsb	r1, r2, #32
 8000bc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bce:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd2:	4094      	lsls	r4, r2
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	0c21      	lsrs	r1, r4, #16
 8000bda:	fbbe f6f8 	udiv	r6, lr, r8
 8000bde:	fa1f f78c 	uxth.w	r7, ip
 8000be2:	fb08 e316 	mls	r3, r8, r6, lr
 8000be6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bea:	fb06 f107 	mul.w	r1, r6, r7
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfa:	f080 811f 	bcs.w	8000e3c <__udivmoddi4+0x298>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 811c 	bls.w	8000e3c <__udivmoddi4+0x298>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c10:	fb08 3310 	mls	r3, r8, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 f707 	mul.w	r7, r0, r7
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x92>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c28:	f080 810a 	bcs.w	8000e40 <__udivmoddi4+0x29c>
 8000c2c:	42a7      	cmp	r7, r4
 8000c2e:	f240 8107 	bls.w	8000e40 <__udivmoddi4+0x29c>
 8000c32:	4464      	add	r4, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	1be4      	subs	r4, r4, r7
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	b11d      	cbz	r5, 8000c48 <__udivmoddi4+0xa4>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c5 4300 	strd	r4, r3, [r5]
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xc2>
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	f000 80ef 	beq.w	8000e36 <__udivmoddi4+0x292>
 8000c58:	2600      	movs	r6, #0
 8000c5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5e:	4630      	mov	r0, r6
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f683 	clz	r6, r3
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x160>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd4>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80f9 	bhi.w	8000e6a <__udivmoddi4+0x2c6>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	469e      	mov	lr, r3
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa4>
 8000c86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xec>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 8092 	bne.w	8000dbe <__udivmoddi4+0x21a>
 8000c9a:	eba1 010c 	sub.w	r1, r1, ip
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2601      	movs	r6, #1
 8000ca8:	0c20      	lsrs	r0, r4, #16
 8000caa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cae:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb6:	fb0e f003 	mul.w	r0, lr, r3
 8000cba:	4288      	cmp	r0, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x12c>
 8000cbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x12a>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2c0>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1a09      	subs	r1, r1, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cdc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x156>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x154>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2ca>
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d02:	e79c      	b.n	8000c3e <__udivmoddi4+0x9a>
 8000d04:	f1c6 0720 	rsb	r7, r6, #32
 8000d08:	40b3      	lsls	r3, r6
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa20 f407 	lsr.w	r4, r0, r7
 8000d16:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1a:	431c      	orrs	r4, r3
 8000d1c:	40f9      	lsrs	r1, r7
 8000d1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d22:	fa00 f306 	lsl.w	r3, r0, r6
 8000d26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2a:	0c20      	lsrs	r0, r4, #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fb09 1118 	mls	r1, r9, r8, r1
 8000d34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d38:	fb08 f00e 	mul.w	r0, r8, lr
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b8>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2bc>
 8000d50:	4288      	cmp	r0, r1
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2bc>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1a09      	subs	r1, r1, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d64:	fb09 1110 	mls	r1, r9, r0, r1
 8000d68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d70:	458e      	cmp	lr, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1e2>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2b4>
 8000d7e:	458e      	cmp	lr, r1
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2b4>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d8e:	eba1 010e 	sub.w	r1, r1, lr
 8000d92:	42a1      	cmp	r1, r4
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46a6      	mov	lr, r4
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x2a4>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x2a0>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x212>
 8000d9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000da2:	eb61 010e 	sbc.w	r1, r1, lr
 8000da6:	fa01 f707 	lsl.w	r7, r1, r7
 8000daa:	fa22 f306 	lsr.w	r3, r2, r6
 8000dae:	40f1      	lsrs	r1, r6
 8000db0:	431f      	orrs	r7, r3
 8000db2:	e9c5 7100 	strd	r7, r1, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	40d8      	lsrs	r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	4301      	orrs	r1, r0
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ddc:	fb07 3610 	mls	r6, r7, r0, r3
 8000de0:	0c0b      	lsrs	r3, r1, #16
 8000de2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000de6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dea:	429e      	cmp	r6, r3
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x260>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b8>
 8000dfc:	429e      	cmp	r6, r3
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b8>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1b9b      	subs	r3, r3, r6
 8000e06:	b289      	uxth	r1, r1
 8000e08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb06 f30e 	mul.w	r3, r6, lr
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x28a>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000e2a:	3e02      	subs	r6, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1ac9      	subs	r1, r1, r3
 8000e30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0x104>
 8000e36:	462e      	mov	r6, r5
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e705      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000e3c:	4606      	mov	r6, r0
 8000e3e:	e6e3      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6f8      	b.n	8000c36 <__udivmoddi4+0x92>
 8000e44:	454b      	cmp	r3, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f8>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f8>
 8000e54:	4646      	mov	r6, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x28a>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1e2>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b8>
 8000e64:	3b02      	subs	r3, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x12c>
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	e709      	b.n	8000c82 <__udivmoddi4+0xde>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x156>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <modbus_1t5_Timeout+0x1c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2201      	movs	r2, #1
 8000e86:	751a      	strb	r2, [r3, #20]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	20000254 	.word	0x20000254

08000e98 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <modbus_3t5_Timeout+0x1c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	755a      	strb	r2, [r3, #21]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	20000254 	.word	0x20000254

08000eb8 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <modbus_UART_Recived+0x60>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <modbus_UART_Recived+0x60>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000ed2:	1c59      	adds	r1, r3, #1
 8000ed4:	b289      	uxth	r1, r1
 8000ed6:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000eda:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000ede:	d210      	bcs.n	8000f02 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <modbus_UART_Recived+0x60>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68d8      	ldr	r0, [r3, #12]
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <modbus_UART_Recived+0x60>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <modbus_UART_Recived+0x60>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000ef2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	2201      	movs	r2, #1
 8000efc:	4619      	mov	r1, r3
 8000efe:	f009 fb3b 	bl	800a578 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <modbus_UART_Recived+0x60>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000254 	.word	0x20000254

08000f1c <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f26:	4a24      	ldr	r2, [pc, #144]	; (8000fb8 <Modbus_init+0x9c>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <Modbus_init+0x9c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000f34:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <Modbus_init+0x9c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	4a20      	ldr	r2, [pc, #128]	; (8000fbc <Modbus_init+0xa0>)
 8000f3c:	2114      	movs	r1, #20
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f008 fd1e 	bl	8009980 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <Modbus_init+0x9c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	4a1d      	ldr	r2, [pc, #116]	; (8000fc0 <Modbus_init+0xa4>)
 8000f4c:	210e      	movs	r1, #14
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f008 fd16 	bl	8009980 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <Modbus_init+0x9c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <Modbus_init+0xa8>)
 8000f5c:	2103      	movs	r1, #3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f009 fa62 	bl	800a428 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <Modbus_init+0x9c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68d8      	ldr	r0, [r3, #12]
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <Modbus_init+0x9c>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <Modbus_init+0x9c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f76:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4619      	mov	r1, r3
 8000f82:	f009 faf9 	bl	800a578 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <Modbus_init+0x9c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d10c      	bne.n	8000fb0 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <Modbus_init+0x9c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f007 fd99 	bl	8008ad4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <Modbus_init+0x9c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f007 ffce 	bl	8008f4c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000254 	.word	0x20000254
 8000fbc:	08000e79 	.word	0x08000e79
 8000fc0:	08000e99 	.word	0x08000e99
 8000fc4:	08000eb9 	.word	0x08000eb9

08000fc8 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000fd4:	23ff      	movs	r3, #255	; 0xff
 8000fd6:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000fd8:	23ff      	movs	r3, #255	; 0xff
 8000fda:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000fdc:	e013      	b.n	8001006 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	4053      	eors	r3, r2
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000fee:	4a0f      	ldr	r2, [pc, #60]	; (800102c <CRC16+0x64>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	4053      	eors	r3, r2
 8000ffa:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <CRC16+0x68>)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	4413      	add	r3, r2
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001006:	883b      	ldrh	r3, [r7, #0]
 8001008:	1e5a      	subs	r2, r3, #1
 800100a:	803a      	strh	r2, [r7, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1e6      	bne.n	8000fde <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21a      	sxth	r2, r3
 8001016:	7bbb      	ldrb	r3, [r7, #14]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b21b      	sxth	r3, r3
 800101e:	b29b      	uxth	r3, r3
}
 8001020:	4618      	mov	r0, r3
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	20000100 	.word	0x20000100
 8001030:	20000000 	.word	0x20000000

08001034 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800103a:	4b81      	ldr	r3, [pc, #516]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	7e1b      	ldrb	r3, [r3, #24]
 8001040:	3b01      	subs	r3, #1
 8001042:	2b03      	cmp	r3, #3
 8001044:	d80a      	bhi.n	800105c <Modbus_Protocal_Worker+0x28>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <Modbus_Protocal_Worker+0x18>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	08001067 	.word	0x08001067
 8001050:	08001207 	.word	0x08001207
 8001054:	080010f3 	.word	0x080010f3
 8001058:	08001119 	.word	0x08001119
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800105c:	4b78      	ldr	r3, [pc, #480]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2201      	movs	r2, #1
 8001062:	761a      	strb	r2, [r3, #24]
		break;
 8001064:	e0e8      	b.n	8001238 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001066:	4b76      	ldr	r3, [pc, #472]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001072:	f000 f9dd 	bl	8001430 <Modbus_Emission>
 8001076:	e01c      	b.n	80010b2 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001078:	4b71      	ldr	r3, [pc, #452]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	7d9b      	ldrb	r3, [r3, #22]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d017      	beq.n	80010b2 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001082:	4b6f      	ldr	r3, [pc, #444]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800108a:	4b6d      	ldr	r3, [pc, #436]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001092:	4b6b      	ldr	r3, [pc, #428]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b68      	ldr	r3, [pc, #416]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 0201 	orr.w	r2, r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010aa:	4b65      	ldr	r3, [pc, #404]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2203      	movs	r2, #3
 80010b0:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010b2:	4b63      	ldr	r3, [pc, #396]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b20      	cmp	r3, #32
 80010c0:	f040 80b3 	bne.w	800122a <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010c4:	4b5e      	ldr	r3, [pc, #376]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010ce:	4b5c      	ldr	r3, [pc, #368]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68d8      	ldr	r0, [r3, #12]
 80010d4:	4b5a      	ldr	r3, [pc, #360]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b59      	ldr	r3, [pc, #356]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80010e0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80010e4:	4413      	add	r3, r2
 80010e6:	3302      	adds	r3, #2
 80010e8:	2201      	movs	r2, #1
 80010ea:	4619      	mov	r1, r3
 80010ec:	f009 fa44 	bl	800a578 <HAL_UART_Receive_IT>
		}
		break;
 80010f0:	e09b      	b.n	800122a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80010f2:	4b53      	ldr	r3, [pc, #332]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	7d1b      	ldrb	r3, [r3, #20]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 8098 	beq.w	800122e <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80010fe:	4b50      	ldr	r3, [pc, #320]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001106:	4b4e      	ldr	r3, [pc, #312]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	22fe      	movs	r2, #254	; 0xfe
 800110c:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800110e:	4b4c      	ldr	r3, [pc, #304]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2204      	movs	r2, #4
 8001114:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001116:	e08a      	b.n	800122e <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001118:	4b49      	ldr	r3, [pc, #292]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	7d9b      	ldrb	r3, [r3, #22]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d009      	beq.n	8001136 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8001122:	4b47      	ldr	r3, [pc, #284]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d103      	bne.n	8001136 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800112e:	4b44      	ldr	r3, [pc, #272]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	22ff      	movs	r2, #255	; 0xff
 8001134:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001136:	4b42      	ldr	r3, [pc, #264]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800113e:	f113 0f02 	cmn.w	r3, #2
 8001142:	d150      	bne.n	80011e6 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001144:	4b3e      	ldr	r3, [pc, #248]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2200      	movs	r2, #0
 800114a:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 800114c:	4b3c      	ldr	r3, [pc, #240]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001154:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800115c:	3b02      	subs	r3, #2
 800115e:	4619      	mov	r1, r3
 8001160:	4610      	mov	r0, r2
 8001162:	f7ff ff31 	bl	8000fc8 <CRC16>
 8001166:	4603      	mov	r3, r0
 8001168:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800116a:	793a      	ldrb	r2, [r7, #4]
 800116c:	4b34      	ldr	r3, [pc, #208]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 800116e:	6819      	ldr	r1, [r3, #0]
 8001170:	4b33      	ldr	r3, [pc, #204]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001178:	3b02      	subs	r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001180:	429a      	cmp	r2, r3
 8001182:	d10c      	bne.n	800119e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001184:	797a      	ldrb	r2, [r7, #5]
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001188:	6819      	ldr	r1, [r3, #0]
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001192:	3b01      	subs	r3, #1
 8001194:	440b      	add	r3, r1
 8001196:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800119a:	429a      	cmp	r2, r3
 800119c:	d004      	beq.n	80011a8 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	22ff      	movs	r2, #255	; 0xff
 80011a4:	75da      	strb	r2, [r3, #23]
				break;
 80011a6:	e047      	b.n	8001238 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80011b0:	4b23      	ldr	r3, [pc, #140]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d113      	bne.n	80011e2 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011c2:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80011ca:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011d4:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80011d6:	461a      	mov	r2, r3
 80011d8:	f00a fb8a 	bl	800b8f0 <memcpy>

			//execute command
			Modbus_frame_response();
 80011dc:	f000 f910 	bl	8001400 <Modbus_frame_response>
 80011e0:	e001      	b.n	80011e6 <Modbus_Protocal_Worker+0x1b2>
				break;
 80011e2:	bf00      	nop
					}
		break;


	}
}
 80011e4:	e028      	b.n	8001238 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	7d5b      	ldrb	r3, [r3, #21]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d020      	beq.n	8001232 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2201      	movs	r2, #1
 80011f6:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	4618      	mov	r0, r3
 8001200:	f009 fa68 	bl	800a6d4 <HAL_UART_AbortReceive>
		break;
 8001204:	e015      	b.n	8001232 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b20      	cmp	r3, #32
 8001214:	d10f      	bne.n	8001236 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <Modbus_Protocal_Worker+0x20c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2201      	movs	r2, #1
 8001226:	761a      	strb	r2, [r3, #24]
		break;
 8001228:	e005      	b.n	8001236 <Modbus_Protocal_Worker+0x202>
		break;
 800122a:	bf00      	nop
 800122c:	e004      	b.n	8001238 <Modbus_Protocal_Worker+0x204>
		break;
 800122e:	bf00      	nop
 8001230:	e002      	b.n	8001238 <Modbus_Protocal_Worker+0x204>
		break;
 8001232:	bf00      	nop
 8001234:	e000      	b.n	8001238 <Modbus_Protocal_Worker+0x204>
		break;
 8001236:	bf00      	nop
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000254 	.word	0x20000254

08001244 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800124a:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <modbusWrite1Register+0x80>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	7e9b      	ldrb	r3, [r3, #26]
 8001250:	b29b      	uxth	r3, r3
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <modbusWrite1Register+0x80>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	7edb      	ldrb	r3, [r3, #27]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4413      	add	r3, r2
 8001260:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001262:	88fa      	ldrh	r2, [r7, #6]
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <modbusWrite1Register+0x80>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	429a      	cmp	r2, r3
 800126c:	d903      	bls.n	8001276 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800126e:	2002      	movs	r0, #2
 8001270:	f000 f8a4 	bl	80013bc <ModbusErrorReply>
			 return;
 8001274:	e023      	b.n	80012be <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <modbusWrite1Register+0x80>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <modbusWrite1Register+0x80>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	440b      	add	r3, r1
 8001286:	7f12      	ldrb	r2, [r2, #28]
 8001288:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <modbusWrite1Register+0x80>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <modbusWrite1Register+0x80>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6859      	ldr	r1, [r3, #4]
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	440b      	add	r3, r1
 800129a:	7f52      	ldrb	r2, [r2, #29]
 800129c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <modbusWrite1Register+0x80>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <modbusWrite1Register+0x80>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80012ac:	2208      	movs	r2, #8
 80012ae:	4619      	mov	r1, r3
 80012b0:	f00a fb1e 	bl	800b8f0 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <modbusWrite1Register+0x80>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2205      	movs	r2, #5
 80012ba:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000254 	.word	0x20000254

080012c8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012ce:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <modbusRead1Register+0xf0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	7f1b      	ldrb	r3, [r3, #28]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b29a      	uxth	r2, r3
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <modbusRead1Register+0xf0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	7f5b      	ldrb	r3, [r3, #29]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4413      	add	r3, r2
 80012e4:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80012e6:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <modbusRead1Register+0xf0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	7e9b      	ldrb	r3, [r3, #26]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <modbusRead1Register+0xf0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	7edb      	ldrb	r3, [r3, #27]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <modbusRead1Register+0x42>
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	2b7d      	cmp	r3, #125	; 0x7d
 8001308:	d903      	bls.n	8001312 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800130a:	2003      	movs	r0, #3
 800130c:	f000 f856 	bl	80013bc <ModbusErrorReply>
		 return;
 8001310:	e04e      	b.n	80013b0 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001312:	88ba      	ldrh	r2, [r7, #4]
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <modbusRead1Register+0xf0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	429a      	cmp	r2, r3
 800131c:	d808      	bhi.n	8001330 <modbusRead1Register+0x68>
 800131e:	88ba      	ldrh	r2, [r7, #4]
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	4413      	add	r3, r2
 8001324:	461a      	mov	r2, r3
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <modbusRead1Register+0xf0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	429a      	cmp	r2, r3
 800132e:	d903      	bls.n	8001338 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001330:	2002      	movs	r0, #2
 8001332:	f000 f843 	bl	80013bc <ModbusErrorReply>
		 return;
 8001336:	e03b      	b.n	80013b0 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <modbusRead1Register+0xf0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2203      	movs	r2, #3
 800133e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <modbusRead1Register+0xf0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	0052      	lsls	r2, r2, #1
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001352:	2400      	movs	r4, #0
 8001354:	e020      	b.n	8001398 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <modbusRead1Register+0xf0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	4423      	add	r3, r4
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	18d1      	adds	r1, r2, r3
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <modbusRead1Register+0xf0>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	1c63      	adds	r3, r4, #1
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	7849      	ldrb	r1, [r1, #1]
 800136e:	4413      	add	r3, r2
 8001370:	460a      	mov	r2, r1
 8001372:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <modbusRead1Register+0xf0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	88bb      	ldrh	r3, [r7, #4]
 800137e:	4423      	add	r3, r4
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	18d1      	adds	r1, r2, r3
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <modbusRead1Register+0xf0>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	0063      	lsls	r3, r4, #1
 800138a:	3303      	adds	r3, #3
 800138c:	7809      	ldrb	r1, [r1, #0]
 800138e:	4413      	add	r3, r2
 8001390:	460a      	mov	r2, r1
 8001392:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001396:	3401      	adds	r4, #1
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	429c      	cmp	r4, r3
 800139c:	dbdb      	blt.n	8001356 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	3301      	adds	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <modbusRead1Register+0xf0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0052      	lsls	r2, r2, #1
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd90      	pop	{r4, r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000254 	.word	0x20000254

080013bc <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <ModbusErrorReply+0x40>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	7e5a      	ldrb	r2, [r3, #25]
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <ModbusErrorReply+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <ModbusErrorReply+0x40>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <ModbusErrorReply+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2202      	movs	r2, #2
 80013ea:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000254 	.word	0x20000254

08001400 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <Modbus_frame_response+0x2c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	7e5b      	ldrb	r3, [r3, #25]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d004      	beq.n	8001418 <Modbus_frame_response+0x18>
 800140e:	2b06      	cmp	r3, #6
 8001410:	d105      	bne.n	800141e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001412:	f7ff ff17 	bl	8001244 <modbusWrite1Register>
		break;
 8001416:	e006      	b.n	8001426 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001418:	f7ff ff56 	bl	80012c8 <modbusRead1Register>
		break;
 800141c:	e003      	b.n	8001426 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800141e:	2001      	movs	r0, #1
 8001420:	f7ff ffcc 	bl	80013bc <ModbusErrorReply>
		break;
 8001424:	bf00      	nop

	}
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000254 	.word	0x20000254

08001430 <Modbus_Emission>:

void Modbus_Emission()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001436:	4b3d      	ldr	r3, [pc, #244]	; (800152c <Modbus_Emission+0xfc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b20      	cmp	r3, #32
 8001444:	d15e      	bne.n	8001504 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001446:	4b39      	ldr	r3, [pc, #228]	; (800152c <Modbus_Emission+0xfc>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b38      	ldr	r3, [pc, #224]	; (800152c <Modbus_Emission+0xfc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	7812      	ldrb	r2, [r2, #0]
 8001450:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001454:	4b35      	ldr	r3, [pc, #212]	; (800152c <Modbus_Emission+0xfc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 800145c:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800145e:	4b33      	ldr	r3, [pc, #204]	; (800152c <Modbus_Emission+0xfc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001466:	4b31      	ldr	r3, [pc, #196]	; (800152c <Modbus_Emission+0xfc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800146e:	461a      	mov	r2, r3
 8001470:	f00a fa3e 	bl	800b8f0 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001474:	4b2d      	ldr	r3, [pc, #180]	; (800152c <Modbus_Emission+0xfc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800147c:	b29a      	uxth	r2, r3
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <Modbus_Emission+0xfc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3203      	adds	r2, #3
 8001484:	b292      	uxth	r2, r2
 8001486:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800148a:	4b28      	ldr	r3, [pc, #160]	; (800152c <Modbus_Emission+0xfc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <Modbus_Emission+0xfc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800149a:	3b02      	subs	r3, #2
 800149c:	4619      	mov	r1, r3
 800149e:	4610      	mov	r0, r2
 80014a0:	f7ff fd92 	bl	8000fc8 <CRC16>
 80014a4:	4603      	mov	r3, r0
 80014a6:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <Modbus_Emission+0xfc>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <Modbus_Emission+0xfc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014b4:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80014b6:	7939      	ldrb	r1, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	460a      	mov	r2, r1
 80014bc:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <Modbus_Emission+0xfc>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <Modbus_Emission+0xfc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014cc:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014ce:	7979      	ldrb	r1, [r7, #5]
 80014d0:	4413      	add	r3, r2
 80014d2:	460a      	mov	r2, r1
 80014d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <Modbus_Emission+0xfc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b20      	cmp	r3, #32
 80014e6:	d10d      	bne.n	8001504 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <Modbus_Emission+0xfc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <Modbus_Emission+0xfc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <Modbus_Emission+0xfc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80014fa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014fe:	461a      	mov	r2, r3
 8001500:	f009 f86a 	bl	800a5d8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <Modbus_Emission+0xfc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2200      	movs	r2, #0
 800150a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <Modbus_Emission+0xfc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2200      	movs	r2, #0
 8001512:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <Modbus_Emission+0xfc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2200      	movs	r2, #0
 800151a:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <Modbus_Emission+0xfc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2202      	movs	r2, #2
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000254 	.word	0x20000254

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001534:	f003 faa4 	bl	8004a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001538:	f000 f90e 	bl	8001758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153c:	f000 fbc2 	bl	8001cc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001540:	f000 fb8a 	bl	8001c58 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001544:	f000 fb5c 	bl	8001c00 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8001548:	f000 fb06 	bl	8001b58 <MX_TIM11_Init>
  MX_TIM3_Init();
 800154c:	f000 fa5c 	bl	8001a08 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001550:	f000 f96a 	bl	8001828 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001554:	f000 fa04 	bl	8001960 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001558:	f000 faa4 	bl	8001aa4 <MX_TIM5_Init>
  MX_I2C1_Init();
 800155c:	f000 f9d2 	bl	8001904 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //end effector delay for SDA line error
  HAL_Delay(10);
 8001560:	200a      	movs	r0, #10
 8001562:	f003 faff 	bl	8004b64 <HAL_Delay>
  hmodbus.huart = &huart2;
 8001566:	4b65      	ldr	r3, [pc, #404]	; (80016fc <main+0x1cc>)
 8001568:	4a65      	ldr	r2, [pc, #404]	; (8001700 <main+0x1d0>)
 800156a:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 800156c:	4b63      	ldr	r3, [pc, #396]	; (80016fc <main+0x1cc>)
 800156e:	4a65      	ldr	r2, [pc, #404]	; (8001704 <main+0x1d4>)
 8001570:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8001572:	4b62      	ldr	r3, [pc, #392]	; (80016fc <main+0x1cc>)
 8001574:	2215      	movs	r2, #21
 8001576:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =70;
 8001578:	4b60      	ldr	r3, [pc, #384]	; (80016fc <main+0x1cc>)
 800157a:	2246      	movs	r2, #70	; 0x46
 800157c:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 800157e:	4962      	ldr	r1, [pc, #392]	; (8001708 <main+0x1d8>)
 8001580:	485e      	ldr	r0, [pc, #376]	; (80016fc <main+0x1cc>)
 8001582:	f7ff fccb 	bl	8000f1c <Modbus_init>

  //Joystick setup
  HAL_ADC_Start_DMA(&hadc1, &adc, 3);
 8001586:	2203      	movs	r2, #3
 8001588:	4960      	ldr	r1, [pc, #384]	; (800170c <main+0x1dc>)
 800158a:	4861      	ldr	r0, [pc, #388]	; (8001710 <main+0x1e0>)
 800158c:	f003 fb52 	bl	8004c34 <HAL_ADC_Start_DMA>

  //encoder setup
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8001590:	2104      	movs	r1, #4
 8001592:	4860      	ldr	r0, [pc, #384]	; (8001714 <main+0x1e4>)
 8001594:	f007 fdf4 	bl	8009180 <HAL_TIM_Encoder_Start>


  // motor setup
  HAL_TIM_Base_Start(&htim5);
 8001598:	485f      	ldr	r0, [pc, #380]	; (8001718 <main+0x1e8>)
 800159a:	f007 fa41 	bl	8008a20 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800159e:	2100      	movs	r1, #0
 80015a0:	485d      	ldr	r0, [pc, #372]	; (8001718 <main+0x1e8>)
 80015a2:	f007 fbbb 	bl	8008d1c <HAL_TIM_PWM_Start>

  // soft reset I2C evrytime we start new run
  modeSelect = 1;
 80015a6:	4b5d      	ldr	r3, [pc, #372]	; (800171c <main+0x1ec>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
	  static uint32_t i2ctimestamp = 0;
	  static uint32_t i2ctimestamp2 = 0;
	  static uint32_t endstatustimestamp = 0;


	  debug_1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80015ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b0:	485b      	ldr	r0, [pc, #364]	; (8001720 <main+0x1f0>)
 80015b2:	f004 fdaf 	bl	8006114 <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b5a      	ldr	r3, [pc, #360]	; (8001724 <main+0x1f4>)
 80015bc:	701a      	strb	r2, [r3, #0]
	  debug_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80015be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c2:	4857      	ldr	r0, [pc, #348]	; (8001720 <main+0x1f0>)
 80015c4:	f004 fda6 	bl	8006114 <HAL_GPIO_ReadPin>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b56      	ldr	r3, [pc, #344]	; (8001728 <main+0x1f8>)
 80015ce:	801a      	strh	r2, [r3, #0]

  	  if(modeSelect != 0){
 80015d0:	4b52      	ldr	r3, [pc, #328]	; (800171c <main+0x1ec>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <main+0xac>
  		  modeControl();
 80015d8:	f002 fe82 	bl	80042e0 <modeControl>
  	  }

  	  if(readFlag == 1 && i2ctimestamp <= HAL_GetTick() )
 80015dc:	4b53      	ldr	r3, [pc, #332]	; (800172c <main+0x1fc>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d10e      	bne.n	8001602 <main+0xd2>
 80015e4:	f003 fab2 	bl	8004b4c <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b51      	ldr	r3, [pc, #324]	; (8001730 <main+0x200>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d307      	bcc.n	8001602 <main+0xd2>
  	  {
  	      i2ctimestamp = HAL_GetTick() + 10;
 80015f2:	f003 faab 	bl	8004b4c <HAL_GetTick>
 80015f6:	4603      	mov	r3, r0
 80015f8:	330a      	adds	r3, #10
 80015fa:	4a4d      	ldr	r2, [pc, #308]	; (8001730 <main+0x200>)
 80015fc:	6013      	str	r3, [r2, #0]
  	      readStatus();
 80015fe:	f002 fe0b 	bl	8004218 <readStatus>

  	  }

  	  if(readFlag == 1 && endstatustimestamp <= HAL_GetTick() ){
 8001602:	4b4a      	ldr	r3, [pc, #296]	; (800172c <main+0x1fc>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d10f      	bne.n	800162a <main+0xfa>
 800160a:	f003 fa9f 	bl	8004b4c <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	4b48      	ldr	r3, [pc, #288]	; (8001734 <main+0x204>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d308      	bcc.n	800162a <main+0xfa>
  		  endstatustimestamp += 10;
 8001618:	4b46      	ldr	r3, [pc, #280]	; (8001734 <main+0x204>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	330a      	adds	r3, #10
 800161e:	4a45      	ldr	r2, [pc, #276]	; (8001734 <main+0x204>)
 8001620:	6013      	str	r3, [r2, #0]
  	      ENEstatus = statusTemp[0];
 8001622:	4b45      	ldr	r3, [pc, #276]	; (8001738 <main+0x208>)
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	4b45      	ldr	r3, [pc, #276]	; (800173c <main+0x20c>)
 8001628:	701a      	strb	r2, [r3, #0]
  	  }

	  if(readFlag2 == 1 && i2ctimestamp2 <= HAL_GetTick() ){
 800162a:	4b45      	ldr	r3, [pc, #276]	; (8001740 <main+0x210>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d11c      	bne.n	800166c <main+0x13c>
 8001632:	f003 fa8b 	bl	8004b4c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	4b42      	ldr	r3, [pc, #264]	; (8001744 <main+0x214>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d315      	bcc.n	800166c <main+0x13c>

		  i2ctimestamp2 = HAL_GetTick() + 1000;
 8001640:	f003 fa84 	bl	8004b4c <HAL_GetTick>
 8001644:	4603      	mov	r3, r0
 8001646:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800164a:	4a3e      	ldr	r2, [pc, #248]	; (8001744 <main+0x214>)
 800164c:	6013      	str	r3, [r2, #0]
		  readStatus();
 800164e:	f002 fde3 	bl	8004218 <readStatus>
		  read_count += 1;
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <main+0x218>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <main+0x218>)
 800165c:	701a      	strb	r2, [r3, #0]
		  if(read_count  >3){
 800165e:	4b3a      	ldr	r3, [pc, #232]	; (8001748 <main+0x218>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b03      	cmp	r3, #3
 8001664:	d902      	bls.n	800166c <main+0x13c>
			readFlag2 = 0;
 8001666:	4b36      	ldr	r3, [pc, #216]	; (8001740 <main+0x210>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
		  }

	  }

	  if(endstatustimestamp <= HAL_GetTick() ){
 800166c:	f003 fa6e 	bl	8004b4c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	4b30      	ldr	r3, [pc, #192]	; (8001734 <main+0x204>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d308      	bcc.n	800168c <main+0x15c>
		  endstatustimestamp += 10;
 800167a:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <main+0x204>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	330a      	adds	r3, #10
 8001680:	4a2c      	ldr	r2, [pc, #176]	; (8001734 <main+0x204>)
 8001682:	6013      	str	r3, [r2, #0]
		  ENEstatus = statusTemp[0];
 8001684:	4b2c      	ldr	r3, [pc, #176]	; (8001738 <main+0x208>)
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	4b2c      	ldr	r3, [pc, #176]	; (800173c <main+0x20c>)
 800168a:	701a      	strb	r2, [r3, #0]
	  }


	 // I2C protocol frame
	 toggle_laser = registerFrame[2].U16;
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <main+0x1d8>)
 800168e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b2d      	ldr	r3, [pc, #180]	; (800174c <main+0x21c>)
 8001696:	701a      	strb	r2, [r3, #0]

	 if(toggle_laser == 1 && last_toggle_laser != toggle_laser){
 8001698:	4b2c      	ldr	r3, [pc, #176]	; (800174c <main+0x21c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d109      	bne.n	80016b4 <main+0x184>
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <main+0x220>)
 80016a2:	781a      	ldrb	r2, [r3, #0]
 80016a4:	4b29      	ldr	r3, [pc, #164]	; (800174c <main+0x21c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d003      	beq.n	80016b4 <main+0x184>
		 modeSelect = 4;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <main+0x1ec>)
 80016ae:	2204      	movs	r2, #4
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e00c      	b.n	80016ce <main+0x19e>

	 }else if(toggle_laser == 0 && last_toggle_laser != toggle_laser){
 80016b4:	4b25      	ldr	r3, [pc, #148]	; (800174c <main+0x21c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d108      	bne.n	80016ce <main+0x19e>
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <main+0x220>)
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <main+0x21c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d002      	beq.n	80016ce <main+0x19e>
		 modeSelect = 5;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <main+0x1ec>)
 80016ca:	2205      	movs	r2, #5
 80016cc:	601a      	str	r2, [r3, #0]

	 }
	 last_toggle_laser = toggle_laser;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <main+0x21c>)
 80016d0:	781a      	ldrb	r2, [r3, #0]
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <main+0x220>)
 80016d4:	701a      	strb	r2, [r3, #0]



	  simple_value();
 80016d6:	f000 fbab 	bl	8001e30 <simple_value>

	  // Modbus Protocal

	  Modbus_Protocal_Worker();
 80016da:	f7ff fcab 	bl	8001034 <Modbus_Protocal_Worker>

	  // main state machine and heartbeat

	  MainStateMechine();
 80016de:	f002 fbf3 	bl	8003ec8 <MainStateMechine>
	  heartbeat();
 80016e2:	f000 fb8b 	bl	8001dfc <heartbeat>

//	  if(hi2c1.State != HAL_I2C_STATE_BUSY){
//		  status = readStatus();
//	  }

	  registerFrame[17].U16 = position;
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <main+0x224>)
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f0:	ee17 3a90 	vmov	r3, s15
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <main+0x1d8>)
 80016f8:	845a      	strh	r2, [r3, #34]	; 0x22
  {
 80016fa:	e757      	b.n	80015ac <main+0x7c>
 80016fc:	200006f8 	.word	0x200006f8
 8001700:	20000624 	.word	0x20000624
 8001704:	20000570 	.word	0x20000570
 8001708:	20000bd0 	.word	0x20000bd0
 800170c:	20000c60 	.word	0x20000c60
 8001710:	20000258 	.word	0x20000258
 8001714:	20000354 	.word	0x20000354
 8001718:	200004bc 	.word	0x200004bc
 800171c:	20000d34 	.word	0x20000d34
 8001720:	40020000 	.word	0x40020000
 8001724:	20000d28 	.word	0x20000d28
 8001728:	20000d2a 	.word	0x20000d2a
 800172c:	20000d39 	.word	0x20000d39
 8001730:	20000d40 	.word	0x20000d40
 8001734:	20000d44 	.word	0x20000d44
 8001738:	20000d38 	.word	0x20000d38
 800173c:	20000d30 	.word	0x20000d30
 8001740:	20000d3a 	.word	0x20000d3a
 8001744:	20000d48 	.word	0x20000d48
 8001748:	20000d3b 	.word	0x20000d3b
 800174c:	20000227 	.word	0x20000227
 8001750:	20000d4c 	.word	0x20000d4c
 8001754:	20000ca0 	.word	0x20000ca0

08001758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b094      	sub	sp, #80	; 0x50
 800175c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175e:	f107 0320 	add.w	r3, r7, #32
 8001762:	2230      	movs	r2, #48	; 0x30
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f00a f8d0 	bl	800b90c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <SystemClock_Config+0xc8>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a26      	ldr	r2, [pc, #152]	; (8001820 <SystemClock_Config+0xc8>)
 8001786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <SystemClock_Config+0xc8>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001798:	2300      	movs	r3, #0
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <SystemClock_Config+0xcc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a20      	ldr	r2, [pc, #128]	; (8001824 <SystemClock_Config+0xcc>)
 80017a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <SystemClock_Config+0xcc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b4:	2301      	movs	r3, #1
 80017b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017be:	2302      	movs	r3, #2
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017c8:	2304      	movs	r3, #4
 80017ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80017cc:	2364      	movs	r3, #100	; 0x64
 80017ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017d4:	2304      	movs	r3, #4
 80017d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d8:	f107 0320 	add.w	r3, r7, #32
 80017dc:	4618      	mov	r0, r3
 80017de:	f006 fc2b 	bl	8008038 <HAL_RCC_OscConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017e8:	f002 fe08 	bl	80043fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ec:	230f      	movs	r3, #15
 80017ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f0:	2302      	movs	r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	2103      	movs	r1, #3
 8001808:	4618      	mov	r0, r3
 800180a:	f006 fe8d 	bl	8008528 <HAL_RCC_ClockConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001814:	f002 fdf2 	bl	80043fc <Error_Handler>
  }
}
 8001818:	bf00      	nop
 800181a:	3750      	adds	r7, #80	; 0x50
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	40007000 	.word	0x40007000

08001828 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800182e:	463b      	mov	r3, r7
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <MX_ADC1_Init+0xd0>)
 800183c:	4a2f      	ldr	r2, [pc, #188]	; (80018fc <MX_ADC1_Init+0xd4>)
 800183e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <MX_ADC1_Init+0xd0>)
 8001842:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001846:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <MX_ADC1_Init+0xd0>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <MX_ADC1_Init+0xd0>)
 8001850:	2201      	movs	r2, #1
 8001852:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001854:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <MX_ADC1_Init+0xd0>)
 8001856:	2201      	movs	r2, #1
 8001858:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <MX_ADC1_Init+0xd0>)
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <MX_ADC1_Init+0xd0>)
 8001864:	2200      	movs	r2, #0
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001868:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <MX_ADC1_Init+0xd0>)
 800186a:	4a25      	ldr	r2, [pc, #148]	; (8001900 <MX_ADC1_Init+0xd8>)
 800186c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <MX_ADC1_Init+0xd0>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <MX_ADC1_Init+0xd0>)
 8001876:	2203      	movs	r2, #3
 8001878:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <MX_ADC1_Init+0xd0>)
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <MX_ADC1_Init+0xd0>)
 8001884:	2201      	movs	r2, #1
 8001886:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001888:	481b      	ldr	r0, [pc, #108]	; (80018f8 <MX_ADC1_Init+0xd0>)
 800188a:	f003 f98f 	bl	8004bac <HAL_ADC_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001894:	f002 fdb2 	bl	80043fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001898:	2308      	movs	r3, #8
 800189a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800189c:	2301      	movs	r3, #1
 800189e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80018a0:	2303      	movs	r3, #3
 80018a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018a4:	463b      	mov	r3, r7
 80018a6:	4619      	mov	r1, r3
 80018a8:	4813      	ldr	r0, [pc, #76]	; (80018f8 <MX_ADC1_Init+0xd0>)
 80018aa:	f003 fad1 	bl	8004e50 <HAL_ADC_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018b4:	f002 fda2 	bl	80043fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80018b8:	2309      	movs	r3, #9
 80018ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80018bc:	2302      	movs	r3, #2
 80018be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c0:	463b      	mov	r3, r7
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <MX_ADC1_Init+0xd0>)
 80018c6:	f003 fac3 	bl	8004e50 <HAL_ADC_ConfigChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80018d0:	f002 fd94 	bl	80043fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80018d4:	2307      	movs	r3, #7
 80018d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80018d8:	2303      	movs	r3, #3
 80018da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	4619      	mov	r1, r3
 80018e0:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_ADC1_Init+0xd0>)
 80018e2:	f003 fab5 	bl	8004e50 <HAL_ADC_ConfigChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80018ec:	f002 fd86 	bl	80043fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000258 	.word	0x20000258
 80018fc:	40012000 	.word	0x40012000
 8001900:	0f000001 	.word	0x0f000001

08001904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_I2C1_Init+0x50>)
 800190a:	4a13      	ldr	r2, [pc, #76]	; (8001958 <MX_I2C1_Init+0x54>)
 800190c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_I2C1_Init+0x50>)
 8001910:	4a12      	ldr	r2, [pc, #72]	; (800195c <MX_I2C1_Init+0x58>)
 8001912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_I2C1_Init+0x50>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_I2C1_Init+0x50>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_I2C1_Init+0x50>)
 8001922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001926:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <MX_I2C1_Init+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_I2C1_Init+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_I2C1_Init+0x50>)
 8001942:	f004 fc19 	bl	8006178 <HAL_I2C_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800194c:	f002 fd56 	bl	80043fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000300 	.word	0x20000300
 8001958:	40005400 	.word	0x40005400
 800195c:	000186a0 	.word	0x000186a0

08001960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08c      	sub	sp, #48	; 0x30
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	2224      	movs	r2, #36	; 0x24
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f009 ffcc 	bl	800b90c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <MX_TIM2_Init+0xa4>)
 800197e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001982:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <MX_TIM2_Init+0xa4>)
 8001986:	2200      	movs	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <MX_TIM2_Init+0xa4>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001990:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <MX_TIM2_Init+0xa4>)
 8001992:	f04f 32ff 	mov.w	r2, #4294967295
 8001996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <MX_TIM2_Init+0xa4>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <MX_TIM2_Init+0xa4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019a4:	2303      	movs	r3, #3
 80019a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019ac:	2301      	movs	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019bc:	2301      	movs	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	4619      	mov	r1, r3
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <MX_TIM2_Init+0xa4>)
 80019d0:	f007 fb22 	bl	8009018 <HAL_TIM_Encoder_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80019da:	f002 fd0f 	bl	80043fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	; (8001a04 <MX_TIM2_Init+0xa4>)
 80019ec:	f008 fc36 	bl	800a25c <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80019f6:	f002 fd01 	bl	80043fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	3730      	adds	r7, #48	; 0x30
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000354 	.word	0x20000354

08001a08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_TIM3_Init+0x94>)
 8001a26:	4a1e      	ldr	r2, [pc, #120]	; (8001aa0 <MX_TIM3_Init+0x98>)
 8001a28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <MX_TIM3_Init+0x94>)
 8001a2c:	2253      	movs	r2, #83	; 0x53
 8001a2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_TIM3_Init+0x94>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <MX_TIM3_Init+0x94>)
 8001a38:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <MX_TIM3_Init+0x94>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <MX_TIM3_Init+0x94>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a4a:	4814      	ldr	r0, [pc, #80]	; (8001a9c <MX_TIM3_Init+0x94>)
 8001a4c:	f006 ff8c 	bl	8008968 <HAL_TIM_Base_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a56:	f002 fcd1 	bl	80043fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a60:	f107 0308 	add.w	r3, r7, #8
 8001a64:	4619      	mov	r1, r3
 8001a66:	480d      	ldr	r0, [pc, #52]	; (8001a9c <MX_TIM3_Init+0x94>)
 8001a68:	f007 fe5e 	bl	8009728 <HAL_TIM_ConfigClockSource>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a72:	f002 fcc3 	bl	80043fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a76:	2320      	movs	r3, #32
 8001a78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7e:	463b      	mov	r3, r7
 8001a80:	4619      	mov	r1, r3
 8001a82:	4806      	ldr	r0, [pc, #24]	; (8001a9c <MX_TIM3_Init+0x94>)
 8001a84:	f008 fbea 	bl	800a25c <HAL_TIMEx_MasterConfigSynchronization>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001a8e:	f002 fcb5 	bl	80043fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000408 	.word	0x20000408
 8001aa0:	40000400 	.word	0x40000400

08001aa4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aaa:	f107 0320 	add.w	r3, r7, #32
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
 8001ac2:	615a      	str	r2, [r3, #20]
 8001ac4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ac6:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <MX_TIM5_Init+0xac>)
 8001ac8:	4a22      	ldr	r2, [pc, #136]	; (8001b54 <MX_TIM5_Init+0xb0>)
 8001aca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <MX_TIM5_Init+0xac>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <MX_TIM5_Init+0xac>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <MX_TIM5_Init+0xac>)
 8001ada:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ade:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <MX_TIM5_Init+0xac>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_TIM5_Init+0xac>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001aec:	4818      	ldr	r0, [pc, #96]	; (8001b50 <MX_TIM5_Init+0xac>)
 8001aee:	f007 f8b9 	bl	8008c64 <HAL_TIM_PWM_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001af8:	f002 fc80 	bl	80043fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b04:	f107 0320 	add.w	r3, r7, #32
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4811      	ldr	r0, [pc, #68]	; (8001b50 <MX_TIM5_Init+0xac>)
 8001b0c:	f008 fba6 	bl	800a25c <HAL_TIMEx_MasterConfigSynchronization>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001b16:	f002 fc71 	bl	80043fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b1a:	2360      	movs	r3, #96	; 0x60
 8001b1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4807      	ldr	r0, [pc, #28]	; (8001b50 <MX_TIM5_Init+0xac>)
 8001b32:	f007 fd37 	bl	80095a4 <HAL_TIM_PWM_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001b3c:	f002 fc5e 	bl	80043fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001b40:	4803      	ldr	r0, [pc, #12]	; (8001b50 <MX_TIM5_Init+0xac>)
 8001b42:	f002 fe2b 	bl	800479c <HAL_TIM_MspPostInit>

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200004bc 	.word	0x200004bc
 8001b54:	40000c00 	.word	0x40000c00

08001b58 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
 8001b6c:	615a      	str	r2, [r3, #20]
 8001b6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001b70:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <MX_TIM11_Init+0xa0>)
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <MX_TIM11_Init+0xa4>)
 8001b74:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <MX_TIM11_Init+0xa0>)
 8001b78:	2263      	movs	r2, #99	; 0x63
 8001b7a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <MX_TIM11_Init+0xa0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <MX_TIM11_Init+0xa0>)
 8001b84:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001b88:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <MX_TIM11_Init+0xa0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <MX_TIM11_Init+0xa0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001b96:	4818      	ldr	r0, [pc, #96]	; (8001bf8 <MX_TIM11_Init+0xa0>)
 8001b98:	f006 fee6 	bl	8008968 <HAL_TIM_Base_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001ba2:	f002 fc2b 	bl	80043fc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8001ba6:	4814      	ldr	r0, [pc, #80]	; (8001bf8 <MX_TIM11_Init+0xa0>)
 8001ba8:	f006 fff6 	bl	8008b98 <HAL_TIM_OC_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001bb2:	f002 fc23 	bl	80043fc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8001bb6:	2108      	movs	r1, #8
 8001bb8:	480f      	ldr	r0, [pc, #60]	; (8001bf8 <MX_TIM11_Init+0xa0>)
 8001bba:	f007 f95f 	bl	8008e7c <HAL_TIM_OnePulse_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8001bc4:	f002 fc1a 	bl	80043fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001bc8:	2310      	movs	r3, #16
 8001bca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8001bcc:	f240 5399 	movw	r3, #1433	; 0x599
 8001bd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_TIM11_Init+0xa0>)
 8001be2:	f007 fc83 	bl	80094ec <HAL_TIM_OC_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8001bec:	f002 fc06 	bl	80043fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000570 	.word	0x20000570
 8001bfc:	40014800 	.word	0x40014800

08001c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_USART2_UART_Init+0x50>)
 8001c06:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <MX_USART2_UART_Init+0x54>)
 8001c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_USART2_UART_Init+0x50>)
 8001c0c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_USART2_UART_Init+0x50>)
 8001c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c18:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <MX_USART2_UART_Init+0x50>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <MX_USART2_UART_Init+0x50>)
 8001c22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_USART2_UART_Init+0x50>)
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <MX_USART2_UART_Init+0x50>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_USART2_UART_Init+0x50>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <MX_USART2_UART_Init+0x50>)
 8001c3c:	f008 fb9a 	bl	800a374 <HAL_UART_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001c46:	f002 fbd9 	bl	80043fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000624 	.word	0x20000624
 8001c54:	40004400 	.word	0x40004400

08001c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <MX_DMA_Init+0x68>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a16      	ldr	r2, [pc, #88]	; (8001cc0 <MX_DMA_Init+0x68>)
 8001c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <MX_DMA_Init+0x68>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <MX_DMA_Init+0x68>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <MX_DMA_Init+0x68>)
 8001c84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <MX_DMA_Init+0x68>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2011      	movs	r0, #17
 8001c9c:	f003 fc63 	bl	8005566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ca0:	2011      	movs	r0, #17
 8001ca2:	f003 fc7c 	bl	800559e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2038      	movs	r0, #56	; 0x38
 8001cac:	f003 fc5b 	bl	8005566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cb0:	2038      	movs	r0, #56	; 0x38
 8001cb2:	f003 fc74 	bl	800559e <HAL_NVIC_EnableIRQ>

}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <MX_GPIO_Init+0x12c>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a43      	ldr	r2, [pc, #268]	; (8001df0 <MX_GPIO_Init+0x12c>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <MX_GPIO_Init+0x12c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <MX_GPIO_Init+0x12c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a3c      	ldr	r2, [pc, #240]	; (8001df0 <MX_GPIO_Init+0x12c>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <MX_GPIO_Init+0x12c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <MX_GPIO_Init+0x12c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a35      	ldr	r2, [pc, #212]	; (8001df0 <MX_GPIO_Init+0x12c>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <MX_GPIO_Init+0x12c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <MX_GPIO_Init+0x12c>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a2e      	ldr	r2, [pc, #184]	; (8001df0 <MX_GPIO_Init+0x12c>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <MX_GPIO_Init+0x12c>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	4829      	ldr	r0, [pc, #164]	; (8001df4 <MX_GPIO_Init+0x130>)
 8001d50:	f004 f9f8 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2180      	movs	r1, #128	; 0x80
 8001d58:	4827      	ldr	r0, [pc, #156]	; (8001df8 <MX_GPIO_Init+0x134>)
 8001d5a:	f004 f9f3 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	4619      	mov	r1, r3
 8001d74:	4820      	ldr	r0, [pc, #128]	; (8001df8 <MX_GPIO_Init+0x134>)
 8001d76:	f004 f849 	bl	8005e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d7a:	2320      	movs	r3, #32
 8001d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4818      	ldr	r0, [pc, #96]	; (8001df4 <MX_GPIO_Init+0x130>)
 8001d92:	f004 f83b 	bl	8005e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	4812      	ldr	r0, [pc, #72]	; (8001df8 <MX_GPIO_Init+0x134>)
 8001dae:	f004 f82d 	bl	8005e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	480c      	ldr	r0, [pc, #48]	; (8001df8 <MX_GPIO_Init+0x134>)
 8001dc8:	f004 f820 	bl	8005e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <MX_GPIO_Init+0x130>)
 8001de2:	f004 f813 	bl	8005e0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001de6:	bf00      	nop
 8001de8:	3728      	adds	r7, #40	; 0x28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40020800 	.word	0x40020800

08001dfc <heartbeat>:

/* USER CODE BEGIN 4 */

void heartbeat()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if(HAL_GetTick() >= timestamp)
 8001e00:	f002 fea4 	bl	8004b4c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <heartbeat+0x2c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d309      	bcc.n	8001e22 <heartbeat+0x26>
	{
		timestamp = HAL_GetTick() + 200;
 8001e0e:	f002 fe9d 	bl	8004b4c <HAL_GetTick>
 8001e12:	4603      	mov	r3, r0
 8001e14:	33c8      	adds	r3, #200	; 0xc8
 8001e16:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <heartbeat+0x2c>)
 8001e18:	6013      	str	r3, [r2, #0]
		registerFrame[0].U16 = 22881;
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <heartbeat+0x30>)
 8001e1c:	f645 1261 	movw	r2, #22881	; 0x5961
 8001e20:	801a      	strh	r2, [r3, #0]
	}
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000d50 	.word	0x20000d50
 8001e2c:	20000bd0 	.word	0x20000bd0

08001e30 <simple_value>:

void simple_value(){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;

	//encoder value
	QEIRead = __HAL_TIM_GET_COUNTER(&htim2);
 8001e36:	4b60      	ldr	r3, [pc, #384]	; (8001fb8 <simple_value+0x188>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <simple_value+0x18c>)
 8001e40:	601a      	str	r2, [r3, #0]

	//position
	position = QEIRead / 128.38046;
 8001e42:	4b5e      	ldr	r3, [pc, #376]	; (8001fbc <simple_value+0x18c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fb18 	bl	800047c <__aeabi_i2d>
 8001e4c:	a358      	add	r3, pc, #352	; (adr r3, 8001fb0 <simple_value+0x180>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe fca7 	bl	80007a4 <__aeabi_ddiv>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f7fe fe39 	bl	8000ad4 <__aeabi_d2f>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4a56      	ldr	r2, [pc, #344]	; (8001fc0 <simple_value+0x190>)
 8001e66:	6013      	str	r3, [r2, #0]

	registerFrame[17].U16 = position * 10;
 8001e68:	4b55      	ldr	r3, [pc, #340]	; (8001fc0 <simple_value+0x190>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e7a:	ee17 3a90 	vmov	r3, s15
 8001e7e:	b21a      	sxth	r2, r3
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <simple_value+0x194>)
 8001e82:	845a      	strh	r2, [r3, #34]	; 0x22

	registerFrame[18].U16 = velocity * 10;
 8001e84:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <simple_value+0x198>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e96:	ee17 3a90 	vmov	r3, s15
 8001e9a:	b21a      	sxth	r2, r3
 8001e9c:	4b49      	ldr	r3, [pc, #292]	; (8001fc4 <simple_value+0x194>)
 8001e9e:	849a      	strh	r2, [r3, #36]	; 0x24

	registerFrame[19].U16 = accerelation * 10;
 8001ea0:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <simple_value+0x19c>)
 8001ea2:	edd3 7a00 	vldr	s15, [r3]
 8001ea6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eb2:	ee17 3a90 	vmov	r3, s15
 8001eb6:	b21a      	sxth	r2, r3
 8001eb8:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <simple_value+0x194>)
 8001eba:	84da      	strh	r2, [r3, #38]	; 0x26
	//velocity and accerelation

	if(timestamp < HAL_GetTick()){
 8001ebc:	f002 fe46 	bl	8004b4c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <simple_value+0x1a0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d96b      	bls.n	8001fa2 <simple_value+0x172>
		timestamp = HAL_GetTick() + 1;
 8001eca:	f002 fe3f 	bl	8004b4c <HAL_GetTick>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	4a3f      	ldr	r2, [pc, #252]	; (8001fd0 <simple_value+0x1a0>)
 8001ed4:	6013      	str	r3, [r2, #0]

		static float previousPosition = 0;
		static float previousVelocity = 0;

		float deltaTime = 1.0 / 1000.0;
 8001ed6:	4b3f      	ldr	r3, [pc, #252]	; (8001fd4 <simple_value+0x1a4>)
 8001ed8:	607b      	str	r3, [r7, #4]

		velocity = (position - previousPosition) / deltaTime;
 8001eda:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <simple_value+0x190>)
 8001edc:	ed93 7a00 	vldr	s14, [r3]
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <simple_value+0x1a8>)
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001eea:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef2:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <simple_value+0x198>)
 8001ef4:	edc3 7a00 	vstr	s15, [r3]

		velocity_array[velocity_index] = velocity;
 8001ef8:	4b38      	ldr	r3, [pc, #224]	; (8001fdc <simple_value+0x1ac>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <simple_value+0x198>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4937      	ldr	r1, [pc, #220]	; (8001fe0 <simple_value+0x1b0>)
 8001f04:	0083      	lsls	r3, r0, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	601a      	str	r2, [r3, #0]
		velocity_index++;
 8001f0a:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <simple_value+0x1ac>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <simple_value+0x1ac>)
 8001f14:	701a      	strb	r2, [r3, #0]
		velocity_index %= 10;
 8001f16:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <simple_value+0x1ac>)
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <simple_value+0x1b4>)
 8001f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f20:	08d9      	lsrs	r1, r3, #3
 8001f22:	460b      	mov	r3, r1
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <simple_value+0x1ac>)
 8001f30:	701a      	strb	r2, [r3, #0]

		float sum = 0.0;
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < 10; i++){
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	e00e      	b.n	8001f5c <simple_value+0x12c>
			sum += velocity_array[i];
 8001f3e:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <simple_value+0x1b0>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f52:	edc7 7a03 	vstr	s15, [r7, #12]
		for(int i = 0; i < 10; i++){
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b09      	cmp	r3, #9
 8001f60:	dded      	ble.n	8001f3e <simple_value+0x10e>
		}

		avg_velocity = sum / 10.0;
 8001f62:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f66:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <simple_value+0x1b8>)
 8001f70:	edc3 7a00 	vstr	s15, [r3]

		accerelation = (velocity - previousVelocity) / deltaTime;
 8001f74:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <simple_value+0x198>)
 8001f76:	ed93 7a00 	vldr	s14, [r3]
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <simple_value+0x1bc>)
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f84:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <simple_value+0x19c>)
 8001f8e:	edc3 7a00 	vstr	s15, [r3]


		previousPosition = position;
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <simple_value+0x190>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a10      	ldr	r2, [pc, #64]	; (8001fd8 <simple_value+0x1a8>)
 8001f98:	6013      	str	r3, [r2, #0]

		previousVelocity = velocity;
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <simple_value+0x198>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a13      	ldr	r2, [pc, #76]	; (8001fec <simple_value+0x1bc>)
 8001fa0:	6013      	str	r3, [r2, #0]

	}


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	f3af 8000 	nop.w
 8001fb0:	ba732df5 	.word	0xba732df5
 8001fb4:	40600c2c 	.word	0x40600c2c
 8001fb8:	20000354 	.word	0x20000354
 8001fbc:	20000c9c 	.word	0x20000c9c
 8001fc0:	20000ca0 	.word	0x20000ca0
 8001fc4:	20000bd0 	.word	0x20000bd0
 8001fc8:	20000ca4 	.word	0x20000ca4
 8001fcc:	20000ca8 	.word	0x20000ca8
 8001fd0:	20000d54 	.word	0x20000d54
 8001fd4:	3a83126f 	.word	0x3a83126f
 8001fd8:	20000d58 	.word	0x20000d58
 8001fdc:	20000cd4 	.word	0x20000cd4
 8001fe0:	20000cac 	.word	0x20000cac
 8001fe4:	cccccccd 	.word	0xcccccccd
 8001fe8:	20000cd8 	.word	0x20000cd8
 8001fec:	20000d5c 	.word	0x20000d5c

08001ff0 <Joystick>:

void Joystick()
{
 8001ff0:	b598      	push	{r3, r4, r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	// X_Axis
	static uint8_t last_toggle;
	debug_3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8001ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff8:	4886      	ldr	r0, [pc, #536]	; (8002214 <Joystick+0x224>)
 8001ffa:	f004 f88b 	bl	8006114 <HAL_GPIO_ReadPin>
 8001ffe:	4603      	mov	r3, r0
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002008:	4b83      	ldr	r3, [pc, #524]	; (8002218 <Joystick+0x228>)
 800200a:	edc3 7a00 	vstr	s15, [r3]

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0 && last_toggle == 1){
 800200e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002012:	4880      	ldr	r0, [pc, #512]	; (8002214 <Joystick+0x224>)
 8002014:	f004 f87e 	bl	8006114 <HAL_GPIO_ReadPin>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d17a      	bne.n	8002114 <Joystick+0x124>
 800201e:	4b7f      	ldr	r3, [pc, #508]	; (800221c <Joystick+0x22c>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d176      	bne.n	8002114 <Joystick+0x124>
		static uint8_t i = 0;
		static uint8_t j = 0;
		if(pick_or_place == 0){
 8002026:	4b7e      	ldr	r3, [pc, #504]	; (8002220 <Joystick+0x230>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d137      	bne.n	800209e <Joystick+0xae>


			pick_point.X_point[i] = registerFrame[68].U16 / 10.0; // get the position from
 800202e:	4b7d      	ldr	r3, [pc, #500]	; (8002224 <Joystick+0x234>)
 8002030:	f9b3 3088 	ldrsh.w	r3, [r3, #136]	; 0x88
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa21 	bl	800047c <__aeabi_i2d>
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	4b7a      	ldr	r3, [pc, #488]	; (8002228 <Joystick+0x238>)
 8002040:	f7fe fbb0 	bl	80007a4 <__aeabi_ddiv>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4978      	ldr	r1, [pc, #480]	; (800222c <Joystick+0x23c>)
 800204a:	7809      	ldrb	r1, [r1, #0]
 800204c:	460c      	mov	r4, r1
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f7fe fd3f 	bl	8000ad4 <__aeabi_d2f>
 8002056:	4602      	mov	r2, r0
 8002058:	4975      	ldr	r1, [pc, #468]	; (8002230 <Joystick+0x240>)
 800205a:	00a3      	lsls	r3, r4, #2
 800205c:	440b      	add	r3, r1
 800205e:	601a      	str	r2, [r3, #0]
			pick_point.Y_point[i] = position;
 8002060:	4b72      	ldr	r3, [pc, #456]	; (800222c <Joystick+0x23c>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	4b73      	ldr	r3, [pc, #460]	; (8002234 <Joystick+0x244>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4971      	ldr	r1, [pc, #452]	; (8002230 <Joystick+0x240>)
 800206c:	1c83      	adds	r3, r0, #2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	3304      	adds	r3, #4
 8002074:	601a      	str	r2, [r3, #0]

			i++;
 8002076:	4b6d      	ldr	r3, [pc, #436]	; (800222c <Joystick+0x23c>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	3301      	adds	r3, #1
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b6b      	ldr	r3, [pc, #428]	; (800222c <Joystick+0x23c>)
 8002080:	701a      	strb	r2, [r3, #0]
			i%=3;
 8002082:	4b6a      	ldr	r3, [pc, #424]	; (800222c <Joystick+0x23c>)
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <Joystick+0x248>)
 8002088:	fba3 1302 	umull	r1, r3, r3, r2
 800208c:	0859      	lsrs	r1, r3, #1
 800208e:	460b      	mov	r3, r1
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	440b      	add	r3, r1
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b64      	ldr	r3, [pc, #400]	; (800222c <Joystick+0x23c>)
 800209a:	701a      	strb	r2, [r3, #0]
 800209c:	e03a      	b.n	8002114 <Joystick+0x124>

		}else if(pick_or_place == 1){
 800209e:	4b60      	ldr	r3, [pc, #384]	; (8002220 <Joystick+0x230>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d136      	bne.n	8002114 <Joystick+0x124>

			place_point.X_point[j] = registerFrame[68].U16 / 10.0;
 80020a6:	4b5f      	ldr	r3, [pc, #380]	; (8002224 <Joystick+0x234>)
 80020a8:	f9b3 3088 	ldrsh.w	r3, [r3, #136]	; 0x88
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe f9e5 	bl	800047c <__aeabi_i2d>
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	4b5c      	ldr	r3, [pc, #368]	; (8002228 <Joystick+0x238>)
 80020b8:	f7fe fb74 	bl	80007a4 <__aeabi_ddiv>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	495e      	ldr	r1, [pc, #376]	; (800223c <Joystick+0x24c>)
 80020c2:	7809      	ldrb	r1, [r1, #0]
 80020c4:	460c      	mov	r4, r1
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f7fe fd03 	bl	8000ad4 <__aeabi_d2f>
 80020ce:	4602      	mov	r2, r0
 80020d0:	495b      	ldr	r1, [pc, #364]	; (8002240 <Joystick+0x250>)
 80020d2:	00a3      	lsls	r3, r4, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	601a      	str	r2, [r3, #0]
			place_point.Y_point[j] = position;
 80020d8:	4b58      	ldr	r3, [pc, #352]	; (800223c <Joystick+0x24c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	4b55      	ldr	r3, [pc, #340]	; (8002234 <Joystick+0x244>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4957      	ldr	r1, [pc, #348]	; (8002240 <Joystick+0x250>)
 80020e4:	1c83      	adds	r3, r0, #2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	3304      	adds	r3, #4
 80020ec:	601a      	str	r2, [r3, #0]

			j++;
 80020ee:	4b53      	ldr	r3, [pc, #332]	; (800223c <Joystick+0x24c>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b51      	ldr	r3, [pc, #324]	; (800223c <Joystick+0x24c>)
 80020f8:	701a      	strb	r2, [r3, #0]
			j%=3;
 80020fa:	4b50      	ldr	r3, [pc, #320]	; (800223c <Joystick+0x24c>)
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	4b4e      	ldr	r3, [pc, #312]	; (8002238 <Joystick+0x248>)
 8002100:	fba3 1302 	umull	r1, r3, r3, r2
 8002104:	0859      	lsrs	r1, r3, #1
 8002106:	460b      	mov	r3, r1
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	440b      	add	r3, r1
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4b4a      	ldr	r3, [pc, #296]	; (800223c <Joystick+0x24c>)
 8002112:	701a      	strb	r2, [r3, #0]

		}
	}
	if (adc.X_Axis >= 0 && adc.X_Axis <= 100) {
 8002114:	4b4b      	ldr	r3, [pc, #300]	; (8002244 <Joystick+0x254>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	2b64      	cmp	r3, #100	; 0x64
 800211a:	d80a      	bhi.n	8002132 <Joystick+0x142>
	    right = 1;
 800211c:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <Joystick+0x258>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
	    left = 0;
 8002122:	4b4a      	ldr	r3, [pc, #296]	; (800224c <Joystick+0x25c>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
	    registerFrame[64].U16 = 8;
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <Joystick+0x234>)
 800212a:	2208      	movs	r2, #8
 800212c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8002130:	e01a      	b.n	8002168 <Joystick+0x178>
	}

	else if(adc.X_Axis >= 3100)
 8002132:	4b44      	ldr	r3, [pc, #272]	; (8002244 <Joystick+0x254>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	f640 421b 	movw	r2, #3099	; 0xc1b
 800213a:	4293      	cmp	r3, r2
 800213c:	d90a      	bls.n	8002154 <Joystick+0x164>
	{
		left = 1;
 800213e:	4b43      	ldr	r3, [pc, #268]	; (800224c <Joystick+0x25c>)
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
		right = 0;
 8002144:	4b40      	ldr	r3, [pc, #256]	; (8002248 <Joystick+0x258>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
		registerFrame[64].U16 = 4;
 800214a:	4b36      	ldr	r3, [pc, #216]	; (8002224 <Joystick+0x234>)
 800214c:	2204      	movs	r2, #4
 800214e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8002152:	e009      	b.n	8002168 <Joystick+0x178>
	}else{
		left = 0;
 8002154:	4b3d      	ldr	r3, [pc, #244]	; (800224c <Joystick+0x25c>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
		right = 0;
 800215a:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <Joystick+0x258>)
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
		registerFrame[64].U16 = 0;
 8002160:	4b30      	ldr	r3, [pc, #192]	; (8002224 <Joystick+0x234>)
 8002162:	2200      	movs	r2, #0
 8002164:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	}

	//Y_Axis
	if(0 <= adc.Y_Axis && adc.Y_Axis <= 100)
 8002168:	4b36      	ldr	r3, [pc, #216]	; (8002244 <Joystick+0x254>)
 800216a:	885b      	ldrh	r3, [r3, #2]
 800216c:	2b64      	cmp	r3, #100	; 0x64
 800216e:	d810      	bhi.n	8002192 <Joystick+0x1a2>
	{
		top = 1;
 8002170:	4b37      	ldr	r3, [pc, #220]	; (8002250 <Joystick+0x260>)
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
		bottom = 0;
 8002176:	4b37      	ldr	r3, [pc, #220]	; (8002254 <Joystick+0x264>)
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800217c:	2201      	movs	r2, #1
 800217e:	2180      	movs	r1, #128	; 0x80
 8002180:	4824      	ldr	r0, [pc, #144]	; (8002214 <Joystick+0x224>)
 8002182:	f003 ffdf 	bl	8006144 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 2500);
 8002186:	4b34      	ldr	r3, [pc, #208]	; (8002258 <Joystick+0x268>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800218e:	635a      	str	r2, [r3, #52]	; 0x34
 8002190:	e035      	b.n	80021fe <Joystick+0x20e>
     //   HAL_TIM_
	}
	else if(adc.Y_Axis >= 3150)
 8002192:	4b2c      	ldr	r3, [pc, #176]	; (8002244 <Joystick+0x254>)
 8002194:	885b      	ldrh	r3, [r3, #2]
 8002196:	f640 424d 	movw	r2, #3149	; 0xc4d
 800219a:	4293      	cmp	r3, r2
 800219c:	d910      	bls.n	80021c0 <Joystick+0x1d0>
	{
		bottom = 1;
 800219e:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <Joystick+0x264>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
		top = 0;
 80021a4:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <Joystick+0x260>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	4819      	ldr	r0, [pc, #100]	; (8002214 <Joystick+0x224>)
 80021b0:	f003 ffc8 	bl	8006144 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 2500);
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <Joystick+0x268>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34
 80021be:	e01e      	b.n	80021fe <Joystick+0x20e>
	}else{
		bottom = 0;
 80021c0:	4b24      	ldr	r3, [pc, #144]	; (8002254 <Joystick+0x264>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
		top = 0;
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <Joystick+0x260>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80021cc:	2201      	movs	r2, #1
 80021ce:	2180      	movs	r1, #128	; 0x80
 80021d0:	4810      	ldr	r0, [pc, #64]	; (8002214 <Joystick+0x224>)
 80021d2:	f003 ffb7 	bl	8006144 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <Joystick+0x268>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2200      	movs	r2, #0
 80021dc:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <Joystick+0x268>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2200      	movs	r2, #0
 80021e4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <Joystick+0x268>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2200      	movs	r2, #0
 80021ec:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <Joystick+0x268>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2200      	movs	r2, #0
 80021f4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 80021f6:	4b18      	ldr	r3, [pc, #96]	; (8002258 <Joystick+0x268>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2200      	movs	r2, #0
 80021fc:	635a      	str	r2, [r3, #52]	; 0x34
	}
	last_toggle = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 80021fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002202:	4804      	ldr	r0, [pc, #16]	; (8002214 <Joystick+0x224>)
 8002204:	f003 ff86 	bl	8006114 <HAL_GPIO_ReadPin>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <Joystick+0x22c>)
 800220e:	701a      	strb	r2, [r3, #0]
}
 8002210:	bf00      	nop
 8002212:	bd98      	pop	{r3, r4, r7, pc}
 8002214:	40020800 	.word	0x40020800
 8002218:	20000d2c 	.word	0x20000d2c
 800221c:	20000d60 	.word	0x20000d60
 8002220:	20000c6a 	.word	0x20000c6a
 8002224:	20000bd0 	.word	0x20000bd0
 8002228:	40240000 	.word	0x40240000
 800222c:	20000d61 	.word	0x20000d61
 8002230:	20000c6c 	.word	0x20000c6c
 8002234:	20000ca0 	.word	0x20000ca0
 8002238:	aaaaaaab 	.word	0xaaaaaaab
 800223c:	20000d62 	.word	0x20000d62
 8002240:	20000c84 	.word	0x20000c84
 8002244:	20000c60 	.word	0x20000c60
 8002248:	20000c67 	.word	0x20000c67
 800224c:	20000c66 	.word	0x20000c66
 8002250:	20000c68 	.word	0x20000c68
 8002254:	20000c69 	.word	0x20000c69
 8002258:	200004bc 	.word	0x200004bc

0800225c <main_trajectory>:

void main_trajectory(float required_position, uint8_t point_or_tray){
 800225c:	b5b0      	push	{r4, r5, r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	ed87 0a01 	vstr	s0, [r7, #4]
 8002266:	4603      	mov	r3, r0
 8002268:	70fb      	strb	r3, [r7, #3]
	static uint32_t timestamp_trajectory = 0;
	if(timestamp_trajectory < HAL_GetTick()){
 800226a:	f002 fc6f 	bl	8004b4c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <main_trajectory+0x9c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d93a      	bls.n	80022ee <main_trajectory+0x92>
		timestamp_trajectory = HAL_GetTick() + 1;
 8002278:	f002 fc68 	bl	8004b4c <HAL_GetTick>
 800227c:	4603      	mov	r3, r0
 800227e:	3301      	adds	r3, #1
 8002280:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <main_trajectory+0x9c>)
 8002282:	6013      	str	r3, [r2, #0]
		sampling_time = sampling_time + 1.0;
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <main_trajectory+0xa0>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800228e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002292:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <main_trajectory+0xa0>)
 8002294:	edc3 7a00 	vstr	s15, [r3]
		if(point_or_tray == 1){
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d112      	bne.n	80022c4 <main_trajectory+0x68>
			Trapzoidal_viapoint(position, required_position);
 800229e:	4b18      	ldr	r3, [pc, #96]	; (8002300 <main_trajectory+0xa4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f8fc 	bl	80004a0 <__aeabi_f2d>
 80022a8:	4604      	mov	r4, r0
 80022aa:	460d      	mov	r5, r1
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7fe f8f7 	bl	80004a0 <__aeabi_f2d>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	ec43 2b11 	vmov	d1, r2, r3
 80022ba:	ec45 4b10 	vmov	d0, r4, r5
 80022be:	f000 f823 	bl	8002308 <Trapzoidal_viapoint>
			Trapzoidal_pick_place(position, required_position);
		}
	}


}
 80022c2:	e014      	b.n	80022ee <main_trajectory+0x92>
		}else if(point_or_tray == 0){
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d111      	bne.n	80022ee <main_trajectory+0x92>
			Trapzoidal_pick_place(position, required_position);
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <main_trajectory+0xa4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe f8e6 	bl	80004a0 <__aeabi_f2d>
 80022d4:	4604      	mov	r4, r0
 80022d6:	460d      	mov	r5, r1
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7fe f8e1 	bl	80004a0 <__aeabi_f2d>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	ec43 2b11 	vmov	d1, r2, r3
 80022e6:	ec45 4b10 	vmov	d0, r4, r5
 80022ea:	f000 fbb1 	bl	8002a50 <Trapzoidal_pick_place>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bdb0      	pop	{r4, r5, r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000d64 	.word	0x20000d64
 80022fc:	20000ce0 	.word	0x20000ce0
 8002300:	20000ca0 	.word	0x20000ca0
 8002304:	00000000 	.word	0x00000000

08002308 <Trapzoidal_viapoint>:


void Trapzoidal_viapoint(double initial_point, double final_point){
 8002308:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800230c:	b088      	sub	sp, #32
 800230e:	af00      	add	r7, sp, #0
 8002310:	ed87 0b02 	vstr	d0, [r7, #8]
 8002314:	ed87 1b00 	vstr	d1, [r7]
	// setup rise_time = 0.15s || stable = 0.70 || fall_time = 0.15
	float compare_time;
	double maximum_speed = 700; // mm/s
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	4bc6      	ldr	r3, [pc, #792]	; (8002638 <Trapzoidal_viapoint+0x330>)
 800231e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	float time_first;
	static double last_position; //mm^2/s


	compare_time = sampling_time / 1000.0;
 8002322:	4bc6      	ldr	r3, [pc, #792]	; (800263c <Trapzoidal_viapoint+0x334>)
 8002324:	ed93 7a00 	vldr	s14, [r3]
 8002328:	eddf 6ac5 	vldr	s13, [pc, #788]	; 8002640 <Trapzoidal_viapoint+0x338>
 800232c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002330:	edc7 7a05 	vstr	s15, [r7, #20]



	time_final = (1.5* (final_point - initial_point) / maximum_speed);
 8002334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002338:	e9d7 0100 	ldrd	r0, r1, [r7]
 800233c:	f7fd ff50 	bl	80001e0 <__aeabi_dsub>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	4bbd      	ldr	r3, [pc, #756]	; (8002644 <Trapzoidal_viapoint+0x33c>)
 800234e:	f7fe f8ff 	bl	8000550 <__aeabi_dmul>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800235e:	f7fe fa21 	bl	80007a4 <__aeabi_ddiv>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	f7fe fbb3 	bl	8000ad4 <__aeabi_d2f>
 800236e:	4603      	mov	r3, r0
 8002370:	4ab5      	ldr	r2, [pc, #724]	; (8002648 <Trapzoidal_viapoint+0x340>)
 8002372:	6013      	str	r3, [r2, #0]
	time_first = (initial_point - final_point + maximum_speed*time_final)/maximum_speed;
 8002374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002378:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800237c:	f7fd ff30 	bl	80001e0 <__aeabi_dsub>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4614      	mov	r4, r2
 8002386:	461d      	mov	r5, r3
 8002388:	4baf      	ldr	r3, [pc, #700]	; (8002648 <Trapzoidal_viapoint+0x340>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f887 	bl	80004a0 <__aeabi_f2d>
 8002392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002396:	f7fe f8db 	bl	8000550 <__aeabi_dmul>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4620      	mov	r0, r4
 80023a0:	4629      	mov	r1, r5
 80023a2:	f7fd ff1f 	bl	80001e4 <__adddf3>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b2:	f7fe f9f7 	bl	80007a4 <__aeabi_ddiv>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	f7fe fb89 	bl	8000ad4 <__aeabi_d2f>
 80023c2:	4603      	mov	r3, r0
 80023c4:	613b      	str	r3, [r7, #16]

	if(time_final >= 0){
 80023c6:	4ba0      	ldr	r3, [pc, #640]	; (8002648 <Trapzoidal_viapoint+0x340>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	f2c0 813c 	blt.w	8002650 <Trapzoidal_viapoint+0x348>
		if(compare_time < time_first){
 80023d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80023dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80023e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	d52f      	bpl.n	800244a <Trapzoidal_viapoint+0x142>
				present_position = initial_point + maximum_speed*(compare_time*compare_time)/(2*time_first);
 80023ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80023ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023f2:	ee17 0a90 	vmov	r0, s15
 80023f6:	f7fe f853 	bl	80004a0 <__aeabi_f2d>
 80023fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023fe:	f7fe f8a7 	bl	8000550 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4614      	mov	r4, r2
 8002408:	461d      	mov	r5, r3
 800240a:	edd7 7a04 	vldr	s15, [r7, #16]
 800240e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002412:	ee17 0a90 	vmov	r0, s15
 8002416:	f7fe f843 	bl	80004a0 <__aeabi_f2d>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4620      	mov	r0, r4
 8002420:	4629      	mov	r1, r5
 8002422:	f7fe f9bf 	bl	80007a4 <__aeabi_ddiv>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4610      	mov	r0, r2
 800242c:	4619      	mov	r1, r3
 800242e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002432:	f7fd fed7 	bl	80001e4 <__adddf3>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f7fe fb49 	bl	8000ad4 <__aeabi_d2f>
 8002442:	4603      	mov	r3, r0
 8002444:	4a81      	ldr	r2, [pc, #516]	; (800264c <Trapzoidal_viapoint+0x344>)
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e24c      	b.n	80028e4 <Trapzoidal_viapoint+0x5dc>
			}
			else if(compare_time > time_first && compare_time < time_final - time_first){
 800244a:	ed97 7a05 	vldr	s14, [r7, #20]
 800244e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245a:	dd4b      	ble.n	80024f4 <Trapzoidal_viapoint+0x1ec>
 800245c:	4b7a      	ldr	r3, [pc, #488]	; (8002648 <Trapzoidal_viapoint+0x340>)
 800245e:	ed93 7a00 	vldr	s14, [r3]
 8002462:	edd7 7a04 	vldr	s15, [r7, #16]
 8002466:	ee77 7a67 	vsub.f32	s15, s14, s15
 800246a:	ed97 7a05 	vldr	s14, [r7, #20]
 800246e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	d53d      	bpl.n	80024f4 <Trapzoidal_viapoint+0x1ec>
				present_position = (final_point + initial_point - maximum_speed * time_final)/2 + (maximum_speed * compare_time);
 8002478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800247c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002480:	f7fd feb0 	bl	80001e4 <__adddf3>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4614      	mov	r4, r2
 800248a:	461d      	mov	r5, r3
 800248c:	4b6e      	ldr	r3, [pc, #440]	; (8002648 <Trapzoidal_viapoint+0x340>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe f805 	bl	80004a0 <__aeabi_f2d>
 8002496:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800249a:	f7fe f859 	bl	8000550 <__aeabi_dmul>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4620      	mov	r0, r4
 80024a4:	4629      	mov	r1, r5
 80024a6:	f7fd fe9b 	bl	80001e0 <__aeabi_dsub>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024ba:	f7fe f973 	bl	80007a4 <__aeabi_ddiv>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4614      	mov	r4, r2
 80024c4:	461d      	mov	r5, r3
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7fd ffea 	bl	80004a0 <__aeabi_f2d>
 80024cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024d0:	f7fe f83e 	bl	8000550 <__aeabi_dmul>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4620      	mov	r0, r4
 80024da:	4629      	mov	r1, r5
 80024dc:	f7fd fe82 	bl	80001e4 <__adddf3>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7fe faf4 	bl	8000ad4 <__aeabi_d2f>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4a57      	ldr	r2, [pc, #348]	; (800264c <Trapzoidal_viapoint+0x344>)
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e1f7      	b.n	80028e4 <Trapzoidal_viapoint+0x5dc>
			}
			else if(time_final - time_first < compare_time && compare_time <= time_final){
 80024f4:	4b54      	ldr	r3, [pc, #336]	; (8002648 <Trapzoidal_viapoint+0x340>)
 80024f6:	ed93 7a00 	vldr	s14, [r3]
 80024fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80024fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002502:	ed97 7a05 	vldr	s14, [r7, #20]
 8002506:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250e:	f340 81e9 	ble.w	80028e4 <Trapzoidal_viapoint+0x5dc>
 8002512:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <Trapzoidal_viapoint+0x340>)
 8002514:	edd3 7a00 	vldr	s15, [r3]
 8002518:	ed97 7a05 	vldr	s14, [r7, #20]
 800251c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002524:	f200 81de 	bhi.w	80028e4 <Trapzoidal_viapoint+0x5dc>
				present_position = final_point - (maximum_speed*(time_final*time_final)) / (2*time_first) + maximum_speed*time_final*compare_time/time_first - maximum_speed*(compare_time*compare_time)/(2*time_first);
 8002528:	4b47      	ldr	r3, [pc, #284]	; (8002648 <Trapzoidal_viapoint+0x340>)
 800252a:	ed93 7a00 	vldr	s14, [r3]
 800252e:	4b46      	ldr	r3, [pc, #280]	; (8002648 <Trapzoidal_viapoint+0x340>)
 8002530:	edd3 7a00 	vldr	s15, [r3]
 8002534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002538:	ee17 0a90 	vmov	r0, s15
 800253c:	f7fd ffb0 	bl	80004a0 <__aeabi_f2d>
 8002540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002544:	f7fe f804 	bl	8000550 <__aeabi_dmul>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4614      	mov	r4, r2
 800254e:	461d      	mov	r5, r3
 8002550:	edd7 7a04 	vldr	s15, [r7, #16]
 8002554:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002558:	ee17 0a90 	vmov	r0, s15
 800255c:	f7fd ffa0 	bl	80004a0 <__aeabi_f2d>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fe f91c 	bl	80007a4 <__aeabi_ddiv>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002574:	f7fd fe34 	bl	80001e0 <__aeabi_dsub>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4614      	mov	r4, r2
 800257e:	461d      	mov	r5, r3
 8002580:	4b31      	ldr	r3, [pc, #196]	; (8002648 <Trapzoidal_viapoint+0x340>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ff8b 	bl	80004a0 <__aeabi_f2d>
 800258a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800258e:	f7fd ffdf 	bl	8000550 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4690      	mov	r8, r2
 8002598:	4699      	mov	r9, r3
 800259a:	6978      	ldr	r0, [r7, #20]
 800259c:	f7fd ff80 	bl	80004a0 <__aeabi_f2d>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4640      	mov	r0, r8
 80025a6:	4649      	mov	r1, r9
 80025a8:	f7fd ffd2 	bl	8000550 <__aeabi_dmul>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4690      	mov	r8, r2
 80025b2:	4699      	mov	r9, r3
 80025b4:	6938      	ldr	r0, [r7, #16]
 80025b6:	f7fd ff73 	bl	80004a0 <__aeabi_f2d>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4640      	mov	r0, r8
 80025c0:	4649      	mov	r1, r9
 80025c2:	f7fe f8ef 	bl	80007a4 <__aeabi_ddiv>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4620      	mov	r0, r4
 80025cc:	4629      	mov	r1, r5
 80025ce:	f7fd fe09 	bl	80001e4 <__adddf3>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4614      	mov	r4, r2
 80025d8:	461d      	mov	r5, r3
 80025da:	edd7 7a05 	vldr	s15, [r7, #20]
 80025de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025e2:	ee17 0a90 	vmov	r0, s15
 80025e6:	f7fd ff5b 	bl	80004a0 <__aeabi_f2d>
 80025ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ee:	f7fd ffaf 	bl	8000550 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4690      	mov	r8, r2
 80025f8:	4699      	mov	r9, r3
 80025fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80025fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002602:	ee17 0a90 	vmov	r0, s15
 8002606:	f7fd ff4b 	bl	80004a0 <__aeabi_f2d>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4640      	mov	r0, r8
 8002610:	4649      	mov	r1, r9
 8002612:	f7fe f8c7 	bl	80007a4 <__aeabi_ddiv>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4620      	mov	r0, r4
 800261c:	4629      	mov	r1, r5
 800261e:	f7fd fddf 	bl	80001e0 <__aeabi_dsub>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	f7fe fa53 	bl	8000ad4 <__aeabi_d2f>
 800262e:	4603      	mov	r3, r0
 8002630:	4a06      	ldr	r2, [pc, #24]	; (800264c <Trapzoidal_viapoint+0x344>)
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e156      	b.n	80028e4 <Trapzoidal_viapoint+0x5dc>
 8002636:	bf00      	nop
 8002638:	4085e000 	.word	0x4085e000
 800263c:	20000ce0 	.word	0x20000ce0
 8002640:	447a0000 	.word	0x447a0000
 8002644:	3ff80000 	.word	0x3ff80000
 8002648:	20000cec 	.word	0x20000cec
 800264c:	20000ce8 	.word	0x20000ce8
//				present_time = 0;
//				position = present_position;

			}

	}else if(time_final < 0){
 8002650:	4b51      	ldr	r3, [pc, #324]	; (8002798 <Trapzoidal_viapoint+0x490>)
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800265a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265e:	f140 8141 	bpl.w	80028e4 <Trapzoidal_viapoint+0x5dc>
		time_final = time_final * -1;
 8002662:	4b4d      	ldr	r3, [pc, #308]	; (8002798 <Trapzoidal_viapoint+0x490>)
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	eef1 7a67 	vneg.f32	s15, s15
 800266c:	4b4a      	ldr	r3, [pc, #296]	; (8002798 <Trapzoidal_viapoint+0x490>)
 800266e:	edc3 7a00 	vstr	s15, [r3]
		time_first = time_first * -1;
 8002672:	edd7 7a04 	vldr	s15, [r7, #16]
 8002676:	eef1 7a67 	vneg.f32	s15, s15
 800267a:	edc7 7a04 	vstr	s15, [r7, #16]
		if(compare_time < time_first){
 800267e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002682:	edd7 7a04 	vldr	s15, [r7, #16]
 8002686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	d52d      	bpl.n	80026ec <Trapzoidal_viapoint+0x3e4>
				present_position = initial_point - maximum_speed*(compare_time*compare_time)/(2*time_first);
 8002690:	edd7 7a05 	vldr	s15, [r7, #20]
 8002694:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002698:	ee17 0a90 	vmov	r0, s15
 800269c:	f7fd ff00 	bl	80004a0 <__aeabi_f2d>
 80026a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026a4:	f7fd ff54 	bl	8000550 <__aeabi_dmul>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4614      	mov	r4, r2
 80026ae:	461d      	mov	r5, r3
 80026b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80026b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026b8:	ee17 0a90 	vmov	r0, s15
 80026bc:	f7fd fef0 	bl	80004a0 <__aeabi_f2d>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4620      	mov	r0, r4
 80026c6:	4629      	mov	r1, r5
 80026c8:	f7fe f86c 	bl	80007a4 <__aeabi_ddiv>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026d4:	f7fd fd84 	bl	80001e0 <__aeabi_dsub>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	f7fe f9f8 	bl	8000ad4 <__aeabi_d2f>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4a2d      	ldr	r2, [pc, #180]	; (800279c <Trapzoidal_viapoint+0x494>)
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e0fb      	b.n	80028e4 <Trapzoidal_viapoint+0x5dc>
		}
		else if(compare_time > time_first && compare_time < time_final - time_first){
 80026ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80026f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80026f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fc:	dd50      	ble.n	80027a0 <Trapzoidal_viapoint+0x498>
 80026fe:	4b26      	ldr	r3, [pc, #152]	; (8002798 <Trapzoidal_viapoint+0x490>)
 8002700:	ed93 7a00 	vldr	s14, [r3]
 8002704:	edd7 7a04 	vldr	s15, [r7, #16]
 8002708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002718:	d542      	bpl.n	80027a0 <Trapzoidal_viapoint+0x498>
				present_position = (final_point + initial_point + maximum_speed * time_final)/2 - (maximum_speed * compare_time);
 800271a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800271e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002722:	f7fd fd5f 	bl	80001e4 <__adddf3>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4614      	mov	r4, r2
 800272c:	461d      	mov	r5, r3
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <Trapzoidal_viapoint+0x490>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd feb4 	bl	80004a0 <__aeabi_f2d>
 8002738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800273c:	f7fd ff08 	bl	8000550 <__aeabi_dmul>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4620      	mov	r0, r4
 8002746:	4629      	mov	r1, r5
 8002748:	f7fd fd4c 	bl	80001e4 <__adddf3>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800275c:	f7fe f822 	bl	80007a4 <__aeabi_ddiv>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4614      	mov	r4, r2
 8002766:	461d      	mov	r5, r3
 8002768:	6978      	ldr	r0, [r7, #20]
 800276a:	f7fd fe99 	bl	80004a0 <__aeabi_f2d>
 800276e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002772:	f7fd feed 	bl	8000550 <__aeabi_dmul>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4620      	mov	r0, r4
 800277c:	4629      	mov	r1, r5
 800277e:	f7fd fd2f 	bl	80001e0 <__aeabi_dsub>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4610      	mov	r0, r2
 8002788:	4619      	mov	r1, r3
 800278a:	f7fe f9a3 	bl	8000ad4 <__aeabi_d2f>
 800278e:	4603      	mov	r3, r0
 8002790:	4a02      	ldr	r2, [pc, #8]	; (800279c <Trapzoidal_viapoint+0x494>)
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	e0a6      	b.n	80028e4 <Trapzoidal_viapoint+0x5dc>
 8002796:	bf00      	nop
 8002798:	20000cec 	.word	0x20000cec
 800279c:	20000ce8 	.word	0x20000ce8
		}
		else if(time_final - time_first < compare_time && compare_time <= time_final){
 80027a0:	4b9f      	ldr	r3, [pc, #636]	; (8002a20 <Trapzoidal_viapoint+0x718>)
 80027a2:	ed93 7a00 	vldr	s14, [r3]
 80027a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80027aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80027b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ba:	f340 8093 	ble.w	80028e4 <Trapzoidal_viapoint+0x5dc>
 80027be:	4b98      	ldr	r3, [pc, #608]	; (8002a20 <Trapzoidal_viapoint+0x718>)
 80027c0:	edd3 7a00 	vldr	s15, [r3]
 80027c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80027c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d0:	f200 8088 	bhi.w	80028e4 <Trapzoidal_viapoint+0x5dc>
				present_position = final_point + (maximum_speed*(time_final*time_final)) / (2*time_first) - maximum_speed*time_final*compare_time/time_first + maximum_speed*(compare_time*compare_time)/(2*time_first);
 80027d4:	4b92      	ldr	r3, [pc, #584]	; (8002a20 <Trapzoidal_viapoint+0x718>)
 80027d6:	ed93 7a00 	vldr	s14, [r3]
 80027da:	4b91      	ldr	r3, [pc, #580]	; (8002a20 <Trapzoidal_viapoint+0x718>)
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e4:	ee17 0a90 	vmov	r0, s15
 80027e8:	f7fd fe5a 	bl	80004a0 <__aeabi_f2d>
 80027ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f0:	f7fd feae 	bl	8000550 <__aeabi_dmul>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4614      	mov	r4, r2
 80027fa:	461d      	mov	r5, r3
 80027fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002800:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002804:	ee17 0a90 	vmov	r0, s15
 8002808:	f7fd fe4a 	bl	80004a0 <__aeabi_f2d>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4620      	mov	r0, r4
 8002812:	4629      	mov	r1, r5
 8002814:	f7fd ffc6 	bl	80007a4 <__aeabi_ddiv>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002824:	f7fd fcde 	bl	80001e4 <__adddf3>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4614      	mov	r4, r2
 800282e:	461d      	mov	r5, r3
 8002830:	4b7b      	ldr	r3, [pc, #492]	; (8002a20 <Trapzoidal_viapoint+0x718>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd fe33 	bl	80004a0 <__aeabi_f2d>
 800283a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800283e:	f7fd fe87 	bl	8000550 <__aeabi_dmul>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4690      	mov	r8, r2
 8002848:	4699      	mov	r9, r3
 800284a:	6978      	ldr	r0, [r7, #20]
 800284c:	f7fd fe28 	bl	80004a0 <__aeabi_f2d>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4640      	mov	r0, r8
 8002856:	4649      	mov	r1, r9
 8002858:	f7fd fe7a 	bl	8000550 <__aeabi_dmul>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4690      	mov	r8, r2
 8002862:	4699      	mov	r9, r3
 8002864:	6938      	ldr	r0, [r7, #16]
 8002866:	f7fd fe1b 	bl	80004a0 <__aeabi_f2d>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4640      	mov	r0, r8
 8002870:	4649      	mov	r1, r9
 8002872:	f7fd ff97 	bl	80007a4 <__aeabi_ddiv>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4620      	mov	r0, r4
 800287c:	4629      	mov	r1, r5
 800287e:	f7fd fcaf 	bl	80001e0 <__aeabi_dsub>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4614      	mov	r4, r2
 8002888:	461d      	mov	r5, r3
 800288a:	edd7 7a05 	vldr	s15, [r7, #20]
 800288e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002892:	ee17 0a90 	vmov	r0, s15
 8002896:	f7fd fe03 	bl	80004a0 <__aeabi_f2d>
 800289a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800289e:	f7fd fe57 	bl	8000550 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4690      	mov	r8, r2
 80028a8:	4699      	mov	r9, r3
 80028aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80028ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028b2:	ee17 0a90 	vmov	r0, s15
 80028b6:	f7fd fdf3 	bl	80004a0 <__aeabi_f2d>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4640      	mov	r0, r8
 80028c0:	4649      	mov	r1, r9
 80028c2:	f7fd ff6f 	bl	80007a4 <__aeabi_ddiv>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4620      	mov	r0, r4
 80028cc:	4629      	mov	r1, r5
 80028ce:	f7fd fc89 	bl	80001e4 <__adddf3>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f7fe f8fb 	bl	8000ad4 <__aeabi_d2f>
 80028de:	4603      	mov	r3, r0
 80028e0:	4a50      	ldr	r2, [pc, #320]	; (8002a24 <Trapzoidal_viapoint+0x71c>)
 80028e2:	6013      	str	r3, [r2, #0]
//				position = present_position;

		}
	}

	speed_happen = (present_position - last_position)/0.001;
 80028e4:	4b4f      	ldr	r3, [pc, #316]	; (8002a24 <Trapzoidal_viapoint+0x71c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fdd9 	bl	80004a0 <__aeabi_f2d>
 80028ee:	4b4e      	ldr	r3, [pc, #312]	; (8002a28 <Trapzoidal_viapoint+0x720>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fc74 	bl	80001e0 <__aeabi_dsub>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	a343      	add	r3, pc, #268	; (adr r3, 8002a10 <Trapzoidal_viapoint+0x708>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd ff4d 	bl	80007a4 <__aeabi_ddiv>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f7fe f8df 	bl	8000ad4 <__aeabi_d2f>
 8002916:	4603      	mov	r3, r0
 8002918:	4a44      	ldr	r2, [pc, #272]	; (8002a2c <Trapzoidal_viapoint+0x724>)
 800291a:	6013      	str	r3, [r2, #0]

	degree = 128.38046 * present_position;
 800291c:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <Trapzoidal_viapoint+0x71c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fdbd 	bl	80004a0 <__aeabi_f2d>
 8002926:	a33c      	add	r3, pc, #240	; (adr r3, 8002a18 <Trapzoidal_viapoint+0x710>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f7fd fe10 	bl	8000550 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	f7fe f8a4 	bl	8000a84 <__aeabi_d2iz>
 800293c:	4603      	mov	r3, r0
 800293e:	4a3c      	ldr	r2, [pc, #240]	; (8002a30 <Trapzoidal_viapoint+0x728>)
 8002940:	6013      	str	r3, [r2, #0]
	Vfeedback = PID_plan2(degree - QEIRead, speed_happen - avg_velocity, 1);
 8002942:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <Trapzoidal_viapoint+0x728>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4b3b      	ldr	r3, [pc, #236]	; (8002a34 <Trapzoidal_viapoint+0x72c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fd95 	bl	800047c <__aeabi_i2d>
 8002952:	4604      	mov	r4, r0
 8002954:	460d      	mov	r5, r1
 8002956:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <Trapzoidal_viapoint+0x724>)
 8002958:	ed93 7a00 	vldr	s14, [r3]
 800295c:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <Trapzoidal_viapoint+0x730>)
 800295e:	edd3 7a00 	vldr	s15, [r3]
 8002962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002966:	ee17 0a90 	vmov	r0, s15
 800296a:	f7fd fd99 	bl	80004a0 <__aeabi_f2d>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	2001      	movs	r0, #1
 8002974:	ec43 2b11 	vmov	d1, r2, r3
 8002978:	ec45 4b10 	vmov	d0, r4, r5
 800297c:	f000 fc0c 	bl	8003198 <PID_plan2>
 8002980:	ec53 2b10 	vmov	r2, r3, d0
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	f7fe f8a4 	bl	8000ad4 <__aeabi_d2f>
 800298c:	4603      	mov	r3, r0
 800298e:	4a2b      	ldr	r2, [pc, #172]	; (8002a3c <Trapzoidal_viapoint+0x734>)
 8002990:	6013      	str	r3, [r2, #0]
	if(Vfeedback >= 20000){
 8002992:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <Trapzoidal_viapoint+0x734>)
 8002994:	edd3 7a00 	vldr	s15, [r3]
 8002998:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002a40 <Trapzoidal_viapoint+0x738>
 800299c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a4:	db03      	blt.n	80029ae <Trapzoidal_viapoint+0x6a6>
		Vfeedback = 20000;
 80029a6:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <Trapzoidal_viapoint+0x734>)
 80029a8:	4a26      	ldr	r2, [pc, #152]	; (8002a44 <Trapzoidal_viapoint+0x73c>)
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e00c      	b.n	80029c8 <Trapzoidal_viapoint+0x6c0>
	}

	else if(Vfeedback <= -20000){
 80029ae:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <Trapzoidal_viapoint+0x734>)
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002a48 <Trapzoidal_viapoint+0x740>
 80029b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c0:	d802      	bhi.n	80029c8 <Trapzoidal_viapoint+0x6c0>
		Vfeedback = -20000;
 80029c2:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <Trapzoidal_viapoint+0x734>)
 80029c4:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <Trapzoidal_viapoint+0x744>)
 80029c6:	601a      	str	r2, [r3, #0]
	}

	motor_control(compare_time, time_final);
 80029c8:	6978      	ldr	r0, [r7, #20]
 80029ca:	f7fd fd69 	bl	80004a0 <__aeabi_f2d>
 80029ce:	4604      	mov	r4, r0
 80029d0:	460d      	mov	r5, r1
 80029d2:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <Trapzoidal_viapoint+0x718>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fd62 	bl	80004a0 <__aeabi_f2d>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	ec43 2b11 	vmov	d1, r2, r3
 80029e4:	ec45 4b10 	vmov	d0, r4, r5
 80029e8:	f000 fc9a 	bl	8003320 <motor_control>
	last_position = present_position;
 80029ec:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <Trapzoidal_viapoint+0x71c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fd55 	bl	80004a0 <__aeabi_f2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	490b      	ldr	r1, [pc, #44]	; (8002a28 <Trapzoidal_viapoint+0x720>)
 80029fc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002a00:	bf00      	nop
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a0a:	bf00      	nop
 8002a0c:	f3af 8000 	nop.w
 8002a10:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a14:	3f50624d 	.word	0x3f50624d
 8002a18:	ba732df5 	.word	0xba732df5
 8002a1c:	40600c2c 	.word	0x40600c2c
 8002a20:	20000cec 	.word	0x20000cec
 8002a24:	20000ce8 	.word	0x20000ce8
 8002a28:	20000d68 	.word	0x20000d68
 8002a2c:	20000ce4 	.word	0x20000ce4
 8002a30:	20000cdc 	.word	0x20000cdc
 8002a34:	20000c9c 	.word	0x20000c9c
 8002a38:	20000cd8 	.word	0x20000cd8
 8002a3c:	20000d18 	.word	0x20000d18
 8002a40:	469c4000 	.word	0x469c4000
 8002a44:	469c4000 	.word	0x469c4000
 8002a48:	c69c4000 	.word	0xc69c4000
 8002a4c:	c69c4000 	.word	0xc69c4000

08002a50 <Trapzoidal_pick_place>:


void Trapzoidal_pick_place(double initial_point, double final_point){
 8002a50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a54:	b088      	sub	sp, #32
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a5c:	ed87 1b00 	vstr	d1, [r7]
	// setup rise_time = 0.15s || stable = 0.70 || fall_time = 0.15
	float compare_time;
	double maximum_speed = 700; // mm/s
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	4bc6      	ldr	r3, [pc, #792]	; (8002d80 <Trapzoidal_pick_place+0x330>)
 8002a66:	e9c7 2306 	strd	r2, r3, [r7, #24]
	float time_first;
	static double last_position; //mm^2/s


	compare_time = sampling_time / 1000.0;
 8002a6a:	4bc6      	ldr	r3, [pc, #792]	; (8002d84 <Trapzoidal_pick_place+0x334>)
 8002a6c:	ed93 7a00 	vldr	s14, [r3]
 8002a70:	eddf 6ac5 	vldr	s13, [pc, #788]	; 8002d88 <Trapzoidal_pick_place+0x338>
 8002a74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a78:	edc7 7a05 	vstr	s15, [r7, #20]



	time_final = (1.5* (final_point - initial_point) / maximum_speed);
 8002a7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a84:	f7fd fbac 	bl	80001e0 <__aeabi_dsub>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	4bbd      	ldr	r3, [pc, #756]	; (8002d8c <Trapzoidal_pick_place+0x33c>)
 8002a96:	f7fd fd5b 	bl	8000550 <__aeabi_dmul>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aa6:	f7fd fe7d 	bl	80007a4 <__aeabi_ddiv>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f7fe f80f 	bl	8000ad4 <__aeabi_d2f>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4ab5      	ldr	r2, [pc, #724]	; (8002d90 <Trapzoidal_pick_place+0x340>)
 8002aba:	6013      	str	r3, [r2, #0]
	time_first = (initial_point - final_point + maximum_speed*time_final)/maximum_speed;
 8002abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ac0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ac4:	f7fd fb8c 	bl	80001e0 <__aeabi_dsub>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4614      	mov	r4, r2
 8002ace:	461d      	mov	r5, r3
 8002ad0:	4baf      	ldr	r3, [pc, #700]	; (8002d90 <Trapzoidal_pick_place+0x340>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fce3 	bl	80004a0 <__aeabi_f2d>
 8002ada:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ade:	f7fd fd37 	bl	8000550 <__aeabi_dmul>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	4629      	mov	r1, r5
 8002aea:	f7fd fb7b 	bl	80001e4 <__adddf3>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002afa:	f7fd fe53 	bl	80007a4 <__aeabi_ddiv>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4610      	mov	r0, r2
 8002b04:	4619      	mov	r1, r3
 8002b06:	f7fd ffe5 	bl	8000ad4 <__aeabi_d2f>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	613b      	str	r3, [r7, #16]

	if(time_final >= 0){
 8002b0e:	4ba0      	ldr	r3, [pc, #640]	; (8002d90 <Trapzoidal_pick_place+0x340>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	f2c0 813c 	blt.w	8002d98 <Trapzoidal_pick_place+0x348>
		if(compare_time < time_first){
 8002b20:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b24:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b30:	d52f      	bpl.n	8002b92 <Trapzoidal_pick_place+0x142>
				present_position = initial_point + maximum_speed*(compare_time*compare_time)/(2*time_first);
 8002b32:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b3a:	ee17 0a90 	vmov	r0, s15
 8002b3e:	f7fd fcaf 	bl	80004a0 <__aeabi_f2d>
 8002b42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b46:	f7fd fd03 	bl	8000550 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4614      	mov	r4, r2
 8002b50:	461d      	mov	r5, r3
 8002b52:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b5a:	ee17 0a90 	vmov	r0, s15
 8002b5e:	f7fd fc9f 	bl	80004a0 <__aeabi_f2d>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4620      	mov	r0, r4
 8002b68:	4629      	mov	r1, r5
 8002b6a:	f7fd fe1b 	bl	80007a4 <__aeabi_ddiv>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b7a:	f7fd fb33 	bl	80001e4 <__adddf3>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4610      	mov	r0, r2
 8002b84:	4619      	mov	r1, r3
 8002b86:	f7fd ffa5 	bl	8000ad4 <__aeabi_d2f>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4a81      	ldr	r2, [pc, #516]	; (8002d94 <Trapzoidal_pick_place+0x344>)
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	e24c      	b.n	800302c <Trapzoidal_pick_place+0x5dc>
			}
			else if(compare_time > time_first && compare_time < time_final - time_first){
 8002b92:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b96:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba2:	dd4b      	ble.n	8002c3c <Trapzoidal_pick_place+0x1ec>
 8002ba4:	4b7a      	ldr	r3, [pc, #488]	; (8002d90 <Trapzoidal_pick_place+0x340>)
 8002ba6:	ed93 7a00 	vldr	s14, [r3]
 8002baa:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbe:	d53d      	bpl.n	8002c3c <Trapzoidal_pick_place+0x1ec>
				present_position = (final_point + initial_point - maximum_speed * time_final)/2 + (maximum_speed * compare_time);
 8002bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bc8:	f7fd fb0c 	bl	80001e4 <__adddf3>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4614      	mov	r4, r2
 8002bd2:	461d      	mov	r5, r3
 8002bd4:	4b6e      	ldr	r3, [pc, #440]	; (8002d90 <Trapzoidal_pick_place+0x340>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fc61 	bl	80004a0 <__aeabi_f2d>
 8002bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002be2:	f7fd fcb5 	bl	8000550 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4620      	mov	r0, r4
 8002bec:	4629      	mov	r1, r5
 8002bee:	f7fd faf7 	bl	80001e0 <__aeabi_dsub>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c02:	f7fd fdcf 	bl	80007a4 <__aeabi_ddiv>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4614      	mov	r4, r2
 8002c0c:	461d      	mov	r5, r3
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f7fd fc46 	bl	80004a0 <__aeabi_f2d>
 8002c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c18:	f7fd fc9a 	bl	8000550 <__aeabi_dmul>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4620      	mov	r0, r4
 8002c22:	4629      	mov	r1, r5
 8002c24:	f7fd fade 	bl	80001e4 <__adddf3>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f7fd ff50 	bl	8000ad4 <__aeabi_d2f>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4a57      	ldr	r2, [pc, #348]	; (8002d94 <Trapzoidal_pick_place+0x344>)
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e1f7      	b.n	800302c <Trapzoidal_pick_place+0x5dc>
			}
			else if(time_final - time_first < compare_time && compare_time <= time_final){
 8002c3c:	4b54      	ldr	r3, [pc, #336]	; (8002d90 <Trapzoidal_pick_place+0x340>)
 8002c3e:	ed93 7a00 	vldr	s14, [r3]
 8002c42:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c56:	f340 81e9 	ble.w	800302c <Trapzoidal_pick_place+0x5dc>
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <Trapzoidal_pick_place+0x340>)
 8002c5c:	edd3 7a00 	vldr	s15, [r3]
 8002c60:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6c:	f200 81de 	bhi.w	800302c <Trapzoidal_pick_place+0x5dc>
				present_position = final_point - (maximum_speed*(time_final*time_final)) / (2*time_first) + maximum_speed*time_final*compare_time/time_first - maximum_speed*(compare_time*compare_time)/(2*time_first);
 8002c70:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <Trapzoidal_pick_place+0x340>)
 8002c72:	ed93 7a00 	vldr	s14, [r3]
 8002c76:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <Trapzoidal_pick_place+0x340>)
 8002c78:	edd3 7a00 	vldr	s15, [r3]
 8002c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c80:	ee17 0a90 	vmov	r0, s15
 8002c84:	f7fd fc0c 	bl	80004a0 <__aeabi_f2d>
 8002c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c8c:	f7fd fc60 	bl	8000550 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4614      	mov	r4, r2
 8002c96:	461d      	mov	r5, r3
 8002c98:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ca0:	ee17 0a90 	vmov	r0, s15
 8002ca4:	f7fd fbfc 	bl	80004a0 <__aeabi_f2d>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4620      	mov	r0, r4
 8002cae:	4629      	mov	r1, r5
 8002cb0:	f7fd fd78 	bl	80007a4 <__aeabi_ddiv>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cbc:	f7fd fa90 	bl	80001e0 <__aeabi_dsub>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <Trapzoidal_pick_place+0x340>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fd fbe7 	bl	80004a0 <__aeabi_f2d>
 8002cd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd6:	f7fd fc3b 	bl	8000550 <__aeabi_dmul>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4690      	mov	r8, r2
 8002ce0:	4699      	mov	r9, r3
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7fd fbdc 	bl	80004a0 <__aeabi_f2d>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4640      	mov	r0, r8
 8002cee:	4649      	mov	r1, r9
 8002cf0:	f7fd fc2e 	bl	8000550 <__aeabi_dmul>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4690      	mov	r8, r2
 8002cfa:	4699      	mov	r9, r3
 8002cfc:	6938      	ldr	r0, [r7, #16]
 8002cfe:	f7fd fbcf 	bl	80004a0 <__aeabi_f2d>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4640      	mov	r0, r8
 8002d08:	4649      	mov	r1, r9
 8002d0a:	f7fd fd4b 	bl	80007a4 <__aeabi_ddiv>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4620      	mov	r0, r4
 8002d14:	4629      	mov	r1, r5
 8002d16:	f7fd fa65 	bl	80001e4 <__adddf3>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4614      	mov	r4, r2
 8002d20:	461d      	mov	r5, r3
 8002d22:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d26:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002d2a:	ee17 0a90 	vmov	r0, s15
 8002d2e:	f7fd fbb7 	bl	80004a0 <__aeabi_f2d>
 8002d32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d36:	f7fd fc0b 	bl	8000550 <__aeabi_dmul>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4690      	mov	r8, r2
 8002d40:	4699      	mov	r9, r3
 8002d42:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d4a:	ee17 0a90 	vmov	r0, s15
 8002d4e:	f7fd fba7 	bl	80004a0 <__aeabi_f2d>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4640      	mov	r0, r8
 8002d58:	4649      	mov	r1, r9
 8002d5a:	f7fd fd23 	bl	80007a4 <__aeabi_ddiv>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4620      	mov	r0, r4
 8002d64:	4629      	mov	r1, r5
 8002d66:	f7fd fa3b 	bl	80001e0 <__aeabi_dsub>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd feaf 	bl	8000ad4 <__aeabi_d2f>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a06      	ldr	r2, [pc, #24]	; (8002d94 <Trapzoidal_pick_place+0x344>)
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	e156      	b.n	800302c <Trapzoidal_pick_place+0x5dc>
 8002d7e:	bf00      	nop
 8002d80:	4085e000 	.word	0x4085e000
 8002d84:	20000ce0 	.word	0x20000ce0
 8002d88:	447a0000 	.word	0x447a0000
 8002d8c:	3ff80000 	.word	0x3ff80000
 8002d90:	20000cec 	.word	0x20000cec
 8002d94:	20000ce8 	.word	0x20000ce8
//				present_time = 0;
//				position = present_position;

			}

	}else if(time_final < 0){
 8002d98:	4b51      	ldr	r3, [pc, #324]	; (8002ee0 <Trapzoidal_pick_place+0x490>)
 8002d9a:	edd3 7a00 	vldr	s15, [r3]
 8002d9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da6:	f140 8141 	bpl.w	800302c <Trapzoidal_pick_place+0x5dc>
		time_final = time_final * -1;
 8002daa:	4b4d      	ldr	r3, [pc, #308]	; (8002ee0 <Trapzoidal_pick_place+0x490>)
 8002dac:	edd3 7a00 	vldr	s15, [r3]
 8002db0:	eef1 7a67 	vneg.f32	s15, s15
 8002db4:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <Trapzoidal_pick_place+0x490>)
 8002db6:	edc3 7a00 	vstr	s15, [r3]
		time_first = time_first * -1;
 8002dba:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dbe:	eef1 7a67 	vneg.f32	s15, s15
 8002dc2:	edc7 7a04 	vstr	s15, [r7, #16]
		if(compare_time < time_first){
 8002dc6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dca:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	d52d      	bpl.n	8002e34 <Trapzoidal_pick_place+0x3e4>
				present_position = initial_point - maximum_speed*(compare_time*compare_time)/(2*time_first);
 8002dd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ddc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002de0:	ee17 0a90 	vmov	r0, s15
 8002de4:	f7fd fb5c 	bl	80004a0 <__aeabi_f2d>
 8002de8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dec:	f7fd fbb0 	bl	8000550 <__aeabi_dmul>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4614      	mov	r4, r2
 8002df6:	461d      	mov	r5, r3
 8002df8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dfc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e00:	ee17 0a90 	vmov	r0, s15
 8002e04:	f7fd fb4c 	bl	80004a0 <__aeabi_f2d>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	4629      	mov	r1, r5
 8002e10:	f7fd fcc8 	bl	80007a4 <__aeabi_ddiv>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e1c:	f7fd f9e0 	bl	80001e0 <__aeabi_dsub>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	f7fd fe54 	bl	8000ad4 <__aeabi_d2f>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4a2d      	ldr	r2, [pc, #180]	; (8002ee4 <Trapzoidal_pick_place+0x494>)
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	e0fb      	b.n	800302c <Trapzoidal_pick_place+0x5dc>
		}
		else if(compare_time > time_first && compare_time < time_final - time_first){
 8002e34:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e38:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e44:	dd50      	ble.n	8002ee8 <Trapzoidal_pick_place+0x498>
 8002e46:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <Trapzoidal_pick_place+0x490>)
 8002e48:	ed93 7a00 	vldr	s14, [r3]
 8002e4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e54:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e60:	d542      	bpl.n	8002ee8 <Trapzoidal_pick_place+0x498>
				present_position = (final_point + initial_point + maximum_speed * time_final)/2 - (maximum_speed * compare_time);
 8002e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e6a:	f7fd f9bb 	bl	80001e4 <__adddf3>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4614      	mov	r4, r2
 8002e74:	461d      	mov	r5, r3
 8002e76:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <Trapzoidal_pick_place+0x490>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd fb10 	bl	80004a0 <__aeabi_f2d>
 8002e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e84:	f7fd fb64 	bl	8000550 <__aeabi_dmul>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	4629      	mov	r1, r5
 8002e90:	f7fd f9a8 	bl	80001e4 <__adddf3>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ea4:	f7fd fc7e 	bl	80007a4 <__aeabi_ddiv>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4614      	mov	r4, r2
 8002eae:	461d      	mov	r5, r3
 8002eb0:	6978      	ldr	r0, [r7, #20]
 8002eb2:	f7fd faf5 	bl	80004a0 <__aeabi_f2d>
 8002eb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eba:	f7fd fb49 	bl	8000550 <__aeabi_dmul>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	f7fd f98b 	bl	80001e0 <__aeabi_dsub>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f7fd fdff 	bl	8000ad4 <__aeabi_d2f>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4a02      	ldr	r2, [pc, #8]	; (8002ee4 <Trapzoidal_pick_place+0x494>)
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	e0a6      	b.n	800302c <Trapzoidal_pick_place+0x5dc>
 8002ede:	bf00      	nop
 8002ee0:	20000cec 	.word	0x20000cec
 8002ee4:	20000ce8 	.word	0x20000ce8
		}
		else if(time_final - time_first < compare_time && compare_time <= time_final){
 8002ee8:	4b9f      	ldr	r3, [pc, #636]	; (8003168 <Trapzoidal_pick_place+0x718>)
 8002eea:	ed93 7a00 	vldr	s14, [r3]
 8002eee:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002efa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f02:	f340 8093 	ble.w	800302c <Trapzoidal_pick_place+0x5dc>
 8002f06:	4b98      	ldr	r3, [pc, #608]	; (8003168 <Trapzoidal_pick_place+0x718>)
 8002f08:	edd3 7a00 	vldr	s15, [r3]
 8002f0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f18:	f200 8088 	bhi.w	800302c <Trapzoidal_pick_place+0x5dc>
				present_position = final_point + (maximum_speed*(time_final*time_final)) / (2*time_first) - maximum_speed*time_final*compare_time/time_first + maximum_speed*(compare_time*compare_time)/(2*time_first);
 8002f1c:	4b92      	ldr	r3, [pc, #584]	; (8003168 <Trapzoidal_pick_place+0x718>)
 8002f1e:	ed93 7a00 	vldr	s14, [r3]
 8002f22:	4b91      	ldr	r3, [pc, #580]	; (8003168 <Trapzoidal_pick_place+0x718>)
 8002f24:	edd3 7a00 	vldr	s15, [r3]
 8002f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2c:	ee17 0a90 	vmov	r0, s15
 8002f30:	f7fd fab6 	bl	80004a0 <__aeabi_f2d>
 8002f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f38:	f7fd fb0a 	bl	8000550 <__aeabi_dmul>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4614      	mov	r4, r2
 8002f42:	461d      	mov	r5, r3
 8002f44:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f4c:	ee17 0a90 	vmov	r0, s15
 8002f50:	f7fd faa6 	bl	80004a0 <__aeabi_f2d>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4620      	mov	r0, r4
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	f7fd fc22 	bl	80007a4 <__aeabi_ddiv>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f6c:	f7fd f93a 	bl	80001e4 <__adddf3>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4614      	mov	r4, r2
 8002f76:	461d      	mov	r5, r3
 8002f78:	4b7b      	ldr	r3, [pc, #492]	; (8003168 <Trapzoidal_pick_place+0x718>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fa8f 	bl	80004a0 <__aeabi_f2d>
 8002f82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f86:	f7fd fae3 	bl	8000550 <__aeabi_dmul>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4690      	mov	r8, r2
 8002f90:	4699      	mov	r9, r3
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7fd fa84 	bl	80004a0 <__aeabi_f2d>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4640      	mov	r0, r8
 8002f9e:	4649      	mov	r1, r9
 8002fa0:	f7fd fad6 	bl	8000550 <__aeabi_dmul>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4690      	mov	r8, r2
 8002faa:	4699      	mov	r9, r3
 8002fac:	6938      	ldr	r0, [r7, #16]
 8002fae:	f7fd fa77 	bl	80004a0 <__aeabi_f2d>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4640      	mov	r0, r8
 8002fb8:	4649      	mov	r1, r9
 8002fba:	f7fd fbf3 	bl	80007a4 <__aeabi_ddiv>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	f7fd f90b 	bl	80001e0 <__aeabi_dsub>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4614      	mov	r4, r2
 8002fd0:	461d      	mov	r5, r3
 8002fd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fd6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fda:	ee17 0a90 	vmov	r0, s15
 8002fde:	f7fd fa5f 	bl	80004a0 <__aeabi_f2d>
 8002fe2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe6:	f7fd fab3 	bl	8000550 <__aeabi_dmul>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4690      	mov	r8, r2
 8002ff0:	4699      	mov	r9, r3
 8002ff2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ff6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ffa:	ee17 0a90 	vmov	r0, s15
 8002ffe:	f7fd fa4f 	bl	80004a0 <__aeabi_f2d>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4640      	mov	r0, r8
 8003008:	4649      	mov	r1, r9
 800300a:	f7fd fbcb 	bl	80007a4 <__aeabi_ddiv>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4620      	mov	r0, r4
 8003014:	4629      	mov	r1, r5
 8003016:	f7fd f8e5 	bl	80001e4 <__adddf3>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	f7fd fd57 	bl	8000ad4 <__aeabi_d2f>
 8003026:	4603      	mov	r3, r0
 8003028:	4a50      	ldr	r2, [pc, #320]	; (800316c <Trapzoidal_pick_place+0x71c>)
 800302a:	6013      	str	r3, [r2, #0]
//				position = present_position;

		}
	}

	speed_happen = (present_position - last_position)/0.001;
 800302c:	4b4f      	ldr	r3, [pc, #316]	; (800316c <Trapzoidal_pick_place+0x71c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd fa35 	bl	80004a0 <__aeabi_f2d>
 8003036:	4b4e      	ldr	r3, [pc, #312]	; (8003170 <Trapzoidal_pick_place+0x720>)
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	f7fd f8d0 	bl	80001e0 <__aeabi_dsub>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	a343      	add	r3, pc, #268	; (adr r3, 8003158 <Trapzoidal_pick_place+0x708>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd fba9 	bl	80007a4 <__aeabi_ddiv>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	f7fd fd3b 	bl	8000ad4 <__aeabi_d2f>
 800305e:	4603      	mov	r3, r0
 8003060:	4a44      	ldr	r2, [pc, #272]	; (8003174 <Trapzoidal_pick_place+0x724>)
 8003062:	6013      	str	r3, [r2, #0]

	degree = 128.38046 * present_position;
 8003064:	4b41      	ldr	r3, [pc, #260]	; (800316c <Trapzoidal_pick_place+0x71c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fa19 	bl	80004a0 <__aeabi_f2d>
 800306e:	a33c      	add	r3, pc, #240	; (adr r3, 8003160 <Trapzoidal_pick_place+0x710>)
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	f7fd fa6c 	bl	8000550 <__aeabi_dmul>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f7fd fd00 	bl	8000a84 <__aeabi_d2iz>
 8003084:	4603      	mov	r3, r0
 8003086:	4a3c      	ldr	r2, [pc, #240]	; (8003178 <Trapzoidal_pick_place+0x728>)
 8003088:	6013      	str	r3, [r2, #0]
	Vfeedback = PID_plan2(degree - QEIRead, speed_happen - avg_velocity, 1);
 800308a:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <Trapzoidal_pick_place+0x728>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4b3b      	ldr	r3, [pc, #236]	; (800317c <Trapzoidal_pick_place+0x72c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd f9f1 	bl	800047c <__aeabi_i2d>
 800309a:	4604      	mov	r4, r0
 800309c:	460d      	mov	r5, r1
 800309e:	4b35      	ldr	r3, [pc, #212]	; (8003174 <Trapzoidal_pick_place+0x724>)
 80030a0:	ed93 7a00 	vldr	s14, [r3]
 80030a4:	4b36      	ldr	r3, [pc, #216]	; (8003180 <Trapzoidal_pick_place+0x730>)
 80030a6:	edd3 7a00 	vldr	s15, [r3]
 80030aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ae:	ee17 0a90 	vmov	r0, s15
 80030b2:	f7fd f9f5 	bl	80004a0 <__aeabi_f2d>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	2001      	movs	r0, #1
 80030bc:	ec43 2b11 	vmov	d1, r2, r3
 80030c0:	ec45 4b10 	vmov	d0, r4, r5
 80030c4:	f000 f868 	bl	8003198 <PID_plan2>
 80030c8:	ec53 2b10 	vmov	r2, r3, d0
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	f7fd fd00 	bl	8000ad4 <__aeabi_d2f>
 80030d4:	4603      	mov	r3, r0
 80030d6:	4a2b      	ldr	r2, [pc, #172]	; (8003184 <Trapzoidal_pick_place+0x734>)
 80030d8:	6013      	str	r3, [r2, #0]
	if(Vfeedback >= 20000){
 80030da:	4b2a      	ldr	r3, [pc, #168]	; (8003184 <Trapzoidal_pick_place+0x734>)
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003188 <Trapzoidal_pick_place+0x738>
 80030e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ec:	db03      	blt.n	80030f6 <Trapzoidal_pick_place+0x6a6>
		Vfeedback = 20000;
 80030ee:	4b25      	ldr	r3, [pc, #148]	; (8003184 <Trapzoidal_pick_place+0x734>)
 80030f0:	4a26      	ldr	r2, [pc, #152]	; (800318c <Trapzoidal_pick_place+0x73c>)
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e00c      	b.n	8003110 <Trapzoidal_pick_place+0x6c0>
	}

	else if(Vfeedback <= -20000){
 80030f6:	4b23      	ldr	r3, [pc, #140]	; (8003184 <Trapzoidal_pick_place+0x734>)
 80030f8:	edd3 7a00 	vldr	s15, [r3]
 80030fc:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003190 <Trapzoidal_pick_place+0x740>
 8003100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003108:	d802      	bhi.n	8003110 <Trapzoidal_pick_place+0x6c0>
		Vfeedback = -20000;
 800310a:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <Trapzoidal_pick_place+0x734>)
 800310c:	4a21      	ldr	r2, [pc, #132]	; (8003194 <Trapzoidal_pick_place+0x744>)
 800310e:	601a      	str	r2, [r3, #0]
	}

	motor_control_pick_place(compare_time, time_final);
 8003110:	6978      	ldr	r0, [r7, #20]
 8003112:	f7fd f9c5 	bl	80004a0 <__aeabi_f2d>
 8003116:	4604      	mov	r4, r0
 8003118:	460d      	mov	r5, r1
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <Trapzoidal_pick_place+0x718>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd f9be 	bl	80004a0 <__aeabi_f2d>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	ec43 2b11 	vmov	d1, r2, r3
 800312c:	ec45 4b10 	vmov	d0, r4, r5
 8003130:	f000 fa66 	bl	8003600 <motor_control_pick_place>
	last_position = present_position;
 8003134:	4b0d      	ldr	r3, [pc, #52]	; (800316c <Trapzoidal_pick_place+0x71c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd f9b1 	bl	80004a0 <__aeabi_f2d>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	490b      	ldr	r1, [pc, #44]	; (8003170 <Trapzoidal_pick_place+0x720>)
 8003144:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003148:	bf00      	nop
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003152:	bf00      	nop
 8003154:	f3af 8000 	nop.w
 8003158:	d2f1a9fc 	.word	0xd2f1a9fc
 800315c:	3f50624d 	.word	0x3f50624d
 8003160:	ba732df5 	.word	0xba732df5
 8003164:	40600c2c 	.word	0x40600c2c
 8003168:	20000cec 	.word	0x20000cec
 800316c:	20000ce8 	.word	0x20000ce8
 8003170:	20000d70 	.word	0x20000d70
 8003174:	20000ce4 	.word	0x20000ce4
 8003178:	20000cdc 	.word	0x20000cdc
 800317c:	20000c9c 	.word	0x20000c9c
 8003180:	20000cd8 	.word	0x20000cd8
 8003184:	20000d18 	.word	0x20000d18
 8003188:	469c4000 	.word	0x469c4000
 800318c:	469c4000 	.word	0x469c4000
 8003190:	c69c4000 	.word	0xc69c4000
 8003194:	c69c4000 	.word	0xc69c4000

08003198 <PID_plan2>:




double PID_plan2(double position_error, double velocity_error, uint8_t time_delay) {
 8003198:	b5b0      	push	{r4, r5, r7, lr}
 800319a:	b094      	sub	sp, #80	; 0x50
 800319c:	af00      	add	r7, sp, #0
 800319e:	ed87 0b04 	vstr	d0, [r7, #16]
 80031a2:	ed87 1b02 	vstr	d1, [r7, #8]
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
    // Position PID Constants
    double Kp_position = 1.25;
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	4b56      	ldr	r3, [pc, #344]	; (8003308 <PID_plan2+0x170>)
 80031b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double Ki_position = 0.000030;
 80031b4:	a34e      	add	r3, pc, #312	; (adr r3, 80032f0 <PID_plan2+0x158>)
 80031b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    // Velocity PID Constants
    double Kp_velocity = 0.85;
 80031be:	a34e      	add	r3, pc, #312	; (adr r3, 80032f8 <PID_plan2+0x160>)
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double Ki_velocity = 0.000050;
 80031c8:	a34d      	add	r3, pc, #308	; (adr r3, 8003300 <PID_plan2+0x168>)
 80031ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    // Variables for velocity PID controller
    static double velocity_integral = 0;
    static double velocity_error_previous = 0;

    // Calculate position PID output
    double position_output = Kp_position * position_error + Ki_position * position_integral;
 80031d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80031da:	f7fd f9b9 	bl	8000550 <__aeabi_dmul>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4614      	mov	r4, r2
 80031e4:	461d      	mov	r5, r3
 80031e6:	4b49      	ldr	r3, [pc, #292]	; (800330c <PID_plan2+0x174>)
 80031e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031f0:	f7fd f9ae 	bl	8000550 <__aeabi_dmul>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4620      	mov	r0, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	f7fc fff2 	bl	80001e4 <__adddf3>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    // Update position integral
    position_integral += position_error * (time_delay / 1000.0);
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd f936 	bl	800047c <__aeabi_i2d>
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	4b3e      	ldr	r3, [pc, #248]	; (8003310 <PID_plan2+0x178>)
 8003216:	f7fd fac5 	bl	80007a4 <__aeabi_ddiv>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003226:	f7fd f993 	bl	8000550 <__aeabi_dmul>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <PID_plan2+0x174>)
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f7fc ffd4 	bl	80001e4 <__adddf3>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4932      	ldr	r1, [pc, #200]	; (800330c <PID_plan2+0x174>)
 8003242:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate velocity PID output
    double velocity_output = Kp_velocity * velocity_error + Ki_velocity * velocity_integral;
 8003246:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800324a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800324e:	f7fd f97f 	bl	8000550 <__aeabi_dmul>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4614      	mov	r4, r2
 8003258:	461d      	mov	r5, r3
 800325a:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <PID_plan2+0x17c>)
 800325c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003260:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003264:	f7fd f974 	bl	8000550 <__aeabi_dmul>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4620      	mov	r0, r4
 800326e:	4629      	mov	r1, r5
 8003270:	f7fc ffb8 	bl	80001e4 <__adddf3>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Update velocity integral
    velocity_integral += velocity_error * (time_delay / 1000.0);
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd f8fc 	bl	800047c <__aeabi_i2d>
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	4b21      	ldr	r3, [pc, #132]	; (8003310 <PID_plan2+0x178>)
 800328a:	f7fd fa8b 	bl	80007a4 <__aeabi_ddiv>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4610      	mov	r0, r2
 8003294:	4619      	mov	r1, r3
 8003296:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800329a:	f7fd f959 	bl	8000550 <__aeabi_dmul>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4610      	mov	r0, r2
 80032a4:	4619      	mov	r1, r3
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <PID_plan2+0x17c>)
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	f7fc ff9a 	bl	80001e4 <__adddf3>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4917      	ldr	r1, [pc, #92]	; (8003314 <PID_plan2+0x17c>)
 80032b6:	e9c1 2300 	strd	r2, r3, [r1]

    // Store current velocity error for the next iteration
    velocity_error_previous = velocity_error;
 80032ba:	4917      	ldr	r1, [pc, #92]	; (8003318 <PID_plan2+0x180>)
 80032bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032c0:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate the final output as the sum of position and velocity outputs
    double final_output = position_output + velocity_output;
 80032c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032cc:	f7fc ff8a 	bl	80001e4 <__adddf3>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return final_output;
 80032d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032dc:	ec43 2b17 	vmov	d7, r2, r3
}
 80032e0:	eeb0 0a47 	vmov.f32	s0, s14
 80032e4:	eef0 0a67 	vmov.f32	s1, s15
 80032e8:	3750      	adds	r7, #80	; 0x50
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bdb0      	pop	{r4, r5, r7, pc}
 80032ee:	bf00      	nop
 80032f0:	4d551d69 	.word	0x4d551d69
 80032f4:	3eff7510 	.word	0x3eff7510
 80032f8:	33333333 	.word	0x33333333
 80032fc:	3feb3333 	.word	0x3feb3333
 8003300:	eb1c432d 	.word	0xeb1c432d
 8003304:	3f0a36e2 	.word	0x3f0a36e2
 8003308:	3ff40000 	.word	0x3ff40000
 800330c:	20000d78 	.word	0x20000d78
 8003310:	408f4000 	.word	0x408f4000
 8003314:	20000d80 	.word	0x20000d80
 8003318:	20000d88 	.word	0x20000d88
 800331c:	00000000 	.word	0x00000000

08003320 <motor_control>:


void motor_control(float present_time, float time)
{
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	ed87 0a01 	vstr	s0, [r7, #4]
 800332a:	edc7 0a00 	vstr	s1, [r7]
	static uint16_t timestamp_motor = 10000;
	error_hap = registerFrame[49].U16/10.0 - position;
 800332e:	4ba0      	ldr	r3, [pc, #640]	; (80035b0 <motor_control+0x290>)
 8003330:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd f8a1 	bl	800047c <__aeabi_i2d>
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	4b9d      	ldr	r3, [pc, #628]	; (80035b4 <motor_control+0x294>)
 8003340:	f7fd fa30 	bl	80007a4 <__aeabi_ddiv>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4614      	mov	r4, r2
 800334a:	461d      	mov	r5, r3
 800334c:	4b9a      	ldr	r3, [pc, #616]	; (80035b8 <motor_control+0x298>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd f8a5 	bl	80004a0 <__aeabi_f2d>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4620      	mov	r0, r4
 800335c:	4629      	mov	r1, r5
 800335e:	f7fc ff3f 	bl	80001e0 <__aeabi_dsub>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	f7fd fbb3 	bl	8000ad4 <__aeabi_d2f>
 800336e:	4603      	mov	r3, r0
 8003370:	4a92      	ldr	r2, [pc, #584]	; (80035bc <motor_control+0x29c>)
 8003372:	6013      	str	r3, [r2, #0]
//	float drive = VIn * 200; // 1000 * VIn/5    5 volts

	if(Vfeedback >= 20000){
 8003374:	4b92      	ldr	r3, [pc, #584]	; (80035c0 <motor_control+0x2a0>)
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80035c4 <motor_control+0x2a4>
 800337e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003386:	db03      	blt.n	8003390 <motor_control+0x70>
		Vfeedback = 20000;
 8003388:	4b8d      	ldr	r3, [pc, #564]	; (80035c0 <motor_control+0x2a0>)
 800338a:	4a8f      	ldr	r2, [pc, #572]	; (80035c8 <motor_control+0x2a8>)
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e00c      	b.n	80033aa <motor_control+0x8a>
	}

	else if(Vfeedback <= -20000){
 8003390:	4b8b      	ldr	r3, [pc, #556]	; (80035c0 <motor_control+0x2a0>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80035cc <motor_control+0x2ac>
 800339a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a2:	d802      	bhi.n	80033aa <motor_control+0x8a>
		Vfeedback = -20000;
 80033a4:	4b86      	ldr	r3, [pc, #536]	; (80035c0 <motor_control+0x2a0>)
 80033a6:	4a8a      	ldr	r2, [pc, #552]	; (80035d0 <motor_control+0x2b0>)
 80033a8:	601a      	str	r2, [r3, #0]

//	if(setposition - 200 < Vfeedback > setposition + 200){
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
//	}
	if ((error_hap) >= -0.1 && (error_hap) <= 0.1) {
 80033aa:	4b84      	ldr	r3, [pc, #528]	; (80035bc <motor_control+0x29c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd f876 	bl	80004a0 <__aeabi_f2d>
 80033b4:	a378      	add	r3, pc, #480	; (adr r3, 8003598 <motor_control+0x278>)
 80033b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ba:	f7fd fb4f 	bl	8000a5c <__aeabi_dcmpge>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d02f      	beq.n	8003424 <motor_control+0x104>
 80033c4:	4b7d      	ldr	r3, [pc, #500]	; (80035bc <motor_control+0x29c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd f869 	bl	80004a0 <__aeabi_f2d>
 80033ce:	a374      	add	r3, pc, #464	; (adr r3, 80035a0 <motor_control+0x280>)
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f7fd fb38 	bl	8000a48 <__aeabi_dcmple>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d022      	beq.n	8003424 <motor_control+0x104>
//		present_time = 0;
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80033de:	2200      	movs	r2, #0
 80033e0:	2180      	movs	r1, #128	; 0x80
 80033e2:	487c      	ldr	r0, [pc, #496]	; (80035d4 <motor_control+0x2b4>)
 80033e4:	f002 feae 	bl	8006144 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 80033e8:	4b7b      	ldr	r3, [pc, #492]	; (80035d8 <motor_control+0x2b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2200      	movs	r2, #0
 80033ee:	635a      	str	r2, [r3, #52]	; 0x34

		if(timestamp_motor < HAL_GetTick()){
 80033f0:	4b7a      	ldr	r3, [pc, #488]	; (80035dc <motor_control+0x2bc>)
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	461c      	mov	r4, r3
 80033f6:	f001 fba9 	bl	8004b4c <HAL_GetTick>
 80033fa:	4603      	mov	r3, r0
 80033fc:	429c      	cmp	r4, r3
 80033fe:	f080 80c4 	bcs.w	800358a <motor_control+0x26a>
		   timestamp_motor = HAL_GetTick() + 10000;
 8003402:	f001 fba3 	bl	8004b4c <HAL_GetTick>
 8003406:	4603      	mov	r3, r0
 8003408:	b29b      	uxth	r3, r3
 800340a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800340e:	3310      	adds	r3, #16
 8003410:	b29a      	uxth	r2, r3
 8003412:	4b72      	ldr	r3, [pc, #456]	; (80035dc <motor_control+0x2bc>)
 8003414:	801a      	strh	r2, [r3, #0]
		   toggle_trajec = 0;
 8003416:	4b72      	ldr	r3, [pc, #456]	; (80035e0 <motor_control+0x2c0>)
 8003418:	2200      	movs	r2, #0
 800341a:	701a      	strb	r2, [r3, #0]
		   mainstate = checkstate;
 800341c:	4b71      	ldr	r3, [pc, #452]	; (80035e4 <motor_control+0x2c4>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
		if(timestamp_motor < HAL_GetTick()){
 8003422:	e0b2      	b.n	800358a <motor_control+0x26a>
		}

//		in_or_not = 0;
//		point_arrived = 1;
	}
	else if(Vfeedback > 0){
 8003424:	4b66      	ldr	r3, [pc, #408]	; (80035c0 <motor_control+0x2a0>)
 8003426:	edd3 7a00 	vldr	s15, [r3]
 800342a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	dd48      	ble.n	80034c6 <motor_control+0x1a6>

		if(Vfeedback <= 1700 && sampling_time/1000.0 >= time_final * 0.85){
 8003434:	4b62      	ldr	r3, [pc, #392]	; (80035c0 <motor_control+0x2a0>)
 8003436:	edd3 7a00 	vldr	s15, [r3]
 800343a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80035e8 <motor_control+0x2c8>
 800343e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003446:	d82e      	bhi.n	80034a6 <motor_control+0x186>
 8003448:	4b68      	ldr	r3, [pc, #416]	; (80035ec <motor_control+0x2cc>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd f827 	bl	80004a0 <__aeabi_f2d>
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	4b66      	ldr	r3, [pc, #408]	; (80035f0 <motor_control+0x2d0>)
 8003458:	f7fd f9a4 	bl	80007a4 <__aeabi_ddiv>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4614      	mov	r4, r2
 8003462:	461d      	mov	r5, r3
 8003464:	4b63      	ldr	r3, [pc, #396]	; (80035f4 <motor_control+0x2d4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd f819 	bl	80004a0 <__aeabi_f2d>
 800346e:	a34e      	add	r3, pc, #312	; (adr r3, 80035a8 <motor_control+0x288>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f7fd f86c 	bl	8000550 <__aeabi_dmul>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4620      	mov	r0, r4
 800347e:	4629      	mov	r1, r5
 8003480:	f7fd faec 	bl	8000a5c <__aeabi_dcmpge>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <motor_control+0x186>
			debug_1 = 1;
 800348a:	4b5b      	ldr	r3, [pc, #364]	; (80035f8 <motor_control+0x2d8>)
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8003490:	2201      	movs	r2, #1
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	484f      	ldr	r0, [pc, #316]	; (80035d4 <motor_control+0x2b4>)
 8003496:	f002 fe55 	bl	8006144 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 1700); //1830
 800349a:	4b4f      	ldr	r3, [pc, #316]	; (80035d8 <motor_control+0x2b8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34
 80034a4:	e071      	b.n	800358a <motor_control+0x26a>

		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80034a6:	2201      	movs	r2, #1
 80034a8:	2180      	movs	r1, #128	; 0x80
 80034aa:	484a      	ldr	r0, [pc, #296]	; (80035d4 <motor_control+0x2b4>)
 80034ac:	f002 fe4a 	bl	8006144 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, Vfeedback);
 80034b0:	4b43      	ldr	r3, [pc, #268]	; (80035c0 <motor_control+0x2a0>)
 80034b2:	edd3 7a00 	vldr	s15, [r3]
 80034b6:	4b48      	ldr	r3, [pc, #288]	; (80035d8 <motor_control+0x2b8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034be:	ee17 2a90 	vmov	r2, s15
 80034c2:	635a      	str	r2, [r3, #52]	; 0x34

	else if(Vfeedback == 0){
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
	}
}
 80034c4:	e061      	b.n	800358a <motor_control+0x26a>
	else if(Vfeedback < 0){
 80034c6:	4b3e      	ldr	r3, [pc, #248]	; (80035c0 <motor_control+0x2a0>)
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d4:	d547      	bpl.n	8003566 <motor_control+0x246>
		if(-1*Vfeedback <= 1700 && sampling_time/1000.0 >= time_final * 0.85){
 80034d6:	4b3a      	ldr	r3, [pc, #232]	; (80035c0 <motor_control+0x2a0>)
 80034d8:	edd3 7a00 	vldr	s15, [r3]
 80034dc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80035fc <motor_control+0x2dc>
 80034e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e8:	db2b      	blt.n	8003542 <motor_control+0x222>
 80034ea:	4b40      	ldr	r3, [pc, #256]	; (80035ec <motor_control+0x2cc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fc ffd6 	bl	80004a0 <__aeabi_f2d>
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	4b3d      	ldr	r3, [pc, #244]	; (80035f0 <motor_control+0x2d0>)
 80034fa:	f7fd f953 	bl	80007a4 <__aeabi_ddiv>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4614      	mov	r4, r2
 8003504:	461d      	mov	r5, r3
 8003506:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <motor_control+0x2d4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7fc ffc8 	bl	80004a0 <__aeabi_f2d>
 8003510:	a325      	add	r3, pc, #148	; (adr r3, 80035a8 <motor_control+0x288>)
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	f7fd f81b 	bl	8000550 <__aeabi_dmul>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4620      	mov	r0, r4
 8003520:	4629      	mov	r1, r5
 8003522:	f7fd fa9b 	bl	8000a5c <__aeabi_dcmpge>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <motor_control+0x222>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800352c:	2200      	movs	r2, #0
 800352e:	2180      	movs	r1, #128	; 0x80
 8003530:	4828      	ldr	r0, [pc, #160]	; (80035d4 <motor_control+0x2b4>)
 8003532:	f002 fe07 	bl	8006144 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 1700);
 8003536:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <motor_control+0x2b8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800353e:	635a      	str	r2, [r3, #52]	; 0x34
 8003540:	e023      	b.n	800358a <motor_control+0x26a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8003542:	2200      	movs	r2, #0
 8003544:	2180      	movs	r1, #128	; 0x80
 8003546:	4823      	ldr	r0, [pc, #140]	; (80035d4 <motor_control+0x2b4>)
 8003548:	f002 fdfc 	bl	8006144 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, -1*Vfeedback);
 800354c:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <motor_control+0x2a0>)
 800354e:	edd3 7a00 	vldr	s15, [r3]
 8003552:	eef1 7a67 	vneg.f32	s15, s15
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <motor_control+0x2b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800355e:	ee17 2a90 	vmov	r2, s15
 8003562:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003564:	e011      	b.n	800358a <motor_control+0x26a>
	else if(Vfeedback == 0){
 8003566:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <motor_control+0x2a0>)
 8003568:	edd3 7a00 	vldr	s15, [r3]
 800356c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003574:	d109      	bne.n	800358a <motor_control+0x26a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8003576:	2200      	movs	r2, #0
 8003578:	2180      	movs	r1, #128	; 0x80
 800357a:	4816      	ldr	r0, [pc, #88]	; (80035d4 <motor_control+0x2b4>)
 800357c:	f002 fde2 	bl	8006144 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 8003580:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <motor_control+0x2b8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2200      	movs	r2, #0
 8003586:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003588:	e7ff      	b.n	800358a <motor_control+0x26a>
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bdb0      	pop	{r4, r5, r7, pc}
 8003592:	bf00      	nop
 8003594:	f3af 8000 	nop.w
 8003598:	9999999a 	.word	0x9999999a
 800359c:	bfb99999 	.word	0xbfb99999
 80035a0:	9999999a 	.word	0x9999999a
 80035a4:	3fb99999 	.word	0x3fb99999
 80035a8:	33333333 	.word	0x33333333
 80035ac:	3feb3333 	.word	0x3feb3333
 80035b0:	20000bd0 	.word	0x20000bd0
 80035b4:	40240000 	.word	0x40240000
 80035b8:	20000ca0 	.word	0x20000ca0
 80035bc:	20000d1c 	.word	0x20000d1c
 80035c0:	20000d18 	.word	0x20000d18
 80035c4:	469c4000 	.word	0x469c4000
 80035c8:	469c4000 	.word	0x469c4000
 80035cc:	c69c4000 	.word	0xc69c4000
 80035d0:	c69c4000 	.word	0xc69c4000
 80035d4:	40020800 	.word	0x40020800
 80035d8:	200004bc 	.word	0x200004bc
 80035dc:	20000228 	.word	0x20000228
 80035e0:	20000200 	.word	0x20000200
 80035e4:	20000c5c 	.word	0x20000c5c
 80035e8:	44d48000 	.word	0x44d48000
 80035ec:	20000ce0 	.word	0x20000ce0
 80035f0:	408f4000 	.word	0x408f4000
 80035f4:	20000cec 	.word	0x20000cec
 80035f8:	20000d28 	.word	0x20000d28
 80035fc:	c4d48000 	.word	0xc4d48000

08003600 <motor_control_pick_place>:


void motor_control_pick_place(float present_time, float time)
{
 8003600:	b5b0      	push	{r4, r5, r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	ed87 0a01 	vstr	s0, [r7, #4]
 800360a:	edc7 0a00 	vstr	s1, [r7]
	static uint16_t timestamp_motor = 10000;
	error_hap = registerFrame[49].U16/10.0 - position;
 800360e:	4b9c      	ldr	r3, [pc, #624]	; (8003880 <motor_control_pick_place+0x280>)
 8003610:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8003614:	4618      	mov	r0, r3
 8003616:	f7fc ff31 	bl	800047c <__aeabi_i2d>
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	4b99      	ldr	r3, [pc, #612]	; (8003884 <motor_control_pick_place+0x284>)
 8003620:	f7fd f8c0 	bl	80007a4 <__aeabi_ddiv>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4614      	mov	r4, r2
 800362a:	461d      	mov	r5, r3
 800362c:	4b96      	ldr	r3, [pc, #600]	; (8003888 <motor_control_pick_place+0x288>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc ff35 	bl	80004a0 <__aeabi_f2d>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4620      	mov	r0, r4
 800363c:	4629      	mov	r1, r5
 800363e:	f7fc fdcf 	bl	80001e0 <__aeabi_dsub>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	f7fd fa43 	bl	8000ad4 <__aeabi_d2f>
 800364e:	4603      	mov	r3, r0
 8003650:	4a8e      	ldr	r2, [pc, #568]	; (800388c <motor_control_pick_place+0x28c>)
 8003652:	6013      	str	r3, [r2, #0]
//	float drive = VIn * 200; // 1000 * VIn/5    5 volts

	if(Vfeedback >= 20000){
 8003654:	4b8e      	ldr	r3, [pc, #568]	; (8003890 <motor_control_pick_place+0x290>)
 8003656:	edd3 7a00 	vldr	s15, [r3]
 800365a:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003894 <motor_control_pick_place+0x294>
 800365e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003666:	db03      	blt.n	8003670 <motor_control_pick_place+0x70>
		Vfeedback = 20000;
 8003668:	4b89      	ldr	r3, [pc, #548]	; (8003890 <motor_control_pick_place+0x290>)
 800366a:	4a8b      	ldr	r2, [pc, #556]	; (8003898 <motor_control_pick_place+0x298>)
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e00c      	b.n	800368a <motor_control_pick_place+0x8a>
	}

	else if(Vfeedback <= -20000){
 8003670:	4b87      	ldr	r3, [pc, #540]	; (8003890 <motor_control_pick_place+0x290>)
 8003672:	edd3 7a00 	vldr	s15, [r3]
 8003676:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800389c <motor_control_pick_place+0x29c>
 800367a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800367e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003682:	d802      	bhi.n	800368a <motor_control_pick_place+0x8a>
		Vfeedback = -20000;
 8003684:	4b82      	ldr	r3, [pc, #520]	; (8003890 <motor_control_pick_place+0x290>)
 8003686:	4a86      	ldr	r2, [pc, #536]	; (80038a0 <motor_control_pick_place+0x2a0>)
 8003688:	601a      	str	r2, [r3, #0]

//	if(setposition - 200 < Vfeedback > setposition + 200){
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
//	}
	if ((error_hap) >= -0.1 && (error_hap) <= 0.1) {
 800368a:	4b80      	ldr	r3, [pc, #512]	; (800388c <motor_control_pick_place+0x28c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fc ff06 	bl	80004a0 <__aeabi_f2d>
 8003694:	a374      	add	r3, pc, #464	; (adr r3, 8003868 <motor_control_pick_place+0x268>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f7fd f9df 	bl	8000a5c <__aeabi_dcmpge>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d019      	beq.n	80036d8 <motor_control_pick_place+0xd8>
 80036a4:	4b79      	ldr	r3, [pc, #484]	; (800388c <motor_control_pick_place+0x28c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fc fef9 	bl	80004a0 <__aeabi_f2d>
 80036ae:	a370      	add	r3, pc, #448	; (adr r3, 8003870 <motor_control_pick_place+0x270>)
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f7fd f9c8 	bl	8000a48 <__aeabi_dcmple>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00c      	beq.n	80036d8 <motor_control_pick_place+0xd8>
//		present_time = 0;
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80036be:	2200      	movs	r2, #0
 80036c0:	2180      	movs	r1, #128	; 0x80
 80036c2:	4878      	ldr	r0, [pc, #480]	; (80038a4 <motor_control_pick_place+0x2a4>)
 80036c4:	f002 fd3e 	bl	8006144 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 80036c8:	4b77      	ldr	r3, [pc, #476]	; (80038a8 <motor_control_pick_place+0x2a8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2200      	movs	r2, #0
 80036ce:	635a      	str	r2, [r3, #52]	; 0x34

		arrived = 1;
 80036d0:	4b76      	ldr	r3, [pc, #472]	; (80038ac <motor_control_pick_place+0x2ac>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	e0c2      	b.n	800385e <motor_control_pick_place+0x25e>
	}
	else if(Vfeedback > 0){
 80036d8:	4b6d      	ldr	r3, [pc, #436]	; (8003890 <motor_control_pick_place+0x290>)
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e6:	dd50      	ble.n	800378a <motor_control_pick_place+0x18a>

		if(Vfeedback <= 1700 && sampling_time/1000.0 >= time_final * 0.85 && position > 0){
 80036e8:	4b69      	ldr	r3, [pc, #420]	; (8003890 <motor_control_pick_place+0x290>)
 80036ea:	edd3 7a00 	vldr	s15, [r3]
 80036ee:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80038b0 <motor_control_pick_place+0x2b0>
 80036f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fa:	d836      	bhi.n	800376a <motor_control_pick_place+0x16a>
 80036fc:	4b6d      	ldr	r3, [pc, #436]	; (80038b4 <motor_control_pick_place+0x2b4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7fc fecd 	bl	80004a0 <__aeabi_f2d>
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	4b6b      	ldr	r3, [pc, #428]	; (80038b8 <motor_control_pick_place+0x2b8>)
 800370c:	f7fd f84a 	bl	80007a4 <__aeabi_ddiv>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4614      	mov	r4, r2
 8003716:	461d      	mov	r5, r3
 8003718:	4b68      	ldr	r3, [pc, #416]	; (80038bc <motor_control_pick_place+0x2bc>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fc febf 	bl	80004a0 <__aeabi_f2d>
 8003722:	a355      	add	r3, pc, #340	; (adr r3, 8003878 <motor_control_pick_place+0x278>)
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f7fc ff12 	bl	8000550 <__aeabi_dmul>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4620      	mov	r0, r4
 8003732:	4629      	mov	r1, r5
 8003734:	f7fd f992 	bl	8000a5c <__aeabi_dcmpge>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d015      	beq.n	800376a <motor_control_pick_place+0x16a>
 800373e:	4b52      	ldr	r3, [pc, #328]	; (8003888 <motor_control_pick_place+0x288>)
 8003740:	edd3 7a00 	vldr	s15, [r3]
 8003744:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374c:	dd0d      	ble.n	800376a <motor_control_pick_place+0x16a>
			debug_1 = 1;
 800374e:	4b5c      	ldr	r3, [pc, #368]	; (80038c0 <motor_control_pick_place+0x2c0>)
 8003750:	2201      	movs	r2, #1
 8003752:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8003754:	2201      	movs	r2, #1
 8003756:	2180      	movs	r1, #128	; 0x80
 8003758:	4852      	ldr	r0, [pc, #328]	; (80038a4 <motor_control_pick_place+0x2a4>)
 800375a:	f002 fcf3 	bl	8006144 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 1700); //1830
 800375e:	4b52      	ldr	r3, [pc, #328]	; (80038a8 <motor_control_pick_place+0x2a8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8003766:	635a      	str	r2, [r3, #52]	; 0x34
 8003768:	e079      	b.n	800385e <motor_control_pick_place+0x25e>

		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800376a:	2201      	movs	r2, #1
 800376c:	2180      	movs	r1, #128	; 0x80
 800376e:	484d      	ldr	r0, [pc, #308]	; (80038a4 <motor_control_pick_place+0x2a4>)
 8003770:	f002 fce8 	bl	8006144 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, Vfeedback);
 8003774:	4b46      	ldr	r3, [pc, #280]	; (8003890 <motor_control_pick_place+0x290>)
 8003776:	edd3 7a00 	vldr	s15, [r3]
 800377a:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <motor_control_pick_place+0x2a8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003782:	ee17 2a90 	vmov	r2, s15
 8003786:	635a      	str	r2, [r3, #52]	; 0x34

	else if(Vfeedback == 0){
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
	}
}
 8003788:	e069      	b.n	800385e <motor_control_pick_place+0x25e>
	else if(Vfeedback < 0){
 800378a:	4b41      	ldr	r3, [pc, #260]	; (8003890 <motor_control_pick_place+0x290>)
 800378c:	edd3 7a00 	vldr	s15, [r3]
 8003790:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	d54f      	bpl.n	800383a <motor_control_pick_place+0x23a>
		if(-1*Vfeedback <= 1700 && sampling_time/1000.0 >= time_final * 0.85 && position < 0){
 800379a:	4b3d      	ldr	r3, [pc, #244]	; (8003890 <motor_control_pick_place+0x290>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80038c4 <motor_control_pick_place+0x2c4>
 80037a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ac:	db33      	blt.n	8003816 <motor_control_pick_place+0x216>
 80037ae:	4b41      	ldr	r3, [pc, #260]	; (80038b4 <motor_control_pick_place+0x2b4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fc fe74 	bl	80004a0 <__aeabi_f2d>
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	4b3e      	ldr	r3, [pc, #248]	; (80038b8 <motor_control_pick_place+0x2b8>)
 80037be:	f7fc fff1 	bl	80007a4 <__aeabi_ddiv>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4614      	mov	r4, r2
 80037c8:	461d      	mov	r5, r3
 80037ca:	4b3c      	ldr	r3, [pc, #240]	; (80038bc <motor_control_pick_place+0x2bc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fc fe66 	bl	80004a0 <__aeabi_f2d>
 80037d4:	a328      	add	r3, pc, #160	; (adr r3, 8003878 <motor_control_pick_place+0x278>)
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	f7fc feb9 	bl	8000550 <__aeabi_dmul>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4620      	mov	r0, r4
 80037e4:	4629      	mov	r1, r5
 80037e6:	f7fd f939 	bl	8000a5c <__aeabi_dcmpge>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d012      	beq.n	8003816 <motor_control_pick_place+0x216>
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <motor_control_pick_place+0x288>)
 80037f2:	edd3 7a00 	vldr	s15, [r3]
 80037f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fe:	d50a      	bpl.n	8003816 <motor_control_pick_place+0x216>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8003800:	2200      	movs	r2, #0
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	4827      	ldr	r0, [pc, #156]	; (80038a4 <motor_control_pick_place+0x2a4>)
 8003806:	f002 fc9d 	bl	8006144 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 1700);
 800380a:	4b27      	ldr	r3, [pc, #156]	; (80038a8 <motor_control_pick_place+0x2a8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8003812:	635a      	str	r2, [r3, #52]	; 0x34
 8003814:	e023      	b.n	800385e <motor_control_pick_place+0x25e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8003816:	2200      	movs	r2, #0
 8003818:	2180      	movs	r1, #128	; 0x80
 800381a:	4822      	ldr	r0, [pc, #136]	; (80038a4 <motor_control_pick_place+0x2a4>)
 800381c:	f002 fc92 	bl	8006144 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, -1*Vfeedback);
 8003820:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <motor_control_pick_place+0x290>)
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	eef1 7a67 	vneg.f32	s15, s15
 800382a:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <motor_control_pick_place+0x2a8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003832:	ee17 2a90 	vmov	r2, s15
 8003836:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003838:	e011      	b.n	800385e <motor_control_pick_place+0x25e>
	else if(Vfeedback == 0){
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <motor_control_pick_place+0x290>)
 800383c:	edd3 7a00 	vldr	s15, [r3]
 8003840:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003848:	d109      	bne.n	800385e <motor_control_pick_place+0x25e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800384a:	2200      	movs	r2, #0
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	4815      	ldr	r0, [pc, #84]	; (80038a4 <motor_control_pick_place+0x2a4>)
 8003850:	f002 fc78 	bl	8006144 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <motor_control_pick_place+0x2a8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2200      	movs	r2, #0
 800385a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800385c:	e7ff      	b.n	800385e <motor_control_pick_place+0x25e>
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bdb0      	pop	{r4, r5, r7, pc}
 8003866:	bf00      	nop
 8003868:	9999999a 	.word	0x9999999a
 800386c:	bfb99999 	.word	0xbfb99999
 8003870:	9999999a 	.word	0x9999999a
 8003874:	3fb99999 	.word	0x3fb99999
 8003878:	33333333 	.word	0x33333333
 800387c:	3feb3333 	.word	0x3feb3333
 8003880:	20000bd0 	.word	0x20000bd0
 8003884:	40240000 	.word	0x40240000
 8003888:	20000ca0 	.word	0x20000ca0
 800388c:	20000d1c 	.word	0x20000d1c
 8003890:	20000d18 	.word	0x20000d18
 8003894:	469c4000 	.word	0x469c4000
 8003898:	469c4000 	.word	0x469c4000
 800389c:	c69c4000 	.word	0xc69c4000
 80038a0:	c69c4000 	.word	0xc69c4000
 80038a4:	40020800 	.word	0x40020800
 80038a8:	200004bc 	.word	0x200004bc
 80038ac:	20000201 	.word	0x20000201
 80038b0:	44d48000 	.word	0x44d48000
 80038b4:	20000ce0 	.word	0x20000ce0
 80038b8:	408f4000 	.word	0x408f4000
 80038bc:	20000cec 	.word	0x20000cec
 80038c0:	20000d28 	.word	0x20000d28
 80038c4:	c4d48000 	.word	0xc4d48000

080038c8 <find_diagonal_X>:
uint8_t find_diagonal_X(){
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0

	if(!(pick_point.X_point[0] - pick_point.X_point[1] >= -5 && pick_point.X_point[0] - pick_point.X_point[1] <= 5) && !(pick_point.Y_point[0] - pick_point.Y_point[1] >= -5 && pick_point.Y_point[0] - pick_point.Y_point[1] <= 5)){
 80038cc:	4b8f      	ldr	r3, [pc, #572]	; (8003b0c <find_diagonal_X+0x244>)
 80038ce:	ed93 7a00 	vldr	s14, [r3]
 80038d2:	4b8e      	ldr	r3, [pc, #568]	; (8003b0c <find_diagonal_X+0x244>)
 80038d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80038d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038dc:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80038e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e8:	bfac      	ite	ge
 80038ea:	2301      	movge	r3, #1
 80038ec:	2300      	movlt	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f083 0301 	eor.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d116      	bne.n	8003928 <find_diagonal_X+0x60>
 80038fa:	4b84      	ldr	r3, [pc, #528]	; (8003b0c <find_diagonal_X+0x244>)
 80038fc:	ed93 7a00 	vldr	s14, [r3]
 8003900:	4b82      	ldr	r3, [pc, #520]	; (8003b0c <find_diagonal_X+0x244>)
 8003902:	edd3 7a01 	vldr	s15, [r3, #4]
 8003906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800390a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800390e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003916:	bf94      	ite	ls
 8003918:	2301      	movls	r3, #1
 800391a:	2300      	movhi	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f083 0301 	eor.w	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d02f      	beq.n	8003988 <find_diagonal_X+0xc0>
 8003928:	4b78      	ldr	r3, [pc, #480]	; (8003b0c <find_diagonal_X+0x244>)
 800392a:	ed93 7a03 	vldr	s14, [r3, #12]
 800392e:	4b77      	ldr	r3, [pc, #476]	; (8003b0c <find_diagonal_X+0x244>)
 8003930:	edd3 7a04 	vldr	s15, [r3, #16]
 8003934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003938:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800393c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003944:	bfac      	ite	ge
 8003946:	2301      	movge	r3, #1
 8003948:	2300      	movlt	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f083 0301 	eor.w	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d116      	bne.n	8003984 <find_diagonal_X+0xbc>
 8003956:	4b6d      	ldr	r3, [pc, #436]	; (8003b0c <find_diagonal_X+0x244>)
 8003958:	ed93 7a03 	vldr	s14, [r3, #12]
 800395c:	4b6b      	ldr	r3, [pc, #428]	; (8003b0c <find_diagonal_X+0x244>)
 800395e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003966:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800396a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800396e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003972:	bf94      	ite	ls
 8003974:	2301      	movls	r3, #1
 8003976:	2300      	movhi	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f083 0301 	eor.w	r3, r3, #1
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <find_diagonal_X+0xc0>
		return 1;
 8003984:	2301      	movs	r3, #1
 8003986:	e0bc      	b.n	8003b02 <find_diagonal_X+0x23a>
	}
	else if(!(pick_point.X_point[1] - pick_point.X_point[2] >= -5 && pick_point.X_point[1] - pick_point.X_point[2] <= 5) && !(pick_point.Y_point[1] - pick_point.Y_point[2] >= -5 && pick_point.Y_point[1] - pick_point.Y_point[2] <= 5)){
 8003988:	4b60      	ldr	r3, [pc, #384]	; (8003b0c <find_diagonal_X+0x244>)
 800398a:	ed93 7a01 	vldr	s14, [r3, #4]
 800398e:	4b5f      	ldr	r3, [pc, #380]	; (8003b0c <find_diagonal_X+0x244>)
 8003990:	edd3 7a02 	vldr	s15, [r3, #8]
 8003994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003998:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800399c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a4:	bfac      	ite	ge
 80039a6:	2301      	movge	r3, #1
 80039a8:	2300      	movlt	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f083 0301 	eor.w	r3, r3, #1
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d116      	bne.n	80039e4 <find_diagonal_X+0x11c>
 80039b6:	4b55      	ldr	r3, [pc, #340]	; (8003b0c <find_diagonal_X+0x244>)
 80039b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80039bc:	4b53      	ldr	r3, [pc, #332]	; (8003b0c <find_diagonal_X+0x244>)
 80039be:	edd3 7a02 	vldr	s15, [r3, #8]
 80039c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039c6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80039ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d2:	bf94      	ite	ls
 80039d4:	2301      	movls	r3, #1
 80039d6:	2300      	movhi	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f083 0301 	eor.w	r3, r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d02f      	beq.n	8003a44 <find_diagonal_X+0x17c>
 80039e4:	4b49      	ldr	r3, [pc, #292]	; (8003b0c <find_diagonal_X+0x244>)
 80039e6:	ed93 7a04 	vldr	s14, [r3, #16]
 80039ea:	4b48      	ldr	r3, [pc, #288]	; (8003b0c <find_diagonal_X+0x244>)
 80039ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80039f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f4:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80039f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a00:	bfac      	ite	ge
 8003a02:	2301      	movge	r3, #1
 8003a04:	2300      	movlt	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f083 0301 	eor.w	r3, r3, #1
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d116      	bne.n	8003a40 <find_diagonal_X+0x178>
 8003a12:	4b3e      	ldr	r3, [pc, #248]	; (8003b0c <find_diagonal_X+0x244>)
 8003a14:	ed93 7a04 	vldr	s14, [r3, #16]
 8003a18:	4b3c      	ldr	r3, [pc, #240]	; (8003b0c <find_diagonal_X+0x244>)
 8003a1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a22:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2e:	bf94      	ite	ls
 8003a30:	2301      	movls	r3, #1
 8003a32:	2300      	movhi	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f083 0301 	eor.w	r3, r3, #1
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <find_diagonal_X+0x17c>
		return 3;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e05e      	b.n	8003b02 <find_diagonal_X+0x23a>
	}
	else if(!(pick_point.X_point[0] - pick_point.X_point[2] >= -5 && pick_point.X_point[0] - pick_point.X_point[2] <= 5) && !(pick_point.Y_point[0] - pick_point.Y_point[2] >= -5 && pick_point.Y_point[0] - pick_point.Y_point[2] <= 5)){
 8003a44:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <find_diagonal_X+0x244>)
 8003a46:	ed93 7a00 	vldr	s14, [r3]
 8003a4a:	4b30      	ldr	r3, [pc, #192]	; (8003b0c <find_diagonal_X+0x244>)
 8003a4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a54:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8003a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a60:	bfac      	ite	ge
 8003a62:	2301      	movge	r3, #1
 8003a64:	2300      	movlt	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f083 0301 	eor.w	r3, r3, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d116      	bne.n	8003aa0 <find_diagonal_X+0x1d8>
 8003a72:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <find_diagonal_X+0x244>)
 8003a74:	ed93 7a00 	vldr	s14, [r3]
 8003a78:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <find_diagonal_X+0x244>)
 8003a7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a82:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8e:	bf94      	ite	ls
 8003a90:	2301      	movls	r3, #1
 8003a92:	2300      	movhi	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f083 0301 	eor.w	r3, r3, #1
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d02f      	beq.n	8003b00 <find_diagonal_X+0x238>
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <find_diagonal_X+0x244>)
 8003aa2:	ed93 7a03 	vldr	s14, [r3, #12]
 8003aa6:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <find_diagonal_X+0x244>)
 8003aa8:	edd3 7a05 	vldr	s15, [r3, #20]
 8003aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ab0:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8003ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abc:	bfac      	ite	ge
 8003abe:	2301      	movge	r3, #1
 8003ac0:	2300      	movlt	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f083 0301 	eor.w	r3, r3, #1
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d116      	bne.n	8003afc <find_diagonal_X+0x234>
 8003ace:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <find_diagonal_X+0x244>)
 8003ad0:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ad4:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <find_diagonal_X+0x244>)
 8003ad6:	edd3 7a05 	vldr	s15, [r3, #20]
 8003ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ade:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aea:	bf94      	ite	ls
 8003aec:	2301      	movls	r3, #1
 8003aee:	2300      	movhi	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f083 0301 	eor.w	r3, r3, #1
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <find_diagonal_X+0x238>
		return 2;
 8003afc:	2302      	movs	r3, #2
 8003afe:	e000      	b.n	8003b02 <find_diagonal_X+0x23a>
	}else{
		return 0;
 8003b00:	2300      	movs	r3, #0
	}
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	20000c6c 	.word	0x20000c6c

08003b10 <calculate>:
	}


}

void calculate(){
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
	static float height,width;
	if(find_diagonal_X() == 1){
 8003b14:	f7ff fed8 	bl	80038c8 <find_diagonal_X>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d164      	bne.n	8003be8 <calculate+0xd8>

		height = pick_point.X_point[0] - pick_point.X_point[1];
 8003b1e:	4b9d      	ldr	r3, [pc, #628]	; (8003d94 <calculate+0x284>)
 8003b20:	ed93 7a00 	vldr	s14, [r3]
 8003b24:	4b9b      	ldr	r3, [pc, #620]	; (8003d94 <calculate+0x284>)
 8003b26:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b2e:	4b9a      	ldr	r3, [pc, #616]	; (8003d98 <calculate+0x288>)
 8003b30:	edc3 7a00 	vstr	s15, [r3]
		width = pick_point.Y_point[0] - pick_point.Y_point[1];
 8003b34:	4b97      	ldr	r3, [pc, #604]	; (8003d94 <calculate+0x284>)
 8003b36:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b3a:	4b96      	ldr	r3, [pc, #600]	; (8003d94 <calculate+0x284>)
 8003b3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b44:	4b95      	ldr	r3, [pc, #596]	; (8003d9c <calculate+0x28c>)
 8003b46:	edc3 7a00 	vstr	s15, [r3]

		if(height > width){
 8003b4a:	4b93      	ldr	r3, [pc, #588]	; (8003d98 <calculate+0x288>)
 8003b4c:	ed93 7a00 	vldr	s14, [r3]
 8003b50:	4b92      	ldr	r3, [pc, #584]	; (8003d9c <calculate+0x28c>)
 8003b52:	edd3 7a00 	vldr	s15, [r3]
 8003b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5e:	dd1b      	ble.n	8003b98 <calculate+0x88>
			degree_triangle = atan(height/width);
 8003b60:	4b8d      	ldr	r3, [pc, #564]	; (8003d98 <calculate+0x288>)
 8003b62:	ed93 7a00 	vldr	s14, [r3]
 8003b66:	4b8d      	ldr	r3, [pc, #564]	; (8003d9c <calculate+0x28c>)
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b70:	ee16 0a90 	vmov	r0, s13
 8003b74:	f7fc fc94 	bl	80004a0 <__aeabi_f2d>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	ec43 2b10 	vmov	d0, r2, r3
 8003b80:	f007 fece 	bl	800b920 <atan>
 8003b84:	ec53 2b10 	vmov	r2, r3, d0
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f7fc ffa2 	bl	8000ad4 <__aeabi_d2f>
 8003b90:	4603      	mov	r3, r0
 8003b92:	4a83      	ldr	r2, [pc, #524]	; (8003da0 <calculate+0x290>)
 8003b94:	6013      	str	r3, [r2, #0]

	}



}
 8003b96:	e0fa      	b.n	8003d8e <calculate+0x27e>
		}else if(width < height){
 8003b98:	4b80      	ldr	r3, [pc, #512]	; (8003d9c <calculate+0x28c>)
 8003b9a:	ed93 7a00 	vldr	s14, [r3]
 8003b9e:	4b7e      	ldr	r3, [pc, #504]	; (8003d98 <calculate+0x288>)
 8003ba0:	edd3 7a00 	vldr	s15, [r3]
 8003ba4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bac:	d400      	bmi.n	8003bb0 <calculate+0xa0>
}
 8003bae:	e0ee      	b.n	8003d8e <calculate+0x27e>
			degree_triangle = atan(width/height);
 8003bb0:	4b7a      	ldr	r3, [pc, #488]	; (8003d9c <calculate+0x28c>)
 8003bb2:	ed93 7a00 	vldr	s14, [r3]
 8003bb6:	4b78      	ldr	r3, [pc, #480]	; (8003d98 <calculate+0x288>)
 8003bb8:	edd3 7a00 	vldr	s15, [r3]
 8003bbc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bc0:	ee16 0a90 	vmov	r0, s13
 8003bc4:	f7fc fc6c 	bl	80004a0 <__aeabi_f2d>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	ec43 2b10 	vmov	d0, r2, r3
 8003bd0:	f007 fea6 	bl	800b920 <atan>
 8003bd4:	ec53 2b10 	vmov	r2, r3, d0
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f7fc ff7a 	bl	8000ad4 <__aeabi_d2f>
 8003be0:	4603      	mov	r3, r0
 8003be2:	4a6f      	ldr	r2, [pc, #444]	; (8003da0 <calculate+0x290>)
 8003be4:	6013      	str	r3, [r2, #0]
}
 8003be6:	e0d2      	b.n	8003d8e <calculate+0x27e>
	}else if(find_diagonal_X() == 2){
 8003be8:	f7ff fe6e 	bl	80038c8 <find_diagonal_X>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d164      	bne.n	8003cbc <calculate+0x1ac>
		height = pick_point.X_point[1] - pick_point.X_point[2];
 8003bf2:	4b68      	ldr	r3, [pc, #416]	; (8003d94 <calculate+0x284>)
 8003bf4:	ed93 7a01 	vldr	s14, [r3, #4]
 8003bf8:	4b66      	ldr	r3, [pc, #408]	; (8003d94 <calculate+0x284>)
 8003bfa:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c02:	4b65      	ldr	r3, [pc, #404]	; (8003d98 <calculate+0x288>)
 8003c04:	edc3 7a00 	vstr	s15, [r3]
		width = pick_point.Y_point[1] - pick_point.Y_point[2];
 8003c08:	4b62      	ldr	r3, [pc, #392]	; (8003d94 <calculate+0x284>)
 8003c0a:	ed93 7a04 	vldr	s14, [r3, #16]
 8003c0e:	4b61      	ldr	r3, [pc, #388]	; (8003d94 <calculate+0x284>)
 8003c10:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c18:	4b60      	ldr	r3, [pc, #384]	; (8003d9c <calculate+0x28c>)
 8003c1a:	edc3 7a00 	vstr	s15, [r3]
		if(height > width){
 8003c1e:	4b5e      	ldr	r3, [pc, #376]	; (8003d98 <calculate+0x288>)
 8003c20:	ed93 7a00 	vldr	s14, [r3]
 8003c24:	4b5d      	ldr	r3, [pc, #372]	; (8003d9c <calculate+0x28c>)
 8003c26:	edd3 7a00 	vldr	s15, [r3]
 8003c2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c32:	dd1b      	ble.n	8003c6c <calculate+0x15c>
			degree_triangle = atan(height/width);
 8003c34:	4b58      	ldr	r3, [pc, #352]	; (8003d98 <calculate+0x288>)
 8003c36:	ed93 7a00 	vldr	s14, [r3]
 8003c3a:	4b58      	ldr	r3, [pc, #352]	; (8003d9c <calculate+0x28c>)
 8003c3c:	edd3 7a00 	vldr	s15, [r3]
 8003c40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c44:	ee16 0a90 	vmov	r0, s13
 8003c48:	f7fc fc2a 	bl	80004a0 <__aeabi_f2d>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	ec43 2b10 	vmov	d0, r2, r3
 8003c54:	f007 fe64 	bl	800b920 <atan>
 8003c58:	ec53 2b10 	vmov	r2, r3, d0
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f7fc ff38 	bl	8000ad4 <__aeabi_d2f>
 8003c64:	4603      	mov	r3, r0
 8003c66:	4a4e      	ldr	r2, [pc, #312]	; (8003da0 <calculate+0x290>)
 8003c68:	6013      	str	r3, [r2, #0]
}
 8003c6a:	e090      	b.n	8003d8e <calculate+0x27e>
		}else if(width < height){
 8003c6c:	4b4b      	ldr	r3, [pc, #300]	; (8003d9c <calculate+0x28c>)
 8003c6e:	ed93 7a00 	vldr	s14, [r3]
 8003c72:	4b49      	ldr	r3, [pc, #292]	; (8003d98 <calculate+0x288>)
 8003c74:	edd3 7a00 	vldr	s15, [r3]
 8003c78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c80:	d400      	bmi.n	8003c84 <calculate+0x174>
}
 8003c82:	e084      	b.n	8003d8e <calculate+0x27e>
			degree_triangle = atan(width/height);
 8003c84:	4b45      	ldr	r3, [pc, #276]	; (8003d9c <calculate+0x28c>)
 8003c86:	ed93 7a00 	vldr	s14, [r3]
 8003c8a:	4b43      	ldr	r3, [pc, #268]	; (8003d98 <calculate+0x288>)
 8003c8c:	edd3 7a00 	vldr	s15, [r3]
 8003c90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c94:	ee16 0a90 	vmov	r0, s13
 8003c98:	f7fc fc02 	bl	80004a0 <__aeabi_f2d>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	ec43 2b10 	vmov	d0, r2, r3
 8003ca4:	f007 fe3c 	bl	800b920 <atan>
 8003ca8:	ec53 2b10 	vmov	r2, r3, d0
 8003cac:	4610      	mov	r0, r2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	f7fc ff10 	bl	8000ad4 <__aeabi_d2f>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	4a3a      	ldr	r2, [pc, #232]	; (8003da0 <calculate+0x290>)
 8003cb8:	6013      	str	r3, [r2, #0]
}
 8003cba:	e068      	b.n	8003d8e <calculate+0x27e>
	}else if(find_diagonal_X() == 3){
 8003cbc:	f7ff fe04 	bl	80038c8 <find_diagonal_X>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d163      	bne.n	8003d8e <calculate+0x27e>
		height = pick_point.X_point[0] - pick_point.X_point[2];
 8003cc6:	4b33      	ldr	r3, [pc, #204]	; (8003d94 <calculate+0x284>)
 8003cc8:	ed93 7a00 	vldr	s14, [r3]
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <calculate+0x284>)
 8003cce:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cd6:	4b30      	ldr	r3, [pc, #192]	; (8003d98 <calculate+0x288>)
 8003cd8:	edc3 7a00 	vstr	s15, [r3]
		width = pick_point.Y_point[0] - pick_point.Y_point[2];
 8003cdc:	4b2d      	ldr	r3, [pc, #180]	; (8003d94 <calculate+0x284>)
 8003cde:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ce2:	4b2c      	ldr	r3, [pc, #176]	; (8003d94 <calculate+0x284>)
 8003ce4:	edd3 7a05 	vldr	s15, [r3, #20]
 8003ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cec:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <calculate+0x28c>)
 8003cee:	edc3 7a00 	vstr	s15, [r3]
		if(height > width){
 8003cf2:	4b29      	ldr	r3, [pc, #164]	; (8003d98 <calculate+0x288>)
 8003cf4:	ed93 7a00 	vldr	s14, [r3]
 8003cf8:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <calculate+0x28c>)
 8003cfa:	edd3 7a00 	vldr	s15, [r3]
 8003cfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d06:	dd1b      	ble.n	8003d40 <calculate+0x230>
			degree_triangle = atan(height/width);
 8003d08:	4b23      	ldr	r3, [pc, #140]	; (8003d98 <calculate+0x288>)
 8003d0a:	ed93 7a00 	vldr	s14, [r3]
 8003d0e:	4b23      	ldr	r3, [pc, #140]	; (8003d9c <calculate+0x28c>)
 8003d10:	edd3 7a00 	vldr	s15, [r3]
 8003d14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d18:	ee16 0a90 	vmov	r0, s13
 8003d1c:	f7fc fbc0 	bl	80004a0 <__aeabi_f2d>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	ec43 2b10 	vmov	d0, r2, r3
 8003d28:	f007 fdfa 	bl	800b920 <atan>
 8003d2c:	ec53 2b10 	vmov	r2, r3, d0
 8003d30:	4610      	mov	r0, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	f7fc fece 	bl	8000ad4 <__aeabi_d2f>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	4a19      	ldr	r2, [pc, #100]	; (8003da0 <calculate+0x290>)
 8003d3c:	6013      	str	r3, [r2, #0]
}
 8003d3e:	e026      	b.n	8003d8e <calculate+0x27e>
		}else if(width < height){
 8003d40:	4b16      	ldr	r3, [pc, #88]	; (8003d9c <calculate+0x28c>)
 8003d42:	ed93 7a00 	vldr	s14, [r3]
 8003d46:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <calculate+0x288>)
 8003d48:	edd3 7a00 	vldr	s15, [r3]
 8003d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d54:	d400      	bmi.n	8003d58 <calculate+0x248>
}
 8003d56:	e01a      	b.n	8003d8e <calculate+0x27e>
			degree_triangle = atan(width/height);
 8003d58:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <calculate+0x28c>)
 8003d5a:	ed93 7a00 	vldr	s14, [r3]
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <calculate+0x288>)
 8003d60:	edd3 7a00 	vldr	s15, [r3]
 8003d64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d68:	ee16 0a90 	vmov	r0, s13
 8003d6c:	f7fc fb98 	bl	80004a0 <__aeabi_f2d>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	ec43 2b10 	vmov	d0, r2, r3
 8003d78:	f007 fdd2 	bl	800b920 <atan>
 8003d7c:	ec53 2b10 	vmov	r2, r3, d0
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	f7fc fea6 	bl	8000ad4 <__aeabi_d2f>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	4a05      	ldr	r2, [pc, #20]	; (8003da0 <calculate+0x290>)
 8003d8c:	6013      	str	r3, [r2, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000c6c 	.word	0x20000c6c
 8003d98:	20000d90 	.word	0x20000d90
 8003d9c:	20000d94 	.word	0x20000d94
 8003da0:	20000d20 	.word	0x20000d20

08003da4 <home_setpoint>:



void home_setpoint(){
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
	debug_1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8003da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dac:	483d      	ldr	r0, [pc, #244]	; (8003ea4 <home_setpoint+0x100>)
 8003dae:	f002 f9b1 	bl	8006114 <HAL_GPIO_ReadPin>
 8003db2:	4603      	mov	r3, r0
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b3c      	ldr	r3, [pc, #240]	; (8003ea8 <home_setpoint+0x104>)
 8003db8:	701a      	strb	r2, [r3, #0]
	debug_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8003dba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dbe:	4839      	ldr	r0, [pc, #228]	; (8003ea4 <home_setpoint+0x100>)
 8003dc0:	f002 f9a8 	bl	8006114 <HAL_GPIO_ReadPin>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	4b38      	ldr	r3, [pc, #224]	; (8003eac <home_setpoint+0x108>)
 8003dca:	801a      	strh	r2, [r3, #0]
	if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8003dcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dd0:	4834      	ldr	r0, [pc, #208]	; (8003ea4 <home_setpoint+0x100>)
 8003dd2:	f002 f99f 	bl	8006114 <HAL_GPIO_ReadPin>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d128      	bne.n	8003e2e <home_setpoint+0x8a>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 8003ddc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003de0:	4830      	ldr	r0, [pc, #192]	; (8003ea4 <home_setpoint+0x100>)
 8003de2:	f002 f997 	bl	8006114 <HAL_GPIO_ReadPin>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <home_setpoint+0x4e>
			flip_position = 1;
 8003dec:	4b30      	ldr	r3, [pc, #192]	; (8003eb0 <home_setpoint+0x10c>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	701a      	strb	r2, [r3, #0]
		}
		if(flip_position){
 8003df2:	4b2f      	ldr	r3, [pc, #188]	; (8003eb0 <home_setpoint+0x10c>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <home_setpoint+0x6c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2180      	movs	r1, #128	; 0x80
 8003dfe:	482d      	ldr	r0, [pc, #180]	; (8003eb4 <home_setpoint+0x110>)
 8003e00:	f002 f9a0 	bl	8006144 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 2000);
 8003e04:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <home_setpoint+0x114>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34
		flip_position = 0;
		registerFrame[16].U16 = 0;
		registerFrame[1].U16 = 0;
		mainstate = checkstate;
	}
}
 8003e0e:	e047      	b.n	8003ea0 <home_setpoint+0xfc>
		}else if(!flip_position){
 8003e10:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <home_setpoint+0x10c>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d143      	bne.n	8003ea0 <home_setpoint+0xfc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8003e18:	2201      	movs	r2, #1
 8003e1a:	2180      	movs	r1, #128	; 0x80
 8003e1c:	4825      	ldr	r0, [pc, #148]	; (8003eb4 <home_setpoint+0x110>)
 8003e1e:	f002 f991 	bl	8006144 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 2000);
 8003e22:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <home_setpoint+0x114>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e2a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003e2c:	e038      	b.n	8003ea0 <home_setpoint+0xfc>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2180      	movs	r1, #128	; 0x80
 8003e32:	4820      	ldr	r0, [pc, #128]	; (8003eb4 <home_setpoint+0x110>)
 8003e34:	f002 f986 	bl	8006144 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 8003e38:	4b1f      	ldr	r3, [pc, #124]	; (8003eb8 <home_setpoint+0x114>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003e40:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <home_setpoint+0x118>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2200      	movs	r2, #0
 8003e46:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003e48:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <home_setpoint+0x118>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003e50:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <home_setpoint+0x118>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2200      	movs	r2, #0
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003e58:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <home_setpoint+0x118>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003e60:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <home_setpoint+0x118>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2200      	movs	r2, #0
 8003e66:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003e68:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <home_setpoint+0x118>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003e70:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <home_setpoint+0x118>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2200      	movs	r2, #0
 8003e76:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003e78:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <home_setpoint+0x118>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003e80:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <home_setpoint+0x118>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2200      	movs	r2, #0
 8003e86:	625a      	str	r2, [r3, #36]	; 0x24
		flip_position = 0;
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <home_setpoint+0x10c>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]
		registerFrame[16].U16 = 0;
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <home_setpoint+0x11c>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	841a      	strh	r2, [r3, #32]
		registerFrame[1].U16 = 0;
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <home_setpoint+0x11c>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	805a      	strh	r2, [r3, #2]
		mainstate = checkstate;
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <home_setpoint+0x120>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40020000 	.word	0x40020000
 8003ea8:	20000d28 	.word	0x20000d28
 8003eac:	20000d2a 	.word	0x20000d2a
 8003eb0:	20000d3c 	.word	0x20000d3c
 8003eb4:	40020800 	.word	0x40020800
 8003eb8:	200004bc 	.word	0x200004bc
 8003ebc:	20000354 	.word	0x20000354
 8003ec0:	20000bd0 	.word	0x20000bd0
 8003ec4:	20000c5c 	.word	0x20000c5c

08003ec8 <MainStateMechine>:


void MainStateMechine()
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
	static uint8_t hold_status = 0;
	static uint32_t timestamp = 0;
	static uint8_t in_out = 0;
	static uint8_t array_place = 0;

		if(HAL_GetTick() >= timestamp)
 8003ecc:	f000 fe3e 	bl	8004b4c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4b93      	ldr	r3, [pc, #588]	; (8004120 <MainStateMechine+0x258>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	f0c0 811b 	bcc.w	8004112 <MainStateMechine+0x24a>
		{
			timestamp = HAL_GetTick() + 1;
 8003edc:	f000 fe36 	bl	8004b4c <HAL_GetTick>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	4a8e      	ldr	r2, [pc, #568]	; (8004120 <MainStateMechine+0x258>)
 8003ee6:	6013      	str	r3, [r2, #0]
			switch (mainstate)
 8003ee8:	4b8e      	ldr	r3, [pc, #568]	; (8004124 <MainStateMechine+0x25c>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	f200 8115 	bhi.w	800411c <MainStateMechine+0x254>
 8003ef2:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <MainStateMechine+0x30>)
 8003ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef8:	08003f0d 	.word	0x08003f0d
 8003efc:	08003f8d 	.word	0x08003f8d
 8003f00:	08004055 	.word	0x08004055
 8003f04:	0800407d 	.word	0x0800407d
 8003f08:	080040c1 	.word	0x080040c1
			{
				case checkstate: //base system status
					if(registerFrame[1].U16 == 1) // set pick tray
 8003f0c:	4b86      	ldr	r3, [pc, #536]	; (8004128 <MainStateMechine+0x260>)
 8003f0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d109      	bne.n	8003f2a <MainStateMechine+0x62>
					{
						mainstate = SetPick_PlaceTray;
 8003f16:	4b83      	ldr	r3, [pc, #524]	; (8004124 <MainStateMechine+0x25c>)
 8003f18:	2203      	movs	r2, #3
 8003f1a:	701a      	strb	r2, [r3, #0]
						registerFrame[16].U16 = 0;
 8003f1c:	4b82      	ldr	r3, [pc, #520]	; (8004128 <MainStateMechine+0x260>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	841a      	strh	r2, [r3, #32]
						pick_or_place = 0;
 8003f22:	4b82      	ldr	r3, [pc, #520]	; (800412c <MainStateMechine+0x264>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
					{
						mainstate = SetPoint;

					}

				break;
 8003f28:	e0f5      	b.n	8004116 <MainStateMechine+0x24e>
					else if(registerFrame[1].U16 == 2) // set place tray
 8003f2a:	4b7f      	ldr	r3, [pc, #508]	; (8004128 <MainStateMechine+0x260>)
 8003f2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d109      	bne.n	8003f48 <MainStateMechine+0x80>
						mainstate = SetPick_PlaceTray;
 8003f34:	4b7b      	ldr	r3, [pc, #492]	; (8004124 <MainStateMechine+0x25c>)
 8003f36:	2203      	movs	r2, #3
 8003f38:	701a      	strb	r2, [r3, #0]
						registerFrame[16].U16 = 1;
 8003f3a:	4b7b      	ldr	r3, [pc, #492]	; (8004128 <MainStateMechine+0x260>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	841a      	strh	r2, [r3, #32]
						pick_or_place = 1;
 8003f40:	4b7a      	ldr	r3, [pc, #488]	; (800412c <MainStateMechine+0x264>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
				break;
 8003f46:	e0e6      	b.n	8004116 <MainStateMechine+0x24e>
					else if(registerFrame[1].U16 == 4) // set home
 8003f48:	4b77      	ldr	r3, [pc, #476]	; (8004128 <MainStateMechine+0x260>)
 8003f4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d109      	bne.n	8003f66 <MainStateMechine+0x9e>
						mainstate = Homing;
 8003f52:	4b74      	ldr	r3, [pc, #464]	; (8004124 <MainStateMechine+0x25c>)
 8003f54:	2202      	movs	r2, #2
 8003f56:	701a      	strb	r2, [r3, #0]
						home_in = 1;
 8003f58:	4b75      	ldr	r3, [pc, #468]	; (8004130 <MainStateMechine+0x268>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
						registerFrame[16].U16 = 2;
 8003f5e:	4b72      	ldr	r3, [pc, #456]	; (8004128 <MainStateMechine+0x260>)
 8003f60:	2202      	movs	r2, #2
 8003f62:	841a      	strh	r2, [r3, #32]
				break;
 8003f64:	e0d7      	b.n	8004116 <MainStateMechine+0x24e>
					else if(registerFrame[1].U16 == 8) //  run tray mode
 8003f66:	4b70      	ldr	r3, [pc, #448]	; (8004128 <MainStateMechine+0x260>)
 8003f68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d103      	bne.n	8003f78 <MainStateMechine+0xb0>
						mainstate = Run_tray_mode;
 8003f70:	4b6c      	ldr	r3, [pc, #432]	; (8004124 <MainStateMechine+0x25c>)
 8003f72:	2204      	movs	r2, #4
 8003f74:	701a      	strb	r2, [r3, #0]
				break;
 8003f76:	e0ce      	b.n	8004116 <MainStateMechine+0x24e>
					else if(registerFrame[1].U16 == 16) // run point mode
 8003f78:	4b6b      	ldr	r3, [pc, #428]	; (8004128 <MainStateMechine+0x260>)
 8003f7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	f040 80c9 	bne.w	8004116 <MainStateMechine+0x24e>
						mainstate = SetPoint;
 8003f84:	4b67      	ldr	r3, [pc, #412]	; (8004124 <MainStateMechine+0x25c>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
				break;
 8003f8a:	e0c4      	b.n	8004116 <MainStateMechine+0x24e>

				case SetPoint:

					if(toggle_trajec){
 8003f8c:	4b69      	ldr	r3, [pc, #420]	; (8004134 <MainStateMechine+0x26c>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d013      	beq.n	8003fbc <MainStateMechine+0xf4>
						registerFrame[65].U16 = registerFrame[48].U16;//x axis target pos. = goal point x
 8003f94:	4b64      	ldr	r3, [pc, #400]	; (8004128 <MainStateMechine+0x260>)
 8003f96:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 8003f9a:	4b63      	ldr	r3, [pc, #396]	; (8004128 <MainStateMechine+0x260>)
 8003f9c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
						registerFrame[66].U16 = 300*10;//max speed x axis
 8003fa0:	4b61      	ldr	r3, [pc, #388]	; (8004128 <MainStateMechine+0x260>)
 8003fa2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003fa6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
						registerFrame[67].U16 = 1;//max acceleration x axis
 8003faa:	4b5f      	ldr	r3, [pc, #380]	; (8004128 <MainStateMechine+0x260>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
						registerFrame[64].U16 = 2;//run x axis
 8003fb2:	4b5d      	ldr	r3, [pc, #372]	; (8004128 <MainStateMechine+0x260>)
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003fba:	e013      	b.n	8003fe4 <MainStateMechine+0x11c>
					}else if(!toggle_trajec){
 8003fbc:	4b5d      	ldr	r3, [pc, #372]	; (8004134 <MainStateMechine+0x26c>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10f      	bne.n	8003fe4 <MainStateMechine+0x11c>
						registerFrame[64].U16 = 0;
 8003fc4:	4b58      	ldr	r3, [pc, #352]	; (8004128 <MainStateMechine+0x260>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
						registerFrame[65].U16 = 0;
 8003fcc:	4b56      	ldr	r3, [pc, #344]	; (8004128 <MainStateMechine+0x260>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
						registerFrame[66].U16 = 0;
 8003fd4:	4b54      	ldr	r3, [pc, #336]	; (8004128 <MainStateMechine+0x260>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
						registerFrame[67].U16 = 0;//max acceleration x axis
 8003fdc:	4b52      	ldr	r3, [pc, #328]	; (8004128 <MainStateMechine+0x260>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					}

					if(registerFrame[49].U16 != payback_val){
 8003fe4:	4b50      	ldr	r3, [pc, #320]	; (8004128 <MainStateMechine+0x260>)
 8003fe6:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ff2:	4b51      	ldr	r3, [pc, #324]	; (8004138 <MainStateMechine+0x270>)
 8003ff4:	edd3 7a00 	vldr	s15, [r3]
 8003ff8:	eeb4 7a67 	vcmp.f32	s14, s15
 8003ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004000:	d00d      	beq.n	800401e <MainStateMechine+0x156>
						sampling_time = 0;
 8004002:	4b4e      	ldr	r3, [pc, #312]	; (800413c <MainStateMechine+0x274>)
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
						payback_val = registerFrame[49].U16;
 800400a:	4b47      	ldr	r3, [pc, #284]	; (8004128 <MainStateMechine+0x260>)
 800400c:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8004010:	ee07 3a90 	vmov	s15, r3
 8004014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004018:	4b47      	ldr	r3, [pc, #284]	; (8004138 <MainStateMechine+0x270>)
 800401a:	edc3 7a00 	vstr	s15, [r3]
					}

					main_trajectory(registerFrame[49].U16/10.0, 1);
 800401e:	4b42      	ldr	r3, [pc, #264]	; (8004128 <MainStateMechine+0x260>)
 8004020:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8004024:	4618      	mov	r0, r3
 8004026:	f7fc fa29 	bl	800047c <__aeabi_i2d>
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	4b44      	ldr	r3, [pc, #272]	; (8004140 <MainStateMechine+0x278>)
 8004030:	f7fc fbb8 	bl	80007a4 <__aeabi_ddiv>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	f7fc fd4a 	bl	8000ad4 <__aeabi_d2f>
 8004040:	4603      	mov	r3, r0
 8004042:	2001      	movs	r0, #1
 8004044:	ee00 3a10 	vmov	s0, r3
 8004048:	f7fe f908 	bl	800225c <main_trajectory>



//					registerFrame[1].U16 = 0;

					mainstate = checkstate;
 800404c:	4b35      	ldr	r3, [pc, #212]	; (8004124 <MainStateMechine+0x25c>)
 800404e:	2200      	movs	r2, #0
 8004050:	701a      	strb	r2, [r3, #0]


//					registerFrame[1].U16 = 0;

				break;
 8004052:	e063      	b.n	800411c <MainStateMechine+0x254>

				case Homing:

					//reset base status
					if(home_in){
 8004054:	4b36      	ldr	r3, [pc, #216]	; (8004130 <MainStateMechine+0x268>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d009      	beq.n	8004070 <MainStateMechine+0x1a8>
						registerFrame[16].U16 = 4;
 800405c:	4b32      	ldr	r3, [pc, #200]	; (8004128 <MainStateMechine+0x260>)
 800405e:	2204      	movs	r2, #4
 8004060:	841a      	strh	r2, [r3, #32]
						registerFrame[64].U16 = 1;//Home x-Axis
 8004062:	4b31      	ldr	r3, [pc, #196]	; (8004128 <MainStateMechine+0x260>)
 8004064:	2201      	movs	r2, #1
 8004066:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
						home_in = 0;
 800406a:	4b31      	ldr	r3, [pc, #196]	; (8004130 <MainStateMechine+0x268>)
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
					}

					home_setpoint();
 8004070:	f7ff fe98 	bl	8003da4 <home_setpoint>
					mainstate = checkstate;
 8004074:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <MainStateMechine+0x25c>)
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]

				break;
 800407a:	e04f      	b.n	800411c <MainStateMechine+0x254>

				case SetPick_PlaceTray:

//					registerFrame[1].U16 = 0;//reset base status

					registerFrame[65].U16 = registerFrame[48].U16;//x axis target pos. = goal point x
 800407c:	4b2a      	ldr	r3, [pc, #168]	; (8004128 <MainStateMechine+0x260>)
 800407e:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 8004082:	4b29      	ldr	r3, [pc, #164]	; (8004128 <MainStateMechine+0x260>)
 8004084:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
					registerFrame[66].U16 = 50*10;//max speed x axis
 8004088:	4b27      	ldr	r3, [pc, #156]	; (8004128 <MainStateMechine+0x260>)
 800408a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800408e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
					registerFrame[67].U16 = 3;//min acceleration x axis
 8004092:	4b25      	ldr	r3, [pc, #148]	; (8004128 <MainStateMechine+0x260>)
 8004094:	2203      	movs	r2, #3
 8004096:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					Joystick();
 800409a:	f7fd ffa9 	bl	8001ff0 <Joystick>


					mainstate = checkstate;
 800409e:	4b21      	ldr	r3, [pc, #132]	; (8004124 <MainStateMechine+0x25c>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]

					if(registerFrame[64].U16 != 4 && registerFrame[64].U16 != 8)
 80040a4:	4b20      	ldr	r3, [pc, #128]	; (8004128 <MainStateMechine+0x260>)
 80040a6:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d035      	beq.n	800411a <MainStateMechine+0x252>
 80040ae:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <MainStateMechine+0x260>)
 80040b0:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d030      	beq.n	800411a <MainStateMechine+0x252>

						mainstate = checkstate;
 80040b8:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <MainStateMechine+0x25c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]


				break;
 80040be:	e02c      	b.n	800411a <MainStateMechine+0x252>

				case Run_tray_mode:
					if(arrived){
 80040c0:	4b20      	ldr	r3, [pc, #128]	; (8004144 <MainStateMechine+0x27c>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01b      	beq.n	8004100 <MainStateMechine+0x238>
						arrived = 0;
 80040c8:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <MainStateMechine+0x27c>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
						main_trajectory(pick_place_array[array_place],0);
 80040ce:	4b1e      	ldr	r3, [pc, #120]	; (8004148 <MainStateMechine+0x280>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	4a1e      	ldr	r2, [pc, #120]	; (800414c <MainStateMechine+0x284>)
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	2000      	movs	r0, #0
 80040de:	eeb0 0a67 	vmov.f32	s0, s15
 80040e2:	f7fe f8bb 	bl	800225c <main_trajectory>
						array_place++;
 80040e6:	4b18      	ldr	r3, [pc, #96]	; (8004148 <MainStateMechine+0x280>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	3301      	adds	r3, #1
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	4b16      	ldr	r3, [pc, #88]	; (8004148 <MainStateMechine+0x280>)
 80040f0:	701a      	strb	r2, [r3, #0]

						if(array_place == 10){
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <MainStateMechine+0x280>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b0a      	cmp	r3, #10
 80040f8:	d102      	bne.n	8004100 <MainStateMechine+0x238>
							mainstate = checkstate;
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <MainStateMechine+0x25c>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
						}
					}


					//pick_place_array
					calculate();
 8004100:	f7ff fd06 	bl	8003b10 <calculate>
					registerFrame[65].U16 = registerFrame[48].U16;
 8004104:	4b08      	ldr	r3, [pc, #32]	; (8004128 <MainStateMechine+0x260>)
 8004106:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 800410a:	4b07      	ldr	r3, [pc, #28]	; (8004128 <MainStateMechine+0x260>)
 800410c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


//					registerFrame[1].U16 = 0;

				break;
 8004110:	e004      	b.n	800411c <MainStateMechine+0x254>
			}
			}
 8004112:	bf00      	nop
 8004114:	e002      	b.n	800411c <MainStateMechine+0x254>
				break;
 8004116:	bf00      	nop
 8004118:	e000      	b.n	800411c <MainStateMechine+0x254>
				break;
 800411a:	bf00      	nop

}
 800411c:	bf00      	nop
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000d98 	.word	0x20000d98
 8004124:	20000c5c 	.word	0x20000c5c
 8004128:	20000bd0 	.word	0x20000bd0
 800412c:	20000c6a 	.word	0x20000c6a
 8004130:	20000226 	.word	0x20000226
 8004134:	20000200 	.word	0x20000200
 8004138:	20000d24 	.word	0x20000d24
 800413c:	20000ce0 	.word	0x20000ce0
 8004140:	40240000 	.word	0x40240000
 8004144:	20000201 	.word	0x20000201
 8004148:	20000d9c 	.word	0x20000d9c
 800414c:	20000cf0 	.word	0x20000cf0

08004150 <softResetMode>:


// I2C functions
//
// Soft Reset mode********************************
void softResetMode(){
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Transmit_IT(&hi2c1, slaveAddress << 1, softResetseq, 4);
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <softResetMode+0x1c>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	b299      	uxth	r1, r3
 800415e:	2304      	movs	r3, #4
 8004160:	4a03      	ldr	r2, [pc, #12]	; (8004170 <softResetMode+0x20>)
 8004162:	4804      	ldr	r0, [pc, #16]	; (8004174 <softResetMode+0x24>)
 8004164:	f002 f94c 	bl	8006400 <HAL_I2C_Master_Transmit_IT>
}
 8004168:	bf00      	nop
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000202 	.word	0x20000202
 8004170:	20000204 	.word	0x20000204
 8004174:	20000300 	.word	0x20000300

08004178 <EmergencyMode>:
//*************************************************


//Emergency mode***********************************************
void EmergencyMode(){
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
     HAL_I2C_Master_Transmit_IT(&hi2c1, slaveAddress << 1, Emergencyseq, 1);
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <EmergencyMode+0x1c>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	b299      	uxth	r1, r3
 8004186:	2301      	movs	r3, #1
 8004188:	4a03      	ldr	r2, [pc, #12]	; (8004198 <EmergencyMode+0x20>)
 800418a:	4804      	ldr	r0, [pc, #16]	; (800419c <EmergencyMode+0x24>)
 800418c:	f002 f938 	bl	8006400 <HAL_I2C_Master_Transmit_IT>
}
 8004190:	bf00      	nop
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000202 	.word	0x20000202
 8004198:	20000208 	.word	0x20000208
 800419c:	20000300 	.word	0x20000300

080041a0 <stopEmergencyMode>:

void stopEmergencyMode(){
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
	 HAL_I2C_Master_Transmit_IT(&hi2c1, slaveAddress << 1, stopEmergencyseq, 4);
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <stopEmergencyMode+0x1c>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	b299      	uxth	r1, r3
 80041ae:	2304      	movs	r3, #4
 80041b0:	4a03      	ldr	r2, [pc, #12]	; (80041c0 <stopEmergencyMode+0x20>)
 80041b2:	4804      	ldr	r0, [pc, #16]	; (80041c4 <stopEmergencyMode+0x24>)
 80041b4:	f002 f924 	bl	8006400 <HAL_I2C_Master_Transmit_IT>
}
 80041b8:	bf00      	nop
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000202 	.word	0x20000202
 80041c0:	2000020c 	.word	0x2000020c
 80041c4:	20000300 	.word	0x20000300

080041c8 <startTestMode>:



//Test mode****************************************************
void startTestMode()
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Transmit_IT(&hi2c1, slaveAddress << 1, startTestseq, 2);
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <startTestMode+0x1c>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	b299      	uxth	r1, r3
 80041d6:	2302      	movs	r3, #2
 80041d8:	4a03      	ldr	r2, [pc, #12]	; (80041e8 <startTestMode+0x20>)
 80041da:	4804      	ldr	r0, [pc, #16]	; (80041ec <startTestMode+0x24>)
 80041dc:	f002 f910 	bl	8006400 <HAL_I2C_Master_Transmit_IT>
}
 80041e0:	bf00      	nop
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000202 	.word	0x20000202
 80041e8:	20000210 	.word	0x20000210
 80041ec:	20000300 	.word	0x20000300

080041f0 <stopTestMode>:
void stopTestMode()
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Transmit_IT(&hi2c1, slaveAddress << 1, stopTestseq, 2);
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <stopTestMode+0x1c>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	b299      	uxth	r1, r3
 80041fe:	2302      	movs	r3, #2
 8004200:	4a03      	ldr	r2, [pc, #12]	; (8004210 <stopTestMode+0x20>)
 8004202:	4804      	ldr	r0, [pc, #16]	; (8004214 <stopTestMode+0x24>)
 8004204:	f002 f8fc 	bl	8006400 <HAL_I2C_Master_Transmit_IT>
}
 8004208:	bf00      	nop
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20000202 	.word	0x20000202
 8004210:	20000214 	.word	0x20000214
 8004214:	20000300 	.word	0x20000300

08004218 <readStatus>:



// ReadMode***************************************************

void readStatus(){
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Receive_IT(&hi2c1, slaveAddress << 1, statusTemp, 1);
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <readStatus+0x1c>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	b299      	uxth	r1, r3
 8004226:	2301      	movs	r3, #1
 8004228:	4a03      	ldr	r2, [pc, #12]	; (8004238 <readStatus+0x20>)
 800422a:	4804      	ldr	r0, [pc, #16]	; (800423c <readStatus+0x24>)
 800422c:	f002 f98e 	bl	800654c <HAL_I2C_Master_Receive_IT>
}
 8004230:	bf00      	nop
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000202 	.word	0x20000202
 8004238:	20000d38 	.word	0x20000d38
 800423c:	20000300 	.word	0x20000300

08004240 <startRunMode>:


//Gripper**********************************************************

void startRunMode(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  HAL_I2C_Master_Transmit_IT(&hi2c1, slaveAddress << 1, startRunseq, 2);
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <startRunMode+0x1c>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	b29b      	uxth	r3, r3
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	b299      	uxth	r1, r3
 800424e:	2302      	movs	r3, #2
 8004250:	4a03      	ldr	r2, [pc, #12]	; (8004260 <startRunMode+0x20>)
 8004252:	4804      	ldr	r0, [pc, #16]	; (8004264 <startRunMode+0x24>)
 8004254:	f002 f8d4 	bl	8006400 <HAL_I2C_Master_Transmit_IT>
}
 8004258:	bf00      	nop
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000202 	.word	0x20000202
 8004260:	20000218 	.word	0x20000218
 8004264:	20000300 	.word	0x20000300

08004268 <stopRunMode>:


void stopRunMode(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  HAL_I2C_Master_Transmit_IT(&hi2c1, slaveAddress << 1, stopRunseq, 2);
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <stopRunMode+0x1c>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b29b      	uxth	r3, r3
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	b299      	uxth	r1, r3
 8004276:	2302      	movs	r3, #2
 8004278:	4a03      	ldr	r2, [pc, #12]	; (8004288 <stopRunMode+0x20>)
 800427a:	4804      	ldr	r0, [pc, #16]	; (800428c <stopRunMode+0x24>)
 800427c:	f002 f8c0 	bl	8006400 <HAL_I2C_Master_Transmit_IT>
}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000202 	.word	0x20000202
 8004288:	2000021c 	.word	0x2000021c
 800428c:	20000300 	.word	0x20000300

08004290 <pickMode>:


void pickMode(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  HAL_I2C_Master_Transmit_IT(&hi2c1, slaveAddress << 1, pickseq, 2);
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <pickMode+0x1c>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	b29b      	uxth	r3, r3
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	b299      	uxth	r1, r3
 800429e:	2302      	movs	r3, #2
 80042a0:	4a03      	ldr	r2, [pc, #12]	; (80042b0 <pickMode+0x20>)
 80042a2:	4804      	ldr	r0, [pc, #16]	; (80042b4 <pickMode+0x24>)
 80042a4:	f002 f8ac 	bl	8006400 <HAL_I2C_Master_Transmit_IT>
}
 80042a8:	bf00      	nop
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20000202 	.word	0x20000202
 80042b0:	20000220 	.word	0x20000220
 80042b4:	20000300 	.word	0x20000300

080042b8 <placeMode>:


void placeMode(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  HAL_I2C_Master_Transmit_IT(&hi2c1, slaveAddress << 1, placeseq, 2);
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <placeMode+0x1c>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	b299      	uxth	r1, r3
 80042c6:	2302      	movs	r3, #2
 80042c8:	4a03      	ldr	r2, [pc, #12]	; (80042d8 <placeMode+0x20>)
 80042ca:	4804      	ldr	r0, [pc, #16]	; (80042dc <placeMode+0x24>)
 80042cc:	f002 f898 	bl	8006400 <HAL_I2C_Master_Transmit_IT>
}
 80042d0:	bf00      	nop
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20000202 	.word	0x20000202
 80042d8:	20000224 	.word	0x20000224
 80042dc:	20000300 	.word	0x20000300

080042e0 <modeControl>:
//************************************************************

void modeControl(){
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
	if(modeSelect == 0){
 80042e4:	4b32      	ldr	r3, [pc, #200]	; (80043b0 <modeControl+0xd0>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <modeControl+0x12>
		readFlag2 = 0;
 80042ec:	4b31      	ldr	r3, [pc, #196]	; (80043b4 <modeControl+0xd4>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	701a      	strb	r2, [r3, #0]

	}

	if( modeSelect == 1){
 80042f2:	4b2f      	ldr	r3, [pc, #188]	; (80043b0 <modeControl+0xd0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d104      	bne.n	8004304 <modeControl+0x24>
		softResetMode();
 80042fa:	f7ff ff29 	bl	8004150 <softResetMode>
		modeSelect = 0;
 80042fe:	4b2c      	ldr	r3, [pc, #176]	; (80043b0 <modeControl+0xd0>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]

	}
	if( modeSelect == 2){
 8004304:	4b2a      	ldr	r3, [pc, #168]	; (80043b0 <modeControl+0xd0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d104      	bne.n	8004316 <modeControl+0x36>
		EmergencyMode();
 800430c:	f7ff ff34 	bl	8004178 <EmergencyMode>
		modeSelect = 0;
 8004310:	4b27      	ldr	r3, [pc, #156]	; (80043b0 <modeControl+0xd0>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]

	}
	if( modeSelect == 3){
 8004316:	4b26      	ldr	r3, [pc, #152]	; (80043b0 <modeControl+0xd0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b03      	cmp	r3, #3
 800431c:	d104      	bne.n	8004328 <modeControl+0x48>
		stopEmergencyMode();
 800431e:	f7ff ff3f 	bl	80041a0 <stopEmergencyMode>
		modeSelect = 0;
 8004322:	4b23      	ldr	r3, [pc, #140]	; (80043b0 <modeControl+0xd0>)
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]

	}
	if( modeSelect == 4){
 8004328:	4b21      	ldr	r3, [pc, #132]	; (80043b0 <modeControl+0xd0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b04      	cmp	r3, #4
 800432e:	d104      	bne.n	800433a <modeControl+0x5a>
		startTestMode();
 8004330:	f7ff ff4a 	bl	80041c8 <startTestMode>
		modeSelect = 0;
 8004334:	4b1e      	ldr	r3, [pc, #120]	; (80043b0 <modeControl+0xd0>)
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]

	}
	if( modeSelect == 5){
 800433a:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <modeControl+0xd0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b05      	cmp	r3, #5
 8004340:	d104      	bne.n	800434c <modeControl+0x6c>
		stopTestMode();
 8004342:	f7ff ff55 	bl	80041f0 <stopTestMode>
		modeSelect = 0;
 8004346:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <modeControl+0xd0>)
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]

	}
	if( modeSelect == 6){
 800434c:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <modeControl+0xd0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b06      	cmp	r3, #6
 8004352:	d104      	bne.n	800435e <modeControl+0x7e>
		startRunMode();
 8004354:	f7ff ff74 	bl	8004240 <startRunMode>
		modeSelect = 0;
 8004358:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <modeControl+0xd0>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]

	}
	if( modeSelect == 7){
 800435e:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <modeControl+0xd0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b07      	cmp	r3, #7
 8004364:	d104      	bne.n	8004370 <modeControl+0x90>
		stopRunMode();
 8004366:	f7ff ff7f 	bl	8004268 <stopRunMode>
		modeSelect = 0;
 800436a:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <modeControl+0xd0>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

	}
	if( modeSelect == 8){
 8004370:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <modeControl+0xd0>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d10a      	bne.n	800438e <modeControl+0xae>
		read_count = 0;
 8004378:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <modeControl+0xd8>)
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
		pickMode();
 800437e:	f7ff ff87 	bl	8004290 <pickMode>
          readFlag2 = 1;
 8004382:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <modeControl+0xd4>)
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]

		modeSelect = 0;
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <modeControl+0xd0>)
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]

	}
	if( modeSelect == 9){
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <modeControl+0xd0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b09      	cmp	r3, #9
 8004394:	d10a      	bne.n	80043ac <modeControl+0xcc>
		read_count = 0;
 8004396:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <modeControl+0xd8>)
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]
		placeMode();
 800439c:	f7ff ff8c 	bl	80042b8 <placeMode>
          readFlag2 = 1;
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <modeControl+0xd4>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	701a      	strb	r2, [r3, #0]

		modeSelect = 0;
 80043a6:	4b02      	ldr	r3, [pc, #8]	; (80043b0 <modeControl+0xd0>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

	}
}
 80043ac:	bf00      	nop
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000d34 	.word	0x20000d34
 80043b4:	20000d3a 	.word	0x20000d3a
 80043b8:	20000d3b 	.word	0x20000d3b

080043bc <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 readFlag = 1;
 80043c4:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	701a      	strb	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000d39 	.word	0x20000d39

080043dc <HAL_I2C_MasterRxCpltCallback>:



void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 readFlag = 0;
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000d39 	.word	0x20000d39

080043fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004400:	b672      	cpsid	i
}
 8004402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004404:	e7fe      	b.n	8004404 <Error_Handler+0x8>
	...

08004408 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	607b      	str	r3, [r7, #4]
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_MspInit+0x4c>)
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	4a0f      	ldr	r2, [pc, #60]	; (8004454 <HAL_MspInit+0x4c>)
 8004418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800441c:	6453      	str	r3, [r2, #68]	; 0x44
 800441e:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <HAL_MspInit+0x4c>)
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004426:	607b      	str	r3, [r7, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800442a:	2300      	movs	r3, #0
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_MspInit+0x4c>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	4a08      	ldr	r2, [pc, #32]	; (8004454 <HAL_MspInit+0x4c>)
 8004434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004438:	6413      	str	r3, [r2, #64]	; 0x40
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <HAL_MspInit+0x4c>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004446:	2007      	movs	r0, #7
 8004448:	f001 f882 	bl	8005550 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40023800 	.word	0x40023800

08004458 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	; 0x28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004460:	f107 0314 	add.w	r3, r7, #20
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a3c      	ldr	r2, [pc, #240]	; (8004568 <HAL_ADC_MspInit+0x110>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d171      	bne.n	800455e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800447a:	2300      	movs	r3, #0
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	4b3b      	ldr	r3, [pc, #236]	; (800456c <HAL_ADC_MspInit+0x114>)
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	4a3a      	ldr	r2, [pc, #232]	; (800456c <HAL_ADC_MspInit+0x114>)
 8004484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004488:	6453      	str	r3, [r2, #68]	; 0x44
 800448a:	4b38      	ldr	r3, [pc, #224]	; (800456c <HAL_ADC_MspInit+0x114>)
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	4b34      	ldr	r3, [pc, #208]	; (800456c <HAL_ADC_MspInit+0x114>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	4a33      	ldr	r2, [pc, #204]	; (800456c <HAL_ADC_MspInit+0x114>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	6313      	str	r3, [r2, #48]	; 0x30
 80044a6:	4b31      	ldr	r3, [pc, #196]	; (800456c <HAL_ADC_MspInit+0x114>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	4b2d      	ldr	r3, [pc, #180]	; (800456c <HAL_ADC_MspInit+0x114>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	4a2c      	ldr	r2, [pc, #176]	; (800456c <HAL_ADC_MspInit+0x114>)
 80044bc:	f043 0302 	orr.w	r3, r3, #2
 80044c0:	6313      	str	r3, [r2, #48]	; 0x30
 80044c2:	4b2a      	ldr	r3, [pc, #168]	; (800456c <HAL_ADC_MspInit+0x114>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044d2:	2303      	movs	r3, #3
 80044d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044da:	f107 0314 	add.w	r3, r7, #20
 80044de:	4619      	mov	r1, r3
 80044e0:	4823      	ldr	r0, [pc, #140]	; (8004570 <HAL_ADC_MspInit+0x118>)
 80044e2:	f001 fc93 	bl	8005e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80044e6:	2303      	movs	r3, #3
 80044e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044ea:	2303      	movs	r3, #3
 80044ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044f2:	f107 0314 	add.w	r3, r7, #20
 80044f6:	4619      	mov	r1, r3
 80044f8:	481e      	ldr	r0, [pc, #120]	; (8004574 <HAL_ADC_MspInit+0x11c>)
 80044fa:	f001 fc87 	bl	8005e0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80044fe:	4b1e      	ldr	r3, [pc, #120]	; (8004578 <HAL_ADC_MspInit+0x120>)
 8004500:	4a1e      	ldr	r2, [pc, #120]	; (800457c <HAL_ADC_MspInit+0x124>)
 8004502:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004504:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <HAL_ADC_MspInit+0x120>)
 8004506:	2200      	movs	r2, #0
 8004508:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800450a:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <HAL_ADC_MspInit+0x120>)
 800450c:	2200      	movs	r2, #0
 800450e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004510:	4b19      	ldr	r3, [pc, #100]	; (8004578 <HAL_ADC_MspInit+0x120>)
 8004512:	2200      	movs	r2, #0
 8004514:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004516:	4b18      	ldr	r3, [pc, #96]	; (8004578 <HAL_ADC_MspInit+0x120>)
 8004518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800451c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800451e:	4b16      	ldr	r3, [pc, #88]	; (8004578 <HAL_ADC_MspInit+0x120>)
 8004520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004524:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <HAL_ADC_MspInit+0x120>)
 8004528:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800452c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800452e:	4b12      	ldr	r3, [pc, #72]	; (8004578 <HAL_ADC_MspInit+0x120>)
 8004530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004534:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004536:	4b10      	ldr	r3, [pc, #64]	; (8004578 <HAL_ADC_MspInit+0x120>)
 8004538:	2200      	movs	r2, #0
 800453a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800453c:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <HAL_ADC_MspInit+0x120>)
 800453e:	2200      	movs	r2, #0
 8004540:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004542:	480d      	ldr	r0, [pc, #52]	; (8004578 <HAL_ADC_MspInit+0x120>)
 8004544:	f001 f846 	bl	80055d4 <HAL_DMA_Init>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800454e:	f7ff ff55 	bl	80043fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a08      	ldr	r2, [pc, #32]	; (8004578 <HAL_ADC_MspInit+0x120>)
 8004556:	639a      	str	r2, [r3, #56]	; 0x38
 8004558:	4a07      	ldr	r2, [pc, #28]	; (8004578 <HAL_ADC_MspInit+0x120>)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800455e:	bf00      	nop
 8004560:	3728      	adds	r7, #40	; 0x28
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40012000 	.word	0x40012000
 800456c:	40023800 	.word	0x40023800
 8004570:	40020000 	.word	0x40020000
 8004574:	40020400 	.word	0x40020400
 8004578:	200002a0 	.word	0x200002a0
 800457c:	40026410 	.word	0x40026410

08004580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004588:	f107 0314 	add.w	r3, r7, #20
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	605a      	str	r2, [r3, #4]
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a21      	ldr	r2, [pc, #132]	; (8004624 <HAL_I2C_MspInit+0xa4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d13c      	bne.n	800461c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	4b20      	ldr	r3, [pc, #128]	; (8004628 <HAL_I2C_MspInit+0xa8>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	4a1f      	ldr	r2, [pc, #124]	; (8004628 <HAL_I2C_MspInit+0xa8>)
 80045ac:	f043 0302 	orr.w	r3, r3, #2
 80045b0:	6313      	str	r3, [r2, #48]	; 0x30
 80045b2:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <HAL_I2C_MspInit+0xa8>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045c4:	2312      	movs	r3, #18
 80045c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045cc:	2303      	movs	r3, #3
 80045ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045d0:	2304      	movs	r3, #4
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d4:	f107 0314 	add.w	r3, r7, #20
 80045d8:	4619      	mov	r1, r3
 80045da:	4814      	ldr	r0, [pc, #80]	; (800462c <HAL_I2C_MspInit+0xac>)
 80045dc:	f001 fc16 	bl	8005e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	4b10      	ldr	r3, [pc, #64]	; (8004628 <HAL_I2C_MspInit+0xa8>)
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	4a0f      	ldr	r2, [pc, #60]	; (8004628 <HAL_I2C_MspInit+0xa8>)
 80045ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045ee:	6413      	str	r3, [r2, #64]	; 0x40
 80045f0:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <HAL_I2C_MspInit+0xa8>)
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80045fc:	2200      	movs	r2, #0
 80045fe:	2100      	movs	r1, #0
 8004600:	201f      	movs	r0, #31
 8004602:	f000 ffb0 	bl	8005566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004606:	201f      	movs	r0, #31
 8004608:	f000 ffc9 	bl	800559e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800460c:	2200      	movs	r2, #0
 800460e:	2100      	movs	r1, #0
 8004610:	2020      	movs	r0, #32
 8004612:	f000 ffa8 	bl	8005566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004616:	2020      	movs	r0, #32
 8004618:	f000 ffc1 	bl	800559e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800461c:	bf00      	nop
 800461e:	3728      	adds	r7, #40	; 0x28
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40005400 	.word	0x40005400
 8004628:	40023800 	.word	0x40023800
 800462c:	40020400 	.word	0x40020400

08004630 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	; 0x28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004638:	f107 0314 	add.w	r3, r7, #20
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	60da      	str	r2, [r3, #12]
 8004646:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004650:	d134      	bne.n	80046bc <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <HAL_TIM_Encoder_MspInit+0x94>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	4a1a      	ldr	r2, [pc, #104]	; (80046c4 <HAL_TIM_Encoder_MspInit+0x94>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6413      	str	r3, [r2, #64]	; 0x40
 8004662:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <HAL_TIM_Encoder_MspInit+0x94>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <HAL_TIM_Encoder_MspInit+0x94>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	4a13      	ldr	r2, [pc, #76]	; (80046c4 <HAL_TIM_Encoder_MspInit+0x94>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	6313      	str	r3, [r2, #48]	; 0x30
 800467e:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <HAL_TIM_Encoder_MspInit+0x94>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800468a:	f248 0302 	movw	r3, #32770	; 0x8002
 800468e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004690:	2302      	movs	r3, #2
 8004692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004694:	2300      	movs	r3, #0
 8004696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004698:	2300      	movs	r3, #0
 800469a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800469c:	2301      	movs	r3, #1
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a0:	f107 0314 	add.w	r3, r7, #20
 80046a4:	4619      	mov	r1, r3
 80046a6:	4808      	ldr	r0, [pc, #32]	; (80046c8 <HAL_TIM_Encoder_MspInit+0x98>)
 80046a8:	f001 fbb0 	bl	8005e0c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80046ac:	2200      	movs	r2, #0
 80046ae:	2100      	movs	r1, #0
 80046b0:	201c      	movs	r0, #28
 80046b2:	f000 ff58 	bl	8005566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80046b6:	201c      	movs	r0, #28
 80046b8:	f000 ff71 	bl	800559e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80046bc:	bf00      	nop
 80046be:	3728      	adds	r7, #40	; 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40020000 	.word	0x40020000

080046cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1c      	ldr	r2, [pc, #112]	; (800474c <HAL_TIM_Base_MspInit+0x80>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d116      	bne.n	800470c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <HAL_TIM_Base_MspInit+0x84>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	4a1a      	ldr	r2, [pc, #104]	; (8004750 <HAL_TIM_Base_MspInit+0x84>)
 80046e8:	f043 0302 	orr.w	r3, r3, #2
 80046ec:	6413      	str	r3, [r2, #64]	; 0x40
 80046ee:	4b18      	ldr	r3, [pc, #96]	; (8004750 <HAL_TIM_Base_MspInit+0x84>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80046fa:	2200      	movs	r2, #0
 80046fc:	2100      	movs	r1, #0
 80046fe:	201d      	movs	r0, #29
 8004700:	f000 ff31 	bl	8005566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004704:	201d      	movs	r0, #29
 8004706:	f000 ff4a 	bl	800559e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800470a:	e01a      	b.n	8004742 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a10      	ldr	r2, [pc, #64]	; (8004754 <HAL_TIM_Base_MspInit+0x88>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d115      	bne.n	8004742 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <HAL_TIM_Base_MspInit+0x84>)
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	4a0c      	ldr	r2, [pc, #48]	; (8004750 <HAL_TIM_Base_MspInit+0x84>)
 8004720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004724:	6453      	str	r3, [r2, #68]	; 0x44
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <HAL_TIM_Base_MspInit+0x84>)
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004732:	2200      	movs	r2, #0
 8004734:	2100      	movs	r1, #0
 8004736:	201a      	movs	r0, #26
 8004738:	f000 ff15 	bl	8005566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800473c:	201a      	movs	r0, #26
 800473e:	f000 ff2e 	bl	800559e <HAL_NVIC_EnableIRQ>
}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40000400 	.word	0x40000400
 8004750:	40023800 	.word	0x40023800
 8004754:	40014800 	.word	0x40014800

08004758 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a0b      	ldr	r2, [pc, #44]	; (8004794 <HAL_TIM_PWM_MspInit+0x3c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d10d      	bne.n	8004786 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <HAL_TIM_PWM_MspInit+0x40>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <HAL_TIM_PWM_MspInit+0x40>)
 8004774:	f043 0308 	orr.w	r3, r3, #8
 8004778:	6413      	str	r3, [r2, #64]	; 0x40
 800477a:	4b07      	ldr	r3, [pc, #28]	; (8004798 <HAL_TIM_PWM_MspInit+0x40>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40000c00 	.word	0x40000c00
 8004798:	40023800 	.word	0x40023800

0800479c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a4:	f107 030c 	add.w	r3, r7, #12
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	605a      	str	r2, [r3, #4]
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	60da      	str	r2, [r3, #12]
 80047b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a12      	ldr	r2, [pc, #72]	; (8004804 <HAL_TIM_MspPostInit+0x68>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d11d      	bne.n	80047fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047be:	2300      	movs	r3, #0
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	4b11      	ldr	r3, [pc, #68]	; (8004808 <HAL_TIM_MspPostInit+0x6c>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	4a10      	ldr	r2, [pc, #64]	; (8004808 <HAL_TIM_MspPostInit+0x6c>)
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	6313      	str	r3, [r2, #48]	; 0x30
 80047ce:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <HAL_TIM_MspPostInit+0x6c>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80047da:	2301      	movs	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047de:	2302      	movs	r3, #2
 80047e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80047ea:	2302      	movs	r3, #2
 80047ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ee:	f107 030c 	add.w	r3, r7, #12
 80047f2:	4619      	mov	r1, r3
 80047f4:	4805      	ldr	r0, [pc, #20]	; (800480c <HAL_TIM_MspPostInit+0x70>)
 80047f6:	f001 fb09 	bl	8005e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80047fa:	bf00      	nop
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40023800 	.word	0x40023800
 800480c:	40020000 	.word	0x40020000

08004810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b08a      	sub	sp, #40	; 0x28
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004818:	f107 0314 	add.w	r3, r7, #20
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	605a      	str	r2, [r3, #4]
 8004822:	609a      	str	r2, [r3, #8]
 8004824:	60da      	str	r2, [r3, #12]
 8004826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a34      	ldr	r2, [pc, #208]	; (8004900 <HAL_UART_MspInit+0xf0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d161      	bne.n	80048f6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004832:	2300      	movs	r3, #0
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	4b33      	ldr	r3, [pc, #204]	; (8004904 <HAL_UART_MspInit+0xf4>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	4a32      	ldr	r2, [pc, #200]	; (8004904 <HAL_UART_MspInit+0xf4>)
 800483c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004840:	6413      	str	r3, [r2, #64]	; 0x40
 8004842:	4b30      	ldr	r3, [pc, #192]	; (8004904 <HAL_UART_MspInit+0xf4>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	4b2c      	ldr	r3, [pc, #176]	; (8004904 <HAL_UART_MspInit+0xf4>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	4a2b      	ldr	r2, [pc, #172]	; (8004904 <HAL_UART_MspInit+0xf4>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	6313      	str	r3, [r2, #48]	; 0x30
 800485e:	4b29      	ldr	r3, [pc, #164]	; (8004904 <HAL_UART_MspInit+0xf4>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800486a:	230c      	movs	r3, #12
 800486c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486e:	2302      	movs	r3, #2
 8004870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004876:	2303      	movs	r3, #3
 8004878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800487a:	2307      	movs	r3, #7
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800487e:	f107 0314 	add.w	r3, r7, #20
 8004882:	4619      	mov	r1, r3
 8004884:	4820      	ldr	r0, [pc, #128]	; (8004908 <HAL_UART_MspInit+0xf8>)
 8004886:	f001 fac1 	bl	8005e0c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800488a:	4b20      	ldr	r3, [pc, #128]	; (800490c <HAL_UART_MspInit+0xfc>)
 800488c:	4a20      	ldr	r2, [pc, #128]	; (8004910 <HAL_UART_MspInit+0x100>)
 800488e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004890:	4b1e      	ldr	r3, [pc, #120]	; (800490c <HAL_UART_MspInit+0xfc>)
 8004892:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004896:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004898:	4b1c      	ldr	r3, [pc, #112]	; (800490c <HAL_UART_MspInit+0xfc>)
 800489a:	2240      	movs	r2, #64	; 0x40
 800489c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800489e:	4b1b      	ldr	r3, [pc, #108]	; (800490c <HAL_UART_MspInit+0xfc>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048a4:	4b19      	ldr	r3, [pc, #100]	; (800490c <HAL_UART_MspInit+0xfc>)
 80048a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048aa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048ac:	4b17      	ldr	r3, [pc, #92]	; (800490c <HAL_UART_MspInit+0xfc>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048b2:	4b16      	ldr	r3, [pc, #88]	; (800490c <HAL_UART_MspInit+0xfc>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80048b8:	4b14      	ldr	r3, [pc, #80]	; (800490c <HAL_UART_MspInit+0xfc>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80048be:	4b13      	ldr	r3, [pc, #76]	; (800490c <HAL_UART_MspInit+0xfc>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048c4:	4b11      	ldr	r3, [pc, #68]	; (800490c <HAL_UART_MspInit+0xfc>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80048ca:	4810      	ldr	r0, [pc, #64]	; (800490c <HAL_UART_MspInit+0xfc>)
 80048cc:	f000 fe82 	bl	80055d4 <HAL_DMA_Init>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80048d6:	f7ff fd91 	bl	80043fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a0b      	ldr	r2, [pc, #44]	; (800490c <HAL_UART_MspInit+0xfc>)
 80048de:	635a      	str	r2, [r3, #52]	; 0x34
 80048e0:	4a0a      	ldr	r2, [pc, #40]	; (800490c <HAL_UART_MspInit+0xfc>)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80048e6:	2200      	movs	r2, #0
 80048e8:	2100      	movs	r1, #0
 80048ea:	2026      	movs	r0, #38	; 0x26
 80048ec:	f000 fe3b 	bl	8005566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80048f0:	2026      	movs	r0, #38	; 0x26
 80048f2:	f000 fe54 	bl	800559e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80048f6:	bf00      	nop
 80048f8:	3728      	adds	r7, #40	; 0x28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40004400 	.word	0x40004400
 8004904:	40023800 	.word	0x40023800
 8004908:	40020000 	.word	0x40020000
 800490c:	20000698 	.word	0x20000698
 8004910:	400260a0 	.word	0x400260a0

08004914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004918:	e7fe      	b.n	8004918 <NMI_Handler+0x4>

0800491a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800491a:	b480      	push	{r7}
 800491c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800491e:	e7fe      	b.n	800491e <HardFault_Handler+0x4>

08004920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004924:	e7fe      	b.n	8004924 <MemManage_Handler+0x4>

08004926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004926:	b480      	push	{r7}
 8004928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800492a:	e7fe      	b.n	800492a <BusFault_Handler+0x4>

0800492c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004930:	e7fe      	b.n	8004930 <UsageFault_Handler+0x4>

08004932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004932:	b480      	push	{r7}
 8004934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004936:	bf00      	nop
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800494e:	b480      	push	{r7}
 8004950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004952:	bf00      	nop
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004960:	f000 f8e0 	bl	8004b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004964:	bf00      	nop
 8004966:	bd80      	pop	{r7, pc}

08004968 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800496c:	4802      	ldr	r0, [pc, #8]	; (8004978 <DMA1_Stream6_IRQHandler+0x10>)
 800496e:	f000 ffc9 	bl	8005904 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004972:	bf00      	nop
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000698 	.word	0x20000698

0800497c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004980:	4802      	ldr	r0, [pc, #8]	; (800498c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004982:	f004 fc8b 	bl	800929c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000570 	.word	0x20000570

08004990 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004994:	4802      	ldr	r0, [pc, #8]	; (80049a0 <TIM2_IRQHandler+0x10>)
 8004996:	f004 fc81 	bl	800929c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800499a:	bf00      	nop
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000354 	.word	0x20000354

080049a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80049a8:	4802      	ldr	r0, [pc, #8]	; (80049b4 <TIM3_IRQHandler+0x10>)
 80049aa:	f004 fc77 	bl	800929c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80049ae:	bf00      	nop
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000408 	.word	0x20000408

080049b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80049bc:	4802      	ldr	r0, [pc, #8]	; (80049c8 <I2C1_EV_IRQHandler+0x10>)
 80049be:	f001 fe73 	bl	80066a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000300 	.word	0x20000300

080049cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80049d0:	4802      	ldr	r0, [pc, #8]	; (80049dc <I2C1_ER_IRQHandler+0x10>)
 80049d2:	f001 ffda 	bl	800698a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80049d6:	bf00      	nop
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000300 	.word	0x20000300

080049e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80049e4:	4802      	ldr	r0, [pc, #8]	; (80049f0 <USART2_IRQHandler+0x10>)
 80049e6:	f005 ff19 	bl	800a81c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80049ea:	bf00      	nop
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000624 	.word	0x20000624

080049f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80049f8:	4802      	ldr	r0, [pc, #8]	; (8004a04 <DMA2_Stream0_IRQHandler+0x10>)
 80049fa:	f000 ff83 	bl	8005904 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80049fe:	bf00      	nop
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	200002a0 	.word	0x200002a0

08004a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <SystemInit+0x20>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	4a05      	ldr	r2, [pc, #20]	; (8004a28 <SystemInit+0x20>)
 8004a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a1c:	bf00      	nop
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	e000ed00 	.word	0xe000ed00

08004a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a30:	480d      	ldr	r0, [pc, #52]	; (8004a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004a32:	490e      	ldr	r1, [pc, #56]	; (8004a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004a34:	4a0e      	ldr	r2, [pc, #56]	; (8004a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a38:	e002      	b.n	8004a40 <LoopCopyDataInit>

08004a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a3e:	3304      	adds	r3, #4

08004a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a44:	d3f9      	bcc.n	8004a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a46:	4a0b      	ldr	r2, [pc, #44]	; (8004a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004a48:	4c0b      	ldr	r4, [pc, #44]	; (8004a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a4c:	e001      	b.n	8004a52 <LoopFillZerobss>

08004a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a50:	3204      	adds	r2, #4

08004a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a54:	d3fb      	bcc.n	8004a4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a56:	f7ff ffd7 	bl	8004a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a5a:	f006 ff25 	bl	800b8a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a5e:	f7fc fd67 	bl	8001530 <main>
  bx  lr    
 8004a62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a6c:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8004a70:	0800bd00 	.word	0x0800bd00
  ldr r2, =_sbss
 8004a74:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8004a78:	20000da4 	.word	0x20000da4

08004a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a7c:	e7fe      	b.n	8004a7c <ADC_IRQHandler>
	...

08004a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a84:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <HAL_Init+0x40>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a0d      	ldr	r2, [pc, #52]	; (8004ac0 <HAL_Init+0x40>)
 8004a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <HAL_Init+0x40>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <HAL_Init+0x40>)
 8004a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a9c:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <HAL_Init+0x40>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a07      	ldr	r2, [pc, #28]	; (8004ac0 <HAL_Init+0x40>)
 8004aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004aa8:	2003      	movs	r0, #3
 8004aaa:	f000 fd51 	bl	8005550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004aae:	2000      	movs	r0, #0
 8004ab0:	f000 f808 	bl	8004ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ab4:	f7ff fca8 	bl	8004408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40023c00 	.word	0x40023c00

08004ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004acc:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <HAL_InitTick+0x54>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <HAL_InitTick+0x58>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fd69 	bl	80055ba <HAL_SYSTICK_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e00e      	b.n	8004b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b0f      	cmp	r3, #15
 8004af6:	d80a      	bhi.n	8004b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004af8:	2200      	movs	r2, #0
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	f000 fd31 	bl	8005566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b04:	4a06      	ldr	r2, [pc, #24]	; (8004b20 <HAL_InitTick+0x5c>)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e000      	b.n	8004b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	2000022c 	.word	0x2000022c
 8004b1c:	20000234 	.word	0x20000234
 8004b20:	20000230 	.word	0x20000230

08004b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <HAL_IncTick+0x20>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <HAL_IncTick+0x24>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4413      	add	r3, r2
 8004b34:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <HAL_IncTick+0x24>)
 8004b36:	6013      	str	r3, [r2, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000234 	.word	0x20000234
 8004b48:	20000da0 	.word	0x20000da0

08004b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b50:	4b03      	ldr	r3, [pc, #12]	; (8004b60 <HAL_GetTick+0x14>)
 8004b52:	681b      	ldr	r3, [r3, #0]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20000da0 	.word	0x20000da0

08004b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b6c:	f7ff ffee 	bl	8004b4c <HAL_GetTick>
 8004b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d005      	beq.n	8004b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <HAL_Delay+0x44>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b8a:	bf00      	nop
 8004b8c:	f7ff ffde 	bl	8004b4c <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d8f7      	bhi.n	8004b8c <HAL_Delay+0x28>
  {
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000234 	.word	0x20000234

08004bac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e033      	b.n	8004c2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff fc44 	bl	8004458 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d118      	bne.n	8004c1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004bf2:	f023 0302 	bic.w	r3, r3, #2
 8004bf6:	f043 0202 	orr.w	r2, r3, #2
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa58 	bl	80050b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	f043 0201 	orr.w	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
 8004c1a:	e001      	b.n	8004c20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_ADC_Start_DMA+0x1e>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e0ce      	b.n	8004df0 <HAL_ADC_Start_DMA+0x1bc>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d018      	beq.n	8004c9a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c78:	4b5f      	ldr	r3, [pc, #380]	; (8004df8 <HAL_ADC_Start_DMA+0x1c4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a5f      	ldr	r2, [pc, #380]	; (8004dfc <HAL_ADC_Start_DMA+0x1c8>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	0c9a      	lsrs	r2, r3, #18
 8004c84:	4613      	mov	r3, r2
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004c8c:	e002      	b.n	8004c94 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f9      	bne.n	8004c8e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca8:	d107      	bne.n	8004cba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	f040 8086 	bne.w	8004dd6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
 8004cd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004cf4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d08:	d106      	bne.n	8004d18 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	f023 0206 	bic.w	r2, r3, #6
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44
 8004d16:	e002      	b.n	8004d1e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d26:	4b36      	ldr	r3, [pc, #216]	; (8004e00 <HAL_ADC_Start_DMA+0x1cc>)
 8004d28:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	4a35      	ldr	r2, [pc, #212]	; (8004e04 <HAL_ADC_Start_DMA+0x1d0>)
 8004d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	4a34      	ldr	r2, [pc, #208]	; (8004e08 <HAL_ADC_Start_DMA+0x1d4>)
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	4a33      	ldr	r2, [pc, #204]	; (8004e0c <HAL_ADC_Start_DMA+0x1d8>)
 8004d40:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004d4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004d5a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d6a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	334c      	adds	r3, #76	; 0x4c
 8004d76:	4619      	mov	r1, r3
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f000 fcd8 	bl	8005730 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10f      	bne.n	8004dac <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d129      	bne.n	8004dee <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004da8:	609a      	str	r2, [r3, #8]
 8004daa:	e020      	b.n	8004dee <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a17      	ldr	r2, [pc, #92]	; (8004e10 <HAL_ADC_Start_DMA+0x1dc>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d11b      	bne.n	8004dee <HAL_ADC_Start_DMA+0x1ba>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d114      	bne.n	8004dee <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	e00b      	b.n	8004dee <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f043 0210 	orr.w	r2, r3, #16
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	f043 0201 	orr.w	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	2000022c 	.word	0x2000022c
 8004dfc:	431bde83 	.word	0x431bde83
 8004e00:	40012300 	.word	0x40012300
 8004e04:	080052ad 	.word	0x080052ad
 8004e08:	08005367 	.word	0x08005367
 8004e0c:	08005383 	.word	0x08005383
 8004e10:	40012000 	.word	0x40012000

08004e14 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_ADC_ConfigChannel+0x1c>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e113      	b.n	8005094 <HAL_ADC_ConfigChannel+0x244>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b09      	cmp	r3, #9
 8004e7a:	d925      	bls.n	8004ec8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68d9      	ldr	r1, [r3, #12]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	4413      	add	r3, r2
 8004e90:	3b1e      	subs	r3, #30
 8004e92:	2207      	movs	r2, #7
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43da      	mvns	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	400a      	ands	r2, r1
 8004ea0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68d9      	ldr	r1, [r3, #12]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	4403      	add	r3, r0
 8004eba:	3b1e      	subs	r3, #30
 8004ebc:	409a      	lsls	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	60da      	str	r2, [r3, #12]
 8004ec6:	e022      	b.n	8004f0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6919      	ldr	r1, [r3, #16]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	4413      	add	r3, r2
 8004edc:	2207      	movs	r2, #7
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	43da      	mvns	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	400a      	ands	r2, r1
 8004eea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6919      	ldr	r1, [r3, #16]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	4618      	mov	r0, r3
 8004efe:	4603      	mov	r3, r0
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	4403      	add	r3, r0
 8004f04:	409a      	lsls	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b06      	cmp	r3, #6
 8004f14:	d824      	bhi.n	8004f60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	3b05      	subs	r3, #5
 8004f28:	221f      	movs	r2, #31
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	43da      	mvns	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	400a      	ands	r2, r1
 8004f36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	4618      	mov	r0, r3
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	3b05      	subs	r3, #5
 8004f52:	fa00 f203 	lsl.w	r2, r0, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	635a      	str	r2, [r3, #52]	; 0x34
 8004f5e:	e04c      	b.n	8004ffa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b0c      	cmp	r3, #12
 8004f66:	d824      	bhi.n	8004fb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	3b23      	subs	r3, #35	; 0x23
 8004f7a:	221f      	movs	r2, #31
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	43da      	mvns	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	400a      	ands	r2, r1
 8004f88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	4618      	mov	r0, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	3b23      	subs	r3, #35	; 0x23
 8004fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
 8004fb0:	e023      	b.n	8004ffa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	3b41      	subs	r3, #65	; 0x41
 8004fc4:	221f      	movs	r2, #31
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43da      	mvns	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	400a      	ands	r2, r1
 8004fd2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	3b41      	subs	r3, #65	; 0x41
 8004fee:	fa00 f203 	lsl.w	r2, r0, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ffa:	4b29      	ldr	r3, [pc, #164]	; (80050a0 <HAL_ADC_ConfigChannel+0x250>)
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a28      	ldr	r2, [pc, #160]	; (80050a4 <HAL_ADC_ConfigChannel+0x254>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d10f      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x1d8>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b12      	cmp	r3, #18
 800500e:	d10b      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <HAL_ADC_ConfigChannel+0x254>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d12b      	bne.n	800508a <HAL_ADC_ConfigChannel+0x23a>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <HAL_ADC_ConfigChannel+0x258>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <HAL_ADC_ConfigChannel+0x1f4>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b11      	cmp	r3, #17
 8005042:	d122      	bne.n	800508a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a11      	ldr	r2, [pc, #68]	; (80050a8 <HAL_ADC_ConfigChannel+0x258>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d111      	bne.n	800508a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005066:	4b11      	ldr	r3, [pc, #68]	; (80050ac <HAL_ADC_ConfigChannel+0x25c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a11      	ldr	r2, [pc, #68]	; (80050b0 <HAL_ADC_ConfigChannel+0x260>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	0c9a      	lsrs	r2, r3, #18
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800507c:	e002      	b.n	8005084 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	3b01      	subs	r3, #1
 8005082:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f9      	bne.n	800507e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40012300 	.word	0x40012300
 80050a4:	40012000 	.word	0x40012000
 80050a8:	10000012 	.word	0x10000012
 80050ac:	2000022c 	.word	0x2000022c
 80050b0:	431bde83 	.word	0x431bde83

080050b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050bc:	4b79      	ldr	r3, [pc, #484]	; (80052a4 <ADC_Init+0x1f0>)
 80050be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	431a      	orrs	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6859      	ldr	r1, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	021a      	lsls	r2, r3, #8
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800510c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6859      	ldr	r1, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800512e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6899      	ldr	r1, [r3, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	4a58      	ldr	r2, [pc, #352]	; (80052a8 <ADC_Init+0x1f4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d022      	beq.n	8005192 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800515a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6899      	ldr	r1, [r3, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800517c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6899      	ldr	r1, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	609a      	str	r2, [r3, #8]
 8005190:	e00f      	b.n	80051b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80051b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0202 	bic.w	r2, r2, #2
 80051c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6899      	ldr	r1, [r3, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	7e1b      	ldrb	r3, [r3, #24]
 80051cc:	005a      	lsls	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01b      	beq.n	8005218 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80051fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6859      	ldr	r1, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	3b01      	subs	r3, #1
 800520c:	035a      	lsls	r2, r3, #13
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	e007      	b.n	8005228 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005226:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005236:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	3b01      	subs	r3, #1
 8005244:	051a      	lsls	r2, r3, #20
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800525c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6899      	ldr	r1, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800526a:	025a      	lsls	r2, r3, #9
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005282:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6899      	ldr	r1, [r3, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	029a      	lsls	r2, r3, #10
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	609a      	str	r2, [r3, #8]
}
 8005298:	bf00      	nop
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	40012300 	.word	0x40012300
 80052a8:	0f000001 	.word	0x0f000001

080052ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d13c      	bne.n	8005340 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d12b      	bne.n	8005338 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d127      	bne.n	8005338 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d006      	beq.n	8005304 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005300:	2b00      	cmp	r3, #0
 8005302:	d119      	bne.n	8005338 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0220 	bic.w	r2, r2, #32
 8005312:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d105      	bne.n	8005338 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	f043 0201 	orr.w	r2, r3, #1
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f7ff fd6b 	bl	8004e14 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800533e:	e00e      	b.n	800535e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7ff fd75 	bl	8004e3c <HAL_ADC_ErrorCallback>
}
 8005352:	e004      	b.n	800535e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	4798      	blx	r3
}
 800535e:	bf00      	nop
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f7ff fd57 	bl	8004e28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2240      	movs	r2, #64	; 0x40
 8005394:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	f043 0204 	orr.w	r2, r3, #4
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff fd4a 	bl	8004e3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053a8:	bf00      	nop
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <__NVIC_SetPriorityGrouping+0x44>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053cc:	4013      	ands	r3, r2
 80053ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053e2:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <__NVIC_SetPriorityGrouping+0x44>)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	60d3      	str	r3, [r2, #12]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	e000ed00 	.word	0xe000ed00

080053f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053fc:	4b04      	ldr	r3, [pc, #16]	; (8005410 <__NVIC_GetPriorityGrouping+0x18>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	0a1b      	lsrs	r3, r3, #8
 8005402:	f003 0307 	and.w	r3, r3, #7
}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	e000ed00 	.word	0xe000ed00

08005414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800541e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005422:	2b00      	cmp	r3, #0
 8005424:	db0b      	blt.n	800543e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	f003 021f 	and.w	r2, r3, #31
 800542c:	4907      	ldr	r1, [pc, #28]	; (800544c <__NVIC_EnableIRQ+0x38>)
 800542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	2001      	movs	r0, #1
 8005436:	fa00 f202 	lsl.w	r2, r0, r2
 800543a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	e000e100 	.word	0xe000e100

08005450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	6039      	str	r1, [r7, #0]
 800545a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800545c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005460:	2b00      	cmp	r3, #0
 8005462:	db0a      	blt.n	800547a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	490c      	ldr	r1, [pc, #48]	; (800549c <__NVIC_SetPriority+0x4c>)
 800546a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546e:	0112      	lsls	r2, r2, #4
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	440b      	add	r3, r1
 8005474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005478:	e00a      	b.n	8005490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	b2da      	uxtb	r2, r3
 800547e:	4908      	ldr	r1, [pc, #32]	; (80054a0 <__NVIC_SetPriority+0x50>)
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	3b04      	subs	r3, #4
 8005488:	0112      	lsls	r2, r2, #4
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	440b      	add	r3, r1
 800548e:	761a      	strb	r2, [r3, #24]
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	e000e100 	.word	0xe000e100
 80054a0:	e000ed00 	.word	0xe000ed00

080054a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b089      	sub	sp, #36	; 0x24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f1c3 0307 	rsb	r3, r3, #7
 80054be:	2b04      	cmp	r3, #4
 80054c0:	bf28      	it	cs
 80054c2:	2304      	movcs	r3, #4
 80054c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	3304      	adds	r3, #4
 80054ca:	2b06      	cmp	r3, #6
 80054cc:	d902      	bls.n	80054d4 <NVIC_EncodePriority+0x30>
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	3b03      	subs	r3, #3
 80054d2:	e000      	b.n	80054d6 <NVIC_EncodePriority+0x32>
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d8:	f04f 32ff 	mov.w	r2, #4294967295
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43da      	mvns	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	401a      	ands	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054ec:	f04f 31ff 	mov.w	r1, #4294967295
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	fa01 f303 	lsl.w	r3, r1, r3
 80054f6:	43d9      	mvns	r1, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054fc:	4313      	orrs	r3, r2
         );
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3724      	adds	r7, #36	; 0x24
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3b01      	subs	r3, #1
 8005518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800551c:	d301      	bcc.n	8005522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800551e:	2301      	movs	r3, #1
 8005520:	e00f      	b.n	8005542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005522:	4a0a      	ldr	r2, [pc, #40]	; (800554c <SysTick_Config+0x40>)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3b01      	subs	r3, #1
 8005528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800552a:	210f      	movs	r1, #15
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	f7ff ff8e 	bl	8005450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <SysTick_Config+0x40>)
 8005536:	2200      	movs	r2, #0
 8005538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800553a:	4b04      	ldr	r3, [pc, #16]	; (800554c <SysTick_Config+0x40>)
 800553c:	2207      	movs	r2, #7
 800553e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	e000e010 	.word	0xe000e010

08005550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff ff29 	bl	80053b0 <__NVIC_SetPriorityGrouping>
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005566:	b580      	push	{r7, lr}
 8005568:	b086      	sub	sp, #24
 800556a:	af00      	add	r7, sp, #0
 800556c:	4603      	mov	r3, r0
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
 8005572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005578:	f7ff ff3e 	bl	80053f8 <__NVIC_GetPriorityGrouping>
 800557c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	6978      	ldr	r0, [r7, #20]
 8005584:	f7ff ff8e 	bl	80054a4 <NVIC_EncodePriority>
 8005588:	4602      	mov	r2, r0
 800558a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558e:	4611      	mov	r1, r2
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff ff5d 	bl	8005450 <__NVIC_SetPriority>
}
 8005596:	bf00      	nop
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	4603      	mov	r3, r0
 80055a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff ff31 	bl	8005414 <__NVIC_EnableIRQ>
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ffa2 	bl	800550c <SysTick_Config>
 80055c8:	4603      	mov	r3, r0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055e0:	f7ff fab4 	bl	8004b4c <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e099      	b.n	8005724 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005610:	e00f      	b.n	8005632 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005612:	f7ff fa9b 	bl	8004b4c <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b05      	cmp	r3, #5
 800561e:	d908      	bls.n	8005632 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2203      	movs	r2, #3
 800562a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e078      	b.n	8005724 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e8      	bne.n	8005612 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4b38      	ldr	r3, [pc, #224]	; (800572c <HAL_DMA_Init+0x158>)
 800564c:	4013      	ands	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800565e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800566a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	2b04      	cmp	r3, #4
 800568a:	d107      	bne.n	800569c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	4313      	orrs	r3, r2
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 0307 	bic.w	r3, r3, #7
 80056b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d117      	bne.n	80056f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00e      	beq.n	80056f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fb1b 	bl	8005d14 <DMA_CheckFifoParam>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2240      	movs	r2, #64	; 0x40
 80056e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056f2:	2301      	movs	r3, #1
 80056f4:	e016      	b.n	8005724 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fad2 	bl	8005ca8 <DMA_CalcBaseAndBitshift>
 8005704:	4603      	mov	r3, r0
 8005706:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570c:	223f      	movs	r2, #63	; 0x3f
 800570e:	409a      	lsls	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	f010803f 	.word	0xf010803f

08005730 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005746:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_DMA_Start_IT+0x26>
 8005752:	2302      	movs	r3, #2
 8005754:	e040      	b.n	80057d8 <HAL_DMA_Start_IT+0xa8>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b01      	cmp	r3, #1
 8005768:	d12f      	bne.n	80057ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2202      	movs	r2, #2
 800576e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 fa64 	bl	8005c4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005788:	223f      	movs	r2, #63	; 0x3f
 800578a:	409a      	lsls	r2, r3
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0216 	orr.w	r2, r2, #22
 800579e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0208 	orr.w	r2, r2, #8
 80057b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	e005      	b.n	80057d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80057d2:	2302      	movs	r3, #2
 80057d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80057ee:	f7ff f9ad 	bl	8004b4c <HAL_GetTick>
 80057f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d008      	beq.n	8005812 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2280      	movs	r2, #128	; 0x80
 8005804:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e052      	b.n	80058b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0216 	bic.w	r2, r2, #22
 8005820:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695a      	ldr	r2, [r3, #20]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005830:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d103      	bne.n	8005842 <HAL_DMA_Abort+0x62>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583e:	2b00      	cmp	r3, #0
 8005840:	d007      	beq.n	8005852 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0208 	bic.w	r2, r2, #8
 8005850:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0201 	bic.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005862:	e013      	b.n	800588c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005864:	f7ff f972 	bl	8004b4c <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b05      	cmp	r3, #5
 8005870:	d90c      	bls.n	800588c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2203      	movs	r2, #3
 800587c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e015      	b.n	80058b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e4      	bne.n	8005864 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589e:	223f      	movs	r2, #63	; 0x3f
 80058a0:	409a      	lsls	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d004      	beq.n	80058de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2280      	movs	r2, #128	; 0x80
 80058d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e00c      	b.n	80058f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2205      	movs	r2, #5
 80058e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0201 	bic.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005910:	4b8e      	ldr	r3, [pc, #568]	; (8005b4c <HAL_DMA_IRQHandler+0x248>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a8e      	ldr	r2, [pc, #568]	; (8005b50 <HAL_DMA_IRQHandler+0x24c>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	0a9b      	lsrs	r3, r3, #10
 800591c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005922:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592e:	2208      	movs	r2, #8
 8005930:	409a      	lsls	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4013      	ands	r3, r2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d01a      	beq.n	8005970 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d013      	beq.n	8005970 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0204 	bic.w	r2, r2, #4
 8005956:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595c:	2208      	movs	r2, #8
 800595e:	409a      	lsls	r2, r3
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005968:	f043 0201 	orr.w	r2, r3, #1
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005974:	2201      	movs	r2, #1
 8005976:	409a      	lsls	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d012      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005992:	2201      	movs	r2, #1
 8005994:	409a      	lsls	r2, r3
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599e:	f043 0202 	orr.w	r2, r3, #2
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059aa:	2204      	movs	r2, #4
 80059ac:	409a      	lsls	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4013      	ands	r3, r2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d012      	beq.n	80059dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00b      	beq.n	80059dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c8:	2204      	movs	r2, #4
 80059ca:	409a      	lsls	r2, r3
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d4:	f043 0204 	orr.w	r2, r3, #4
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e0:	2210      	movs	r2, #16
 80059e2:	409a      	lsls	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d043      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d03c      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fe:	2210      	movs	r2, #16
 8005a00:	409a      	lsls	r2, r3
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d018      	beq.n	8005a46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d108      	bne.n	8005a34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d024      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	4798      	blx	r3
 8005a32:	e01f      	b.n	8005a74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01b      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	4798      	blx	r3
 8005a44:	e016      	b.n	8005a74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d107      	bne.n	8005a64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0208 	bic.w	r2, r2, #8
 8005a62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a78:	2220      	movs	r2, #32
 8005a7a:	409a      	lsls	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 808f 	beq.w	8005ba4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 8087 	beq.w	8005ba4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	409a      	lsls	r2, r3
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b05      	cmp	r3, #5
 8005aac:	d136      	bne.n	8005b1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0216 	bic.w	r2, r2, #22
 8005abc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695a      	ldr	r2, [r3, #20]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005acc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <HAL_DMA_IRQHandler+0x1da>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0208 	bic.w	r2, r2, #8
 8005aec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af2:	223f      	movs	r2, #63	; 0x3f
 8005af4:	409a      	lsls	r2, r3
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d07e      	beq.n	8005c10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	4798      	blx	r3
        }
        return;
 8005b1a:	e079      	b.n	8005c10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d01d      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10d      	bne.n	8005b54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d031      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	4798      	blx	r3
 8005b48:	e02c      	b.n	8005ba4 <HAL_DMA_IRQHandler+0x2a0>
 8005b4a:	bf00      	nop
 8005b4c:	2000022c 	.word	0x2000022c
 8005b50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d023      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	4798      	blx	r3
 8005b64:	e01e      	b.n	8005ba4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10f      	bne.n	8005b94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0210 	bic.w	r2, r2, #16
 8005b82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d032      	beq.n	8005c12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d022      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2205      	movs	r2, #5
 8005bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0201 	bic.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d307      	bcc.n	8005bec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f2      	bne.n	8005bd0 <HAL_DMA_IRQHandler+0x2cc>
 8005bea:	e000      	b.n	8005bee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005bec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
 8005c0e:	e000      	b.n	8005c12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c10:	bf00      	nop
    }
  }
}
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c26:	b2db      	uxtb	r3, r3
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d108      	bne.n	8005c8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c8a:	e007      	b.n	8005c9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	60da      	str	r2, [r3, #12]
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	3b10      	subs	r3, #16
 8005cb8:	4a14      	ldr	r2, [pc, #80]	; (8005d0c <DMA_CalcBaseAndBitshift+0x64>)
 8005cba:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbe:	091b      	lsrs	r3, r3, #4
 8005cc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005cc2:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <DMA_CalcBaseAndBitshift+0x68>)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d909      	bls.n	8005cea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cde:	f023 0303 	bic.w	r3, r3, #3
 8005ce2:	1d1a      	adds	r2, r3, #4
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	659a      	str	r2, [r3, #88]	; 0x58
 8005ce8:	e007      	b.n	8005cfa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	aaaaaaab 	.word	0xaaaaaaab
 8005d10:	0800bca8 	.word	0x0800bca8

08005d14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d11f      	bne.n	8005d6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d856      	bhi.n	8005de2 <DMA_CheckFifoParam+0xce>
 8005d34:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <DMA_CheckFifoParam+0x28>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d4d 	.word	0x08005d4d
 8005d40:	08005d5f 	.word	0x08005d5f
 8005d44:	08005d4d 	.word	0x08005d4d
 8005d48:	08005de3 	.word	0x08005de3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d046      	beq.n	8005de6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d5c:	e043      	b.n	8005de6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d66:	d140      	bne.n	8005dea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d6c:	e03d      	b.n	8005dea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d76:	d121      	bne.n	8005dbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d837      	bhi.n	8005dee <DMA_CheckFifoParam+0xda>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <DMA_CheckFifoParam+0x70>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005d95 	.word	0x08005d95
 8005d88:	08005d9b 	.word	0x08005d9b
 8005d8c:	08005d95 	.word	0x08005d95
 8005d90:	08005dad 	.word	0x08005dad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
      break;
 8005d98:	e030      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d025      	beq.n	8005df2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005daa:	e022      	b.n	8005df2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005db4:	d11f      	bne.n	8005df6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005dba:	e01c      	b.n	8005df6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d903      	bls.n	8005dca <DMA_CheckFifoParam+0xb6>
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d003      	beq.n	8005dd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005dc8:	e018      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8005dce:	e015      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00e      	beq.n	8005dfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
      break;
 8005de0:	e00b      	b.n	8005dfa <DMA_CheckFifoParam+0xe6>
      break;
 8005de2:	bf00      	nop
 8005de4:	e00a      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      break;
 8005de6:	bf00      	nop
 8005de8:	e008      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      break;
 8005dea:	bf00      	nop
 8005dec:	e006      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      break;
 8005dee:	bf00      	nop
 8005df0:	e004      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      break;
 8005df2:	bf00      	nop
 8005df4:	e002      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      break;   
 8005df6:	bf00      	nop
 8005df8:	e000      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      break;
 8005dfa:	bf00      	nop
    }
  } 
  
  return status; 
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop

08005e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b089      	sub	sp, #36	; 0x24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e22:	2300      	movs	r3, #0
 8005e24:	61fb      	str	r3, [r7, #28]
 8005e26:	e159      	b.n	80060dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e28:	2201      	movs	r2, #1
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	f040 8148 	bne.w	80060d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d005      	beq.n	8005e5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d130      	bne.n	8005ec0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	2203      	movs	r2, #3
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	43db      	mvns	r3, r3
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	4013      	ands	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e94:	2201      	movs	r2, #1
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9c:	43db      	mvns	r3, r3
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	f003 0201 	and.w	r2, r3, #1
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d017      	beq.n	8005efc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8005edc:	43db      	mvns	r3, r3
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d123      	bne.n	8005f50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	08da      	lsrs	r2, r3, #3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3208      	adds	r2, #8
 8005f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	220f      	movs	r2, #15
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	43db      	mvns	r3, r3
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	08da      	lsrs	r2, r3, #3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3208      	adds	r2, #8
 8005f4a:	69b9      	ldr	r1, [r7, #24]
 8005f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	2203      	movs	r2, #3
 8005f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f60:	43db      	mvns	r3, r3
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	4013      	ands	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f003 0203 	and.w	r2, r3, #3
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80a2 	beq.w	80060d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	4b57      	ldr	r3, [pc, #348]	; (80060f4 <HAL_GPIO_Init+0x2e8>)
 8005f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9a:	4a56      	ldr	r2, [pc, #344]	; (80060f4 <HAL_GPIO_Init+0x2e8>)
 8005f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8005fa2:	4b54      	ldr	r3, [pc, #336]	; (80060f4 <HAL_GPIO_Init+0x2e8>)
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fae:	4a52      	ldr	r2, [pc, #328]	; (80060f8 <HAL_GPIO_Init+0x2ec>)
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	089b      	lsrs	r3, r3, #2
 8005fb4:	3302      	adds	r3, #2
 8005fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	220f      	movs	r2, #15
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a49      	ldr	r2, [pc, #292]	; (80060fc <HAL_GPIO_Init+0x2f0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d019      	beq.n	800600e <HAL_GPIO_Init+0x202>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a48      	ldr	r2, [pc, #288]	; (8006100 <HAL_GPIO_Init+0x2f4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <HAL_GPIO_Init+0x1fe>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a47      	ldr	r2, [pc, #284]	; (8006104 <HAL_GPIO_Init+0x2f8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00d      	beq.n	8006006 <HAL_GPIO_Init+0x1fa>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a46      	ldr	r2, [pc, #280]	; (8006108 <HAL_GPIO_Init+0x2fc>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d007      	beq.n	8006002 <HAL_GPIO_Init+0x1f6>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a45      	ldr	r2, [pc, #276]	; (800610c <HAL_GPIO_Init+0x300>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d101      	bne.n	8005ffe <HAL_GPIO_Init+0x1f2>
 8005ffa:	2304      	movs	r3, #4
 8005ffc:	e008      	b.n	8006010 <HAL_GPIO_Init+0x204>
 8005ffe:	2307      	movs	r3, #7
 8006000:	e006      	b.n	8006010 <HAL_GPIO_Init+0x204>
 8006002:	2303      	movs	r3, #3
 8006004:	e004      	b.n	8006010 <HAL_GPIO_Init+0x204>
 8006006:	2302      	movs	r3, #2
 8006008:	e002      	b.n	8006010 <HAL_GPIO_Init+0x204>
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <HAL_GPIO_Init+0x204>
 800600e:	2300      	movs	r3, #0
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	f002 0203 	and.w	r2, r2, #3
 8006016:	0092      	lsls	r2, r2, #2
 8006018:	4093      	lsls	r3, r2
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4313      	orrs	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006020:	4935      	ldr	r1, [pc, #212]	; (80060f8 <HAL_GPIO_Init+0x2ec>)
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	089b      	lsrs	r3, r3, #2
 8006026:	3302      	adds	r3, #2
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800602e:	4b38      	ldr	r3, [pc, #224]	; (8006110 <HAL_GPIO_Init+0x304>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	43db      	mvns	r3, r3
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	4013      	ands	r3, r2
 800603c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006052:	4a2f      	ldr	r2, [pc, #188]	; (8006110 <HAL_GPIO_Init+0x304>)
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006058:	4b2d      	ldr	r3, [pc, #180]	; (8006110 <HAL_GPIO_Init+0x304>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	43db      	mvns	r3, r3
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	4013      	ands	r3, r2
 8006066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800607c:	4a24      	ldr	r2, [pc, #144]	; (8006110 <HAL_GPIO_Init+0x304>)
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006082:	4b23      	ldr	r3, [pc, #140]	; (8006110 <HAL_GPIO_Init+0x304>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	43db      	mvns	r3, r3
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	4013      	ands	r3, r2
 8006090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060a6:	4a1a      	ldr	r2, [pc, #104]	; (8006110 <HAL_GPIO_Init+0x304>)
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060ac:	4b18      	ldr	r3, [pc, #96]	; (8006110 <HAL_GPIO_Init+0x304>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	43db      	mvns	r3, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4013      	ands	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060d0:	4a0f      	ldr	r2, [pc, #60]	; (8006110 <HAL_GPIO_Init+0x304>)
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	3301      	adds	r3, #1
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	2b0f      	cmp	r3, #15
 80060e0:	f67f aea2 	bls.w	8005e28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop
 80060e8:	3724      	adds	r7, #36	; 0x24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40023800 	.word	0x40023800
 80060f8:	40013800 	.word	0x40013800
 80060fc:	40020000 	.word	0x40020000
 8006100:	40020400 	.word	0x40020400
 8006104:	40020800 	.word	0x40020800
 8006108:	40020c00 	.word	0x40020c00
 800610c:	40021000 	.word	0x40021000
 8006110:	40013c00 	.word	0x40013c00

08006114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	887b      	ldrh	r3, [r7, #2]
 8006126:	4013      	ands	r3, r2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
 8006130:	e001      	b.n	8006136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006136:	7bfb      	ldrb	r3, [r7, #15]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	807b      	strh	r3, [r7, #2]
 8006150:	4613      	mov	r3, r2
 8006152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006154:	787b      	ldrb	r3, [r7, #1]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800615a:	887a      	ldrh	r2, [r7, #2]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006160:	e003      	b.n	800616a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006162:	887b      	ldrh	r3, [r7, #2]
 8006164:	041a      	lsls	r2, r3, #16
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	619a      	str	r2, [r3, #24]
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
	...

08006178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e12b      	b.n	80063e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7fe f9ee 	bl	8004580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2224      	movs	r2, #36	; 0x24
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061dc:	f002 fb9c 	bl	8008918 <HAL_RCC_GetPCLK1Freq>
 80061e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	4a81      	ldr	r2, [pc, #516]	; (80063ec <HAL_I2C_Init+0x274>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d807      	bhi.n	80061fc <HAL_I2C_Init+0x84>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4a80      	ldr	r2, [pc, #512]	; (80063f0 <HAL_I2C_Init+0x278>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	bf94      	ite	ls
 80061f4:	2301      	movls	r3, #1
 80061f6:	2300      	movhi	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	e006      	b.n	800620a <HAL_I2C_Init+0x92>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4a7d      	ldr	r2, [pc, #500]	; (80063f4 <HAL_I2C_Init+0x27c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	bf94      	ite	ls
 8006204:	2301      	movls	r3, #1
 8006206:	2300      	movhi	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e0e7      	b.n	80063e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4a78      	ldr	r2, [pc, #480]	; (80063f8 <HAL_I2C_Init+0x280>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	0c9b      	lsrs	r3, r3, #18
 800621c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	4a6a      	ldr	r2, [pc, #424]	; (80063ec <HAL_I2C_Init+0x274>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d802      	bhi.n	800624c <HAL_I2C_Init+0xd4>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	3301      	adds	r3, #1
 800624a:	e009      	b.n	8006260 <HAL_I2C_Init+0xe8>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	4a69      	ldr	r2, [pc, #420]	; (80063fc <HAL_I2C_Init+0x284>)
 8006258:	fba2 2303 	umull	r2, r3, r2, r3
 800625c:	099b      	lsrs	r3, r3, #6
 800625e:	3301      	adds	r3, #1
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	430b      	orrs	r3, r1
 8006266:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006272:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	495c      	ldr	r1, [pc, #368]	; (80063ec <HAL_I2C_Init+0x274>)
 800627c:	428b      	cmp	r3, r1
 800627e:	d819      	bhi.n	80062b4 <HAL_I2C_Init+0x13c>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	1e59      	subs	r1, r3, #1
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	fbb1 f3f3 	udiv	r3, r1, r3
 800628e:	1c59      	adds	r1, r3, #1
 8006290:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006294:	400b      	ands	r3, r1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <HAL_I2C_Init+0x138>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	1e59      	subs	r1, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80062a8:	3301      	adds	r3, #1
 80062aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ae:	e051      	b.n	8006354 <HAL_I2C_Init+0x1dc>
 80062b0:	2304      	movs	r3, #4
 80062b2:	e04f      	b.n	8006354 <HAL_I2C_Init+0x1dc>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d111      	bne.n	80062e0 <HAL_I2C_Init+0x168>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	1e58      	subs	r0, r3, #1
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6859      	ldr	r1, [r3, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	440b      	add	r3, r1
 80062ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ce:	3301      	adds	r3, #1
 80062d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bf0c      	ite	eq
 80062d8:	2301      	moveq	r3, #1
 80062da:	2300      	movne	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	e012      	b.n	8006306 <HAL_I2C_Init+0x18e>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1e58      	subs	r0, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	0099      	lsls	r1, r3, #2
 80062f0:	440b      	add	r3, r1
 80062f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062f6:	3301      	adds	r3, #1
 80062f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	bf0c      	ite	eq
 8006300:	2301      	moveq	r3, #1
 8006302:	2300      	movne	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <HAL_I2C_Init+0x196>
 800630a:	2301      	movs	r3, #1
 800630c:	e022      	b.n	8006354 <HAL_I2C_Init+0x1dc>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10e      	bne.n	8006334 <HAL_I2C_Init+0x1bc>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	1e58      	subs	r0, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6859      	ldr	r1, [r3, #4]
 800631e:	460b      	mov	r3, r1
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	440b      	add	r3, r1
 8006324:	fbb0 f3f3 	udiv	r3, r0, r3
 8006328:	3301      	adds	r3, #1
 800632a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800632e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006332:	e00f      	b.n	8006354 <HAL_I2C_Init+0x1dc>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	1e58      	subs	r0, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6859      	ldr	r1, [r3, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	440b      	add	r3, r1
 8006342:	0099      	lsls	r1, r3, #2
 8006344:	440b      	add	r3, r1
 8006346:	fbb0 f3f3 	udiv	r3, r0, r3
 800634a:	3301      	adds	r3, #1
 800634c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006350:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	6809      	ldr	r1, [r1, #0]
 8006358:	4313      	orrs	r3, r2
 800635a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69da      	ldr	r2, [r3, #28]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006382:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6911      	ldr	r1, [r2, #16]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	68d2      	ldr	r2, [r2, #12]
 800638e:	4311      	orrs	r1, r2
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	430b      	orrs	r3, r1
 8006396:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695a      	ldr	r2, [r3, #20]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	000186a0 	.word	0x000186a0
 80063f0:	001e847f 	.word	0x001e847f
 80063f4:	003d08ff 	.word	0x003d08ff
 80063f8:	431bde83 	.word	0x431bde83
 80063fc:	10624dd3 	.word	0x10624dd3

08006400 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	607a      	str	r2, [r7, #4]
 800640a:	461a      	mov	r2, r3
 800640c:	460b      	mov	r3, r1
 800640e:	817b      	strh	r3, [r7, #10]
 8006410:	4613      	mov	r3, r2
 8006412:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b20      	cmp	r3, #32
 8006422:	f040 8085 	bne.w	8006530 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006426:	4b46      	ldr	r3, [pc, #280]	; (8006540 <HAL_I2C_Master_Transmit_IT+0x140>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	08db      	lsrs	r3, r3, #3
 800642c:	4a45      	ldr	r2, [pc, #276]	; (8006544 <HAL_I2C_Master_Transmit_IT+0x144>)
 800642e:	fba2 2303 	umull	r2, r3, r2, r3
 8006432:	0a1a      	lsrs	r2, r3, #8
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	009a      	lsls	r2, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3b01      	subs	r3, #1
 8006444:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d116      	bne.n	800647a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f043 0220 	orr.w	r2, r3, #32
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e05b      	b.n	8006532 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b02      	cmp	r3, #2
 8006486:	d0db      	beq.n	8006440 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <HAL_I2C_Master_Transmit_IT+0x96>
 8006492:	2302      	movs	r3, #2
 8006494:	e04d      	b.n	8006532 <HAL_I2C_Master_Transmit_IT+0x132>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d007      	beq.n	80064bc <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0201 	orr.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2221      	movs	r2, #33	; 0x21
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2210      	movs	r2, #16
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	893a      	ldrh	r2, [r7, #8]
 80064ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4a13      	ldr	r2, [pc, #76]	; (8006548 <HAL_I2C_Master_Transmit_IT+0x148>)
 80064fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80064fe:	897a      	ldrh	r2, [r7, #10]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800651a:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800652a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	e000      	b.n	8006532 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	2000022c 	.word	0x2000022c
 8006544:	14f8b589 	.word	0x14f8b589
 8006548:	ffff0000 	.word	0xffff0000

0800654c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	607a      	str	r2, [r7, #4]
 8006556:	461a      	mov	r2, r3
 8006558:	460b      	mov	r3, r1
 800655a:	817b      	strh	r3, [r7, #10]
 800655c:	4613      	mov	r3, r2
 800655e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b20      	cmp	r3, #32
 800656e:	f040 808d 	bne.w	800668c <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006572:	4b4a      	ldr	r3, [pc, #296]	; (800669c <HAL_I2C_Master_Receive_IT+0x150>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	08db      	lsrs	r3, r3, #3
 8006578:	4a49      	ldr	r2, [pc, #292]	; (80066a0 <HAL_I2C_Master_Receive_IT+0x154>)
 800657a:	fba2 2303 	umull	r2, r3, r2, r3
 800657e:	0a1a      	lsrs	r2, r3, #8
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	009a      	lsls	r2, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	3b01      	subs	r3, #1
 8006590:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d116      	bne.n	80065c6 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	f043 0220 	orr.w	r2, r3, #32
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e063      	b.n	800668e <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d0db      	beq.n	800658c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_I2C_Master_Receive_IT+0x96>
 80065de:	2302      	movs	r3, #2
 80065e0:	e055      	b.n	800668e <HAL_I2C_Master_Receive_IT+0x142>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d007      	beq.n	8006608 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006616:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2222      	movs	r2, #34	; 0x22
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2210      	movs	r2, #16
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	893a      	ldrh	r2, [r7, #8]
 8006638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4a17      	ldr	r2, [pc, #92]	; (80066a4 <HAL_I2C_Master_Receive_IT+0x158>)
 8006648:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800664a:	897a      	ldrh	r2, [r7, #10]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006666:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006676:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006686:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	e000      	b.n	800668e <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800668c:	2302      	movs	r3, #2
  }
}
 800668e:	4618      	mov	r0, r3
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	2000022c 	.word	0x2000022c
 80066a0:	14f8b589 	.word	0x14f8b589
 80066a4:	ffff0000 	.word	0xffff0000

080066a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d003      	beq.n	80066e0 <HAL_I2C_EV_IRQHandler+0x38>
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	2b40      	cmp	r3, #64	; 0x40
 80066dc:	f040 80c1 	bne.w	8006862 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10d      	bne.n	8006716 <HAL_I2C_EV_IRQHandler+0x6e>
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006700:	d003      	beq.n	800670a <HAL_I2C_EV_IRQHandler+0x62>
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006708:	d101      	bne.n	800670e <HAL_I2C_EV_IRQHandler+0x66>
 800670a:	2301      	movs	r3, #1
 800670c:	e000      	b.n	8006710 <HAL_I2C_EV_IRQHandler+0x68>
 800670e:	2300      	movs	r3, #0
 8006710:	2b01      	cmp	r3, #1
 8006712:	f000 8132 	beq.w	800697a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00c      	beq.n	800673a <HAL_I2C_EV_IRQHandler+0x92>
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	0a5b      	lsrs	r3, r3, #9
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d006      	beq.n	800673a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 fc67 	bl	8008000 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fd6f 	bl	8007216 <I2C_Master_SB>
 8006738:	e092      	b.n	8006860 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	08db      	lsrs	r3, r3, #3
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <HAL_I2C_EV_IRQHandler+0xb2>
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	0a5b      	lsrs	r3, r3, #9
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fde5 	bl	8007322 <I2C_Master_ADD10>
 8006758:	e082      	b.n	8006860 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	085b      	lsrs	r3, r3, #1
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <HAL_I2C_EV_IRQHandler+0xd2>
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	0a5b      	lsrs	r3, r3, #9
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fdff 	bl	8007376 <I2C_Master_ADDR>
 8006778:	e072      	b.n	8006860 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	089b      	lsrs	r3, r3, #2
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d03b      	beq.n	80067fe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006794:	f000 80f3 	beq.w	800697e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	09db      	lsrs	r3, r3, #7
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00f      	beq.n	80067c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	0a9b      	lsrs	r3, r3, #10
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d009      	beq.n	80067c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	089b      	lsrs	r3, r3, #2
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d103      	bne.n	80067c4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f9df 	bl	8006b80 <I2C_MasterTransmit_TXE>
 80067c2:	e04d      	b.n	8006860 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	089b      	lsrs	r3, r3, #2
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 80d6 	beq.w	800697e <HAL_I2C_EV_IRQHandler+0x2d6>
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	0a5b      	lsrs	r3, r3, #9
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80cf 	beq.w	800697e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80067e0:	7bbb      	ldrb	r3, [r7, #14]
 80067e2:	2b21      	cmp	r3, #33	; 0x21
 80067e4:	d103      	bne.n	80067ee <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fa66 	bl	8006cb8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067ec:	e0c7      	b.n	800697e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	f040 80c4 	bne.w	800697e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fad4 	bl	8006da4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067fc:	e0bf      	b.n	800697e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800680c:	f000 80b7 	beq.w	800697e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	099b      	lsrs	r3, r3, #6
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00f      	beq.n	800683c <HAL_I2C_EV_IRQHandler+0x194>
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	0a9b      	lsrs	r3, r3, #10
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b00      	cmp	r3, #0
 8006826:	d009      	beq.n	800683c <HAL_I2C_EV_IRQHandler+0x194>
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	089b      	lsrs	r3, r3, #2
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d103      	bne.n	800683c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fb49 	bl	8006ecc <I2C_MasterReceive_RXNE>
 800683a:	e011      	b.n	8006860 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	089b      	lsrs	r3, r3, #2
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 809a 	beq.w	800697e <HAL_I2C_EV_IRQHandler+0x2d6>
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	0a5b      	lsrs	r3, r3, #9
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 8093 	beq.w	800697e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fbf2 	bl	8007042 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800685e:	e08e      	b.n	800697e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006860:	e08d      	b.n	800697e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	61fb      	str	r3, [r7, #28]
 8006872:	e007      	b.n	8006884 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d012      	beq.n	80068b6 <HAL_I2C_EV_IRQHandler+0x20e>
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	0a5b      	lsrs	r3, r3, #9
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00c      	beq.n	80068b6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80068ac:	69b9      	ldr	r1, [r7, #24]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 ffb0 	bl	8007814 <I2C_Slave_ADDR>
 80068b4:	e066      	b.n	8006984 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d009      	beq.n	80068d6 <HAL_I2C_EV_IRQHandler+0x22e>
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	0a5b      	lsrs	r3, r3, #9
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 ffea 	bl	80078a8 <I2C_Slave_STOPF>
 80068d4:	e056      	b.n	8006984 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	2b21      	cmp	r3, #33	; 0x21
 80068da:	d002      	beq.n	80068e2 <HAL_I2C_EV_IRQHandler+0x23a>
 80068dc:	7bbb      	ldrb	r3, [r7, #14]
 80068de:	2b29      	cmp	r3, #41	; 0x29
 80068e0:	d125      	bne.n	800692e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	09db      	lsrs	r3, r3, #7
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00f      	beq.n	800690e <HAL_I2C_EV_IRQHandler+0x266>
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	0a9b      	lsrs	r3, r3, #10
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d009      	beq.n	800690e <HAL_I2C_EV_IRQHandler+0x266>
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	089b      	lsrs	r3, r3, #2
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d103      	bne.n	800690e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fec6 	bl	8007698 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800690c:	e039      	b.n	8006982 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	089b      	lsrs	r3, r3, #2
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d033      	beq.n	8006982 <HAL_I2C_EV_IRQHandler+0x2da>
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	0a5b      	lsrs	r3, r3, #9
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d02d      	beq.n	8006982 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fef3 	bl	8007712 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800692c:	e029      	b.n	8006982 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	099b      	lsrs	r3, r3, #6
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00f      	beq.n	800695a <HAL_I2C_EV_IRQHandler+0x2b2>
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	0a9b      	lsrs	r3, r3, #10
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d009      	beq.n	800695a <HAL_I2C_EV_IRQHandler+0x2b2>
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	089b      	lsrs	r3, r3, #2
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d103      	bne.n	800695a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fefe 	bl	8007754 <I2C_SlaveReceive_RXNE>
 8006958:	e014      	b.n	8006984 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	089b      	lsrs	r3, r3, #2
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00e      	beq.n	8006984 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	0a5b      	lsrs	r3, r3, #9
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d008      	beq.n	8006984 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 ff2c 	bl	80077d0 <I2C_SlaveReceive_BTF>
 8006978:	e004      	b.n	8006984 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800697a:	bf00      	nop
 800697c:	e002      	b.n	8006984 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800697e:	bf00      	nop
 8006980:	e000      	b.n	8006984 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006982:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006984:	3720      	adds	r7, #32
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b08a      	sub	sp, #40	; 0x28
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80069a2:	2300      	movs	r3, #0
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069ac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	0a1b      	lsrs	r3, r3, #8
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00e      	beq.n	80069d8 <HAL_I2C_ER_IRQHandler+0x4e>
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	0a1b      	lsrs	r3, r3, #8
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d008      	beq.n	80069d8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	f043 0301 	orr.w	r3, r3, #1
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069d6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	0a5b      	lsrs	r3, r3, #9
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00e      	beq.n	8006a02 <HAL_I2C_ER_IRQHandler+0x78>
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	0a1b      	lsrs	r3, r3, #8
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d008      	beq.n	8006a02 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	f043 0302 	orr.w	r3, r3, #2
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006a00:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	0a9b      	lsrs	r3, r3, #10
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d03f      	beq.n	8006a8e <HAL_I2C_ER_IRQHandler+0x104>
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	0a1b      	lsrs	r3, r3, #8
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d039      	beq.n	8006a8e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006a1a:	7efb      	ldrb	r3, [r7, #27]
 8006a1c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006a34:	7ebb      	ldrb	r3, [r7, #26]
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	d112      	bne.n	8006a60 <HAL_I2C_ER_IRQHandler+0xd6>
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10f      	bne.n	8006a60 <HAL_I2C_ER_IRQHandler+0xd6>
 8006a40:	7cfb      	ldrb	r3, [r7, #19]
 8006a42:	2b21      	cmp	r3, #33	; 0x21
 8006a44:	d008      	beq.n	8006a58 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006a46:	7cfb      	ldrb	r3, [r7, #19]
 8006a48:	2b29      	cmp	r3, #41	; 0x29
 8006a4a:	d005      	beq.n	8006a58 <HAL_I2C_ER_IRQHandler+0xce>
 8006a4c:	7cfb      	ldrb	r3, [r7, #19]
 8006a4e:	2b28      	cmp	r3, #40	; 0x28
 8006a50:	d106      	bne.n	8006a60 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b21      	cmp	r3, #33	; 0x21
 8006a56:	d103      	bne.n	8006a60 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 f855 	bl	8007b08 <I2C_Slave_AF>
 8006a5e:	e016      	b.n	8006a8e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a68:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	f043 0304 	orr.w	r3, r3, #4
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006a72:	7efb      	ldrb	r3, [r7, #27]
 8006a74:	2b10      	cmp	r3, #16
 8006a76:	d002      	beq.n	8006a7e <HAL_I2C_ER_IRQHandler+0xf4>
 8006a78:	7efb      	ldrb	r3, [r7, #27]
 8006a7a:	2b40      	cmp	r3, #64	; 0x40
 8006a7c:	d107      	bne.n	8006a8e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	0adb      	lsrs	r3, r3, #11
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00e      	beq.n	8006ab8 <HAL_I2C_ER_IRQHandler+0x12e>
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	0a1b      	lsrs	r3, r3, #8
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d008      	beq.n	8006ab8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	f043 0308 	orr.w	r3, r3, #8
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006ab6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d008      	beq.n	8006ad0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 f88c 	bl	8007be8 <I2C_ITError>
  }
}
 8006ad0:	bf00      	nop
 8006ad2:	3728      	adds	r7, #40	; 0x28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b8e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b96:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d150      	bne.n	8006c48 <I2C_MasterTransmit_TXE+0xc8>
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	2b21      	cmp	r3, #33	; 0x21
 8006baa:	d14d      	bne.n	8006c48 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d01d      	beq.n	8006bee <I2C_MasterTransmit_TXE+0x6e>
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	d01a      	beq.n	8006bee <I2C_MasterTransmit_TXE+0x6e>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bbe:	d016      	beq.n	8006bee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2211      	movs	r2, #17
 8006bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fd fbe8 	bl	80043bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bec:	e060      	b.n	8006cb0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bfc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c0c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b40      	cmp	r3, #64	; 0x40
 8006c26:	d107      	bne.n	8006c38 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff ff7d 	bl	8006b30 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c36:	e03b      	b.n	8006cb0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7fd fbbb 	bl	80043bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c46:	e033      	b.n	8006cb0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	2b21      	cmp	r3, #33	; 0x21
 8006c4c:	d005      	beq.n	8006c5a <I2C_MasterTransmit_TXE+0xda>
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
 8006c50:	2b40      	cmp	r3, #64	; 0x40
 8006c52:	d12d      	bne.n	8006cb0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
 8006c56:	2b22      	cmp	r3, #34	; 0x22
 8006c58:	d12a      	bne.n	8006cb0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d108      	bne.n	8006c76 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c72:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006c74:	e01c      	b.n	8006cb0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b40      	cmp	r3, #64	; 0x40
 8006c80:	d103      	bne.n	8006c8a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f88e 	bl	8006da4 <I2C_MemoryTransmit_TXE_BTF>
}
 8006c88:	e012      	b.n	8006cb0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	781a      	ldrb	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006cae:	e7ff      	b.n	8006cb0 <I2C_MasterTransmit_TXE+0x130>
 8006cb0:	bf00      	nop
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b21      	cmp	r3, #33	; 0x21
 8006cd0:	d164      	bne.n	8006d9c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d012      	beq.n	8006d02 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006d00:	e04c      	b.n	8006d9c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d01d      	beq.n	8006d44 <I2C_MasterTransmit_BTF+0x8c>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d01a      	beq.n	8006d44 <I2C_MasterTransmit_BTF+0x8c>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d14:	d016      	beq.n	8006d44 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d24:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2211      	movs	r2, #17
 8006d2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7fd fb3d 	bl	80043bc <HAL_I2C_MasterTxCpltCallback>
}
 8006d42:	e02b      	b.n	8006d9c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d52:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d62:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b40      	cmp	r3, #64	; 0x40
 8006d7c:	d107      	bne.n	8006d8e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff fed2 	bl	8006b30 <HAL_I2C_MemTxCpltCallback>
}
 8006d8c:	e006      	b.n	8006d9c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fd fb10 	bl	80043bc <HAL_I2C_MasterTxCpltCallback>
}
 8006d9c:	bf00      	nop
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d11d      	bne.n	8006df8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d10b      	bne.n	8006ddc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd4:	1c9a      	adds	r2, r3, #2
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006dda:	e073      	b.n	8006ec4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	121b      	asrs	r3, r3, #8
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006df6:	e065      	b.n	8006ec4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d10b      	bne.n	8006e18 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e16:	e055      	b.n	8006ec4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d151      	bne.n	8006ec4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
 8006e22:	2b22      	cmp	r3, #34	; 0x22
 8006e24:	d10d      	bne.n	8006e42 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e34:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e40:	e040      	b.n	8006ec4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d015      	beq.n	8006e78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	2b21      	cmp	r3, #33	; 0x21
 8006e50:	d112      	bne.n	8006e78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006e76:	e025      	b.n	8006ec4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d120      	bne.n	8006ec4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
 8006e84:	2b21      	cmp	r3, #33	; 0x21
 8006e86:	d11d      	bne.n	8006ec4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e96:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ea6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7ff fe36 	bl	8006b30 <HAL_I2C_MemTxCpltCallback>
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b22      	cmp	r3, #34	; 0x22
 8006ede:	f040 80ac 	bne.w	800703a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d921      	bls.n	8006f34 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	691a      	ldr	r2, [r3, #16]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	b2d2      	uxtb	r2, r2
 8006efc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	f040 808c 	bne.w	800703a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f30:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006f32:	e082      	b.n	800703a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d075      	beq.n	8007028 <I2C_MasterReceive_RXNE+0x15c>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d002      	beq.n	8006f48 <I2C_MasterReceive_RXNE+0x7c>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d16f      	bne.n	8007028 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 f827 	bl	8007f9c <I2C_WaitOnSTOPRequestThroughIT>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d142      	bne.n	8006fda <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f62:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f72:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b40      	cmp	r3, #64	; 0x40
 8006fac:	d10a      	bne.n	8006fc4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7ff fdc1 	bl	8006b44 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006fc2:	e03a      	b.n	800703a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2212      	movs	r2, #18
 8006fd0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fd fa02 	bl	80043dc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006fd8:	e02f      	b.n	800703a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fe8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	691a      	ldr	r2, [r3, #16]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	b2d2      	uxtb	r2, r2
 8006ff6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007006:	b29b      	uxth	r3, r3
 8007008:	3b01      	subs	r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff fd99 	bl	8006b58 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007026:	e008      	b.n	800703a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007036:	605a      	str	r2, [r3, #4]
}
 8007038:	e7ff      	b.n	800703a <I2C_MasterReceive_RXNE+0x16e>
 800703a:	bf00      	nop
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007054:	b29b      	uxth	r3, r3
 8007056:	2b04      	cmp	r3, #4
 8007058:	d11b      	bne.n	8007092 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007068:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691a      	ldr	r2, [r3, #16]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	b2d2      	uxtb	r2, r2
 8007076:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	b29a      	uxth	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007090:	e0bd      	b.n	800720e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b03      	cmp	r3, #3
 800709a:	d129      	bne.n	80070f0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070aa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d00a      	beq.n	80070c8 <I2C_MasterReceive_BTF+0x86>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d007      	beq.n	80070c8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070c6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691a      	ldr	r2, [r3, #16]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80070ee:	e08e      	b.n	800720e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d176      	bne.n	80071e8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d002      	beq.n	8007106 <I2C_MasterReceive_BTF+0xc4>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b10      	cmp	r3, #16
 8007104:	d108      	bne.n	8007118 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	e019      	b.n	800714c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b04      	cmp	r3, #4
 800711c:	d002      	beq.n	8007124 <I2C_MasterReceive_BTF+0xe2>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b02      	cmp	r3, #2
 8007122:	d108      	bne.n	8007136 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	e00a      	b.n	800714c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b10      	cmp	r3, #16
 800713a:	d007      	beq.n	800714c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800714a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691a      	ldr	r2, [r3, #16]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	b2d2      	uxtb	r2, r2
 8007158:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007168:	b29b      	uxth	r3, r3
 800716a:	3b01      	subs	r3, #1
 800716c:	b29a      	uxth	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691a      	ldr	r2, [r3, #16]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	b2d2      	uxtb	r2, r2
 800717e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718e:	b29b      	uxth	r3, r3
 8007190:	3b01      	subs	r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80071a6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b40      	cmp	r3, #64	; 0x40
 80071ba:	d10a      	bne.n	80071d2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff fcba 	bl	8006b44 <HAL_I2C_MemRxCpltCallback>
}
 80071d0:	e01d      	b.n	800720e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2212      	movs	r2, #18
 80071de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7fd f8fb 	bl	80043dc <HAL_I2C_MasterRxCpltCallback>
}
 80071e6:	e012      	b.n	800720e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	691a      	ldr	r2, [r3, #16]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800720e:	bf00      	nop
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	d117      	bne.n	800725a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722e:	2b00      	cmp	r3, #0
 8007230:	d109      	bne.n	8007246 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007236:	b2db      	uxtb	r3, r3
 8007238:	461a      	mov	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007242:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007244:	e067      	b.n	8007316 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724a:	b2db      	uxtb	r3, r3
 800724c:	f043 0301 	orr.w	r3, r3, #1
 8007250:	b2da      	uxtb	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	611a      	str	r2, [r3, #16]
}
 8007258:	e05d      	b.n	8007316 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007262:	d133      	bne.n	80072cc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b21      	cmp	r3, #33	; 0x21
 800726e:	d109      	bne.n	8007284 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007274:	b2db      	uxtb	r3, r3
 8007276:	461a      	mov	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007280:	611a      	str	r2, [r3, #16]
 8007282:	e008      	b.n	8007296 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007288:	b2db      	uxtb	r3, r3
 800728a:	f043 0301 	orr.w	r3, r3, #1
 800728e:	b2da      	uxtb	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729a:	2b00      	cmp	r3, #0
 800729c:	d004      	beq.n	80072a8 <I2C_Master_SB+0x92>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d108      	bne.n	80072ba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d032      	beq.n	8007316 <I2C_Master_SB+0x100>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d02d      	beq.n	8007316 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072c8:	605a      	str	r2, [r3, #4]
}
 80072ca:	e024      	b.n	8007316 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10e      	bne.n	80072f2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d8:	b29b      	uxth	r3, r3
 80072da:	11db      	asrs	r3, r3, #7
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f003 0306 	and.w	r3, r3, #6
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f063 030f 	orn	r3, r3, #15
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	611a      	str	r2, [r3, #16]
}
 80072f0:	e011      	b.n	8007316 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d10d      	bne.n	8007316 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fe:	b29b      	uxth	r3, r3
 8007300:	11db      	asrs	r3, r3, #7
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f003 0306 	and.w	r3, r3, #6
 8007308:	b2db      	uxtb	r3, r3
 800730a:	f063 030e 	orn	r3, r3, #14
 800730e:	b2da      	uxtb	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	611a      	str	r2, [r3, #16]
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732e:	b2da      	uxtb	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <I2C_Master_ADD10+0x26>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d108      	bne.n	800735a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00c      	beq.n	800736a <I2C_Master_ADD10+0x48>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d007      	beq.n	800736a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007368:	605a      	str	r2, [r3, #4]
  }
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007376:	b480      	push	{r7}
 8007378:	b091      	sub	sp, #68	; 0x44
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007384:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007392:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b22      	cmp	r3, #34	; 0x22
 800739e:	f040 8169 	bne.w	8007674 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10f      	bne.n	80073ca <I2C_Master_ADDR+0x54>
 80073aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073ae:	2b40      	cmp	r3, #64	; 0x40
 80073b0:	d10b      	bne.n	80073ca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b2:	2300      	movs	r3, #0
 80073b4:	633b      	str	r3, [r7, #48]	; 0x30
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	633b      	str	r3, [r7, #48]	; 0x30
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	633b      	str	r3, [r7, #48]	; 0x30
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	e160      	b.n	800768c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d11d      	bne.n	800740e <I2C_Master_ADDR+0x98>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073da:	d118      	bne.n	800740e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073dc:	2300      	movs	r3, #0
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007400:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	651a      	str	r2, [r3, #80]	; 0x50
 800740c:	e13e      	b.n	800768c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d113      	bne.n	8007440 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007418:	2300      	movs	r3, #0
 800741a:	62bb      	str	r3, [r7, #40]	; 0x28
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	62bb      	str	r3, [r7, #40]	; 0x28
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	62bb      	str	r3, [r7, #40]	; 0x28
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e115      	b.n	800766c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b01      	cmp	r3, #1
 8007448:	f040 808a 	bne.w	8007560 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007452:	d137      	bne.n	80074c4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007462:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800746e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007472:	d113      	bne.n	800749c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007482:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007484:	2300      	movs	r3, #0
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	e0e7      	b.n	800766c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800749c:	2300      	movs	r3, #0
 800749e:	623b      	str	r3, [r7, #32]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	623b      	str	r3, [r7, #32]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	623b      	str	r3, [r7, #32]
 80074b0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	e0d3      	b.n	800766c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	2b08      	cmp	r3, #8
 80074c8:	d02e      	beq.n	8007528 <I2C_Master_ADDR+0x1b2>
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d02b      	beq.n	8007528 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80074d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d2:	2b12      	cmp	r3, #18
 80074d4:	d102      	bne.n	80074dc <I2C_Master_ADDR+0x166>
 80074d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d125      	bne.n	8007528 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80074dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d00e      	beq.n	8007500 <I2C_Master_ADDR+0x18a>
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d00b      	beq.n	8007500 <I2C_Master_ADDR+0x18a>
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	2b10      	cmp	r3, #16
 80074ec:	d008      	beq.n	8007500 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	e007      	b.n	8007510 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800750e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007510:	2300      	movs	r3, #0
 8007512:	61fb      	str	r3, [r7, #28]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	61fb      	str	r3, [r7, #28]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	e0a1      	b.n	800766c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007536:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007538:	2300      	movs	r3, #0
 800753a:	61bb      	str	r3, [r7, #24]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	61bb      	str	r3, [r7, #24]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	e085      	b.n	800766c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d14d      	bne.n	8007606 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800756a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756c:	2b04      	cmp	r3, #4
 800756e:	d016      	beq.n	800759e <I2C_Master_ADDR+0x228>
 8007570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007572:	2b02      	cmp	r3, #2
 8007574:	d013      	beq.n	800759e <I2C_Master_ADDR+0x228>
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	2b10      	cmp	r3, #16
 800757a:	d010      	beq.n	800759e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800758a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e007      	b.n	80075ae <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075ac:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075bc:	d117      	bne.n	80075ee <I2C_Master_ADDR+0x278>
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075c4:	d00b      	beq.n	80075de <I2C_Master_ADDR+0x268>
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d008      	beq.n	80075de <I2C_Master_ADDR+0x268>
 80075cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ce:	2b08      	cmp	r3, #8
 80075d0:	d005      	beq.n	80075de <I2C_Master_ADDR+0x268>
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	2b10      	cmp	r3, #16
 80075d6:	d002      	beq.n	80075de <I2C_Master_ADDR+0x268>
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	2b20      	cmp	r3, #32
 80075dc:	d107      	bne.n	80075ee <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	e032      	b.n	800766c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007614:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007624:	d117      	bne.n	8007656 <I2C_Master_ADDR+0x2e0>
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800762c:	d00b      	beq.n	8007646 <I2C_Master_ADDR+0x2d0>
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	2b01      	cmp	r3, #1
 8007632:	d008      	beq.n	8007646 <I2C_Master_ADDR+0x2d0>
 8007634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007636:	2b08      	cmp	r3, #8
 8007638:	d005      	beq.n	8007646 <I2C_Master_ADDR+0x2d0>
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	2b10      	cmp	r3, #16
 800763e:	d002      	beq.n	8007646 <I2C_Master_ADDR+0x2d0>
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	2b20      	cmp	r3, #32
 8007644:	d107      	bne.n	8007656 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007654:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007656:	2300      	movs	r3, #0
 8007658:	613b      	str	r3, [r7, #16]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	613b      	str	r3, [r7, #16]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	613b      	str	r3, [r7, #16]
 800766a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007672:	e00b      	b.n	800768c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007674:	2300      	movs	r3, #0
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	68fb      	ldr	r3, [r7, #12]
}
 800768a:	e7ff      	b.n	800768c <I2C_Master_ADDR+0x316>
 800768c:	bf00      	nop
 800768e:	3744      	adds	r7, #68	; 0x44
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d02b      	beq.n	800770a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b6:	781a      	ldrb	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d114      	bne.n	800770a <I2C_SlaveTransmit_TXE+0x72>
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	2b29      	cmp	r3, #41	; 0x29
 80076e4:	d111      	bne.n	800770a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076f4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2221      	movs	r2, #33	; 0x21
 80076fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2228      	movs	r2, #40	; 0x28
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7ff f9e7 	bl	8006ad8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800770a:	bf00      	nop
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d011      	beq.n	8007748 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b01      	subs	r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007762:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d02c      	beq.n	80077c8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	691a      	ldr	r2, [r3, #16]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	b2d2      	uxtb	r2, r2
 800777a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778a:	b29b      	uxth	r3, r3
 800778c:	3b01      	subs	r3, #1
 800778e:	b29a      	uxth	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d114      	bne.n	80077c8 <I2C_SlaveReceive_RXNE+0x74>
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	2b2a      	cmp	r3, #42	; 0x2a
 80077a2:	d111      	bne.n	80077c8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2222      	movs	r2, #34	; 0x22
 80077b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2228      	movs	r2, #40	; 0x28
 80077be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7ff f992 	bl	8006aec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80077c8:	bf00      	nop
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077dc:	b29b      	uxth	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d012      	beq.n	8007808 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	691a      	ldr	r2, [r3, #16]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	b2d2      	uxtb	r2, r2
 80077ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800781e:	2300      	movs	r3, #0
 8007820:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007828:	b2db      	uxtb	r3, r3
 800782a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800782e:	2b28      	cmp	r3, #40	; 0x28
 8007830:	d127      	bne.n	8007882 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007840:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	089b      	lsrs	r3, r3, #2
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800784e:	2301      	movs	r3, #1
 8007850:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	09db      	lsrs	r3, r3, #7
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d103      	bne.n	8007866 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	81bb      	strh	r3, [r7, #12]
 8007864:	e002      	b.n	800786c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007874:	89ba      	ldrh	r2, [r7, #12]
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff f940 	bl	8006b00 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007880:	e00e      	b.n	80078a0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007882:	2300      	movs	r3, #0
 8007884:	60bb      	str	r3, [r7, #8]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	60bb      	str	r3, [r7, #8]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	60bb      	str	r3, [r7, #8]
 8007896:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80078a0:	bf00      	nop
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80078c8:	2300      	movs	r3, #0
 80078ca:	60bb      	str	r3, [r7, #8]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	60bb      	str	r3, [r7, #8]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0201 	orr.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007904:	d172      	bne.n	80079ec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	2b22      	cmp	r3, #34	; 0x22
 800790a:	d002      	beq.n	8007912 <I2C_Slave_STOPF+0x6a>
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	2b2a      	cmp	r3, #42	; 0x2a
 8007910:	d135      	bne.n	800797e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	b29a      	uxth	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	f043 0204 	orr.w	r2, r3, #4
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007944:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	4618      	mov	r0, r3
 800794c:	f7fe f964 	bl	8005c18 <HAL_DMA_GetState>
 8007950:	4603      	mov	r3, r0
 8007952:	2b01      	cmp	r3, #1
 8007954:	d049      	beq.n	80079ea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795a:	4a69      	ldr	r2, [pc, #420]	; (8007b00 <I2C_Slave_STOPF+0x258>)
 800795c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007962:	4618      	mov	r0, r3
 8007964:	f7fd ffac 	bl	80058c0 <HAL_DMA_Abort_IT>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d03d      	beq.n	80079ea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007978:	4610      	mov	r0, r2
 800797a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800797c:	e035      	b.n	80079ea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	b29a      	uxth	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007990:	b29b      	uxth	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d005      	beq.n	80079a2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	f043 0204 	orr.w	r2, r3, #4
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe f92e 	bl	8005c18 <HAL_DMA_GetState>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d014      	beq.n	80079ec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c6:	4a4e      	ldr	r2, [pc, #312]	; (8007b00 <I2C_Slave_STOPF+0x258>)
 80079c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fd ff76 	bl	80058c0 <HAL_DMA_Abort_IT>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d008      	beq.n	80079ec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80079e4:	4610      	mov	r0, r2
 80079e6:	4798      	blx	r3
 80079e8:	e000      	b.n	80079ec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079ea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d03e      	beq.n	8007a74 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b04      	cmp	r3, #4
 8007a02:	d112      	bne.n	8007a2a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	691a      	ldr	r2, [r3, #16]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	b2d2      	uxtb	r2, r2
 8007a10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	3b01      	subs	r3, #1
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a34:	2b40      	cmp	r3, #64	; 0x40
 8007a36:	d112      	bne.n	8007a5e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	691a      	ldr	r2, [r3, #16]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6c:	f043 0204 	orr.w	r2, r3, #4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f8b3 	bl	8007be8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007a82:	e039      	b.n	8007af8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	2b2a      	cmp	r3, #42	; 0x2a
 8007a88:	d109      	bne.n	8007a9e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2228      	movs	r2, #40	; 0x28
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff f827 	bl	8006aec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b28      	cmp	r3, #40	; 0x28
 8007aa8:	d111      	bne.n	8007ace <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a15      	ldr	r2, [pc, #84]	; (8007b04 <I2C_Slave_STOPF+0x25c>)
 8007aae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff f828 	bl	8006b1c <HAL_I2C_ListenCpltCallback>
}
 8007acc:	e014      	b.n	8007af8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad2:	2b22      	cmp	r3, #34	; 0x22
 8007ad4:	d002      	beq.n	8007adc <I2C_Slave_STOPF+0x234>
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
 8007ad8:	2b22      	cmp	r3, #34	; 0x22
 8007ada:	d10d      	bne.n	8007af8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7fe fffa 	bl	8006aec <HAL_I2C_SlaveRxCpltCallback>
}
 8007af8:	bf00      	nop
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	08007e4d 	.word	0x08007e4d
 8007b04:	ffff0000 	.word	0xffff0000

08007b08 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b16:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b08      	cmp	r3, #8
 8007b22:	d002      	beq.n	8007b2a <I2C_Slave_AF+0x22>
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b20      	cmp	r3, #32
 8007b28:	d129      	bne.n	8007b7e <I2C_Slave_AF+0x76>
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	2b28      	cmp	r3, #40	; 0x28
 8007b2e:	d126      	bne.n	8007b7e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a2c      	ldr	r2, [pc, #176]	; (8007be4 <I2C_Slave_AF+0xdc>)
 8007b34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b44:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b4e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b5e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7fe ffd0 	bl	8006b1c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007b7c:	e02e      	b.n	8007bdc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b21      	cmp	r3, #33	; 0x21
 8007b82:	d126      	bne.n	8007bd2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a17      	ldr	r2, [pc, #92]	; (8007be4 <I2C_Slave_AF+0xdc>)
 8007b88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2221      	movs	r2, #33	; 0x21
 8007b8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2220      	movs	r2, #32
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bb8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bc8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fe ff84 	bl	8006ad8 <HAL_I2C_SlaveTxCpltCallback>
}
 8007bd0:	e004      	b.n	8007bdc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bda:	615a      	str	r2, [r3, #20]
}
 8007bdc:	bf00      	nop
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	ffff0000 	.word	0xffff0000

08007be8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bfe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	2b10      	cmp	r3, #16
 8007c04:	d002      	beq.n	8007c0c <I2C_ITError+0x24>
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	2b40      	cmp	r3, #64	; 0x40
 8007c0a:	d10a      	bne.n	8007c22 <I2C_ITError+0x3a>
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	2b22      	cmp	r3, #34	; 0x22
 8007c10:	d107      	bne.n	8007c22 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c20:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
 8007c24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c28:	2b28      	cmp	r3, #40	; 0x28
 8007c2a:	d107      	bne.n	8007c3c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2228      	movs	r2, #40	; 0x28
 8007c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c3a:	e015      	b.n	8007c68 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c4a:	d00a      	beq.n	8007c62 <I2C_ITError+0x7a>
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	2b60      	cmp	r3, #96	; 0x60
 8007c50:	d007      	beq.n	8007c62 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c76:	d162      	bne.n	8007d3e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c86:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d020      	beq.n	8007cd8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9a:	4a6a      	ldr	r2, [pc, #424]	; (8007e44 <I2C_ITError+0x25c>)
 8007c9c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fd fe0c 	bl	80058c0 <HAL_DMA_Abort_IT>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 8089 	beq.w	8007dc2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0201 	bic.w	r2, r2, #1
 8007cbe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	4798      	blx	r3
 8007cd6:	e074      	b.n	8007dc2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	4a59      	ldr	r2, [pc, #356]	; (8007e44 <I2C_ITError+0x25c>)
 8007cde:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fd fdeb 	bl	80058c0 <HAL_DMA_Abort_IT>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d068      	beq.n	8007dc2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfa:	2b40      	cmp	r3, #64	; 0x40
 8007cfc:	d10b      	bne.n	8007d16 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	691a      	ldr	r2, [r3, #16]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	b2d2      	uxtb	r2, r2
 8007d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d10:	1c5a      	adds	r2, r3, #1
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0201 	bic.w	r2, r2, #1
 8007d24:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
 8007d3c:	e041      	b.n	8007dc2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b60      	cmp	r3, #96	; 0x60
 8007d48:	d125      	bne.n	8007d96 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d62:	2b40      	cmp	r3, #64	; 0x40
 8007d64:	d10b      	bne.n	8007d7e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	691a      	ldr	r2, [r3, #16]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	b2d2      	uxtb	r2, r2
 8007d72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0201 	bic.w	r2, r2, #1
 8007d8c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7fe feec 	bl	8006b6c <HAL_I2C_AbortCpltCallback>
 8007d94:	e015      	b.n	8007dc2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da0:	2b40      	cmp	r3, #64	; 0x40
 8007da2:	d10b      	bne.n	8007dbc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	691a      	ldr	r2, [r3, #16]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	b2d2      	uxtb	r2, r2
 8007db0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7fe fecb 	bl	8006b58 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10e      	bne.n	8007df0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d109      	bne.n	8007df0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d104      	bne.n	8007df0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007dfe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e06:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d113      	bne.n	8007e3c <I2C_ITError+0x254>
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	2b28      	cmp	r3, #40	; 0x28
 8007e18:	d110      	bne.n	8007e3c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a0a      	ldr	r2, [pc, #40]	; (8007e48 <I2C_ITError+0x260>)
 8007e1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7fe fe70 	bl	8006b1c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007e3c:	bf00      	nop
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	08007e4d 	.word	0x08007e4d
 8007e48:	ffff0000 	.word	0xffff0000

08007e4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e54:	2300      	movs	r3, #0
 8007e56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007e66:	4b4b      	ldr	r3, [pc, #300]	; (8007f94 <I2C_DMAAbort+0x148>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	08db      	lsrs	r3, r3, #3
 8007e6c:	4a4a      	ldr	r2, [pc, #296]	; (8007f98 <I2C_DMAAbort+0x14c>)
 8007e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e72:	0a1a      	lsrs	r2, r3, #8
 8007e74:	4613      	mov	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	00da      	lsls	r2, r3, #3
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d106      	bne.n	8007e94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	f043 0220 	orr.w	r2, r3, #32
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007e92:	e00a      	b.n	8007eaa <I2C_DMAAbort+0x5e>
    }
    count--;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ea8:	d0ea      	beq.n	8007e80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	2200      	movs	r2, #0
 8007ede:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eec:	2200      	movs	r2, #0
 8007eee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efc:	2200      	movs	r2, #0
 8007efe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0201 	bic.w	r2, r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b60      	cmp	r3, #96	; 0x60
 8007f1a:	d10e      	bne.n	8007f3a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f32:	6978      	ldr	r0, [r7, #20]
 8007f34:	f7fe fe1a 	bl	8006b6c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f38:	e027      	b.n	8007f8a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f3a:	7cfb      	ldrb	r3, [r7, #19]
 8007f3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f40:	2b28      	cmp	r3, #40	; 0x28
 8007f42:	d117      	bne.n	8007f74 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0201 	orr.w	r2, r2, #1
 8007f52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2200      	movs	r2, #0
 8007f68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2228      	movs	r2, #40	; 0x28
 8007f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f72:	e007      	b.n	8007f84 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007f84:	6978      	ldr	r0, [r7, #20]
 8007f86:	f7fe fde7 	bl	8006b58 <HAL_I2C_ErrorCallback>
}
 8007f8a:	bf00      	nop
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	2000022c 	.word	0x2000022c
 8007f98:	14f8b589 	.word	0x14f8b589

08007f9c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007fa8:	4b13      	ldr	r3, [pc, #76]	; (8007ff8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	08db      	lsrs	r3, r3, #3
 8007fae:	4a13      	ldr	r2, [pc, #76]	; (8007ffc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb4:	0a1a      	lsrs	r2, r3, #8
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d107      	bne.n	8007fda <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	f043 0220 	orr.w	r2, r3, #32
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e008      	b.n	8007fec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fe8:	d0e9      	beq.n	8007fbe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	2000022c 	.word	0x2000022c
 8007ffc:	14f8b589 	.word	0x14f8b589

08008000 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008010:	d103      	bne.n	800801a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008018:	e007      	b.n	800802a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008022:	d102      	bne.n	800802a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2208      	movs	r2, #8
 8008028:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
	...

08008038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e267      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b00      	cmp	r3, #0
 8008054:	d075      	beq.n	8008142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008056:	4b88      	ldr	r3, [pc, #544]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f003 030c 	and.w	r3, r3, #12
 800805e:	2b04      	cmp	r3, #4
 8008060:	d00c      	beq.n	800807c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008062:	4b85      	ldr	r3, [pc, #532]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800806a:	2b08      	cmp	r3, #8
 800806c:	d112      	bne.n	8008094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800806e:	4b82      	ldr	r3, [pc, #520]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800807a:	d10b      	bne.n	8008094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800807c:	4b7e      	ldr	r3, [pc, #504]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d05b      	beq.n	8008140 <HAL_RCC_OscConfig+0x108>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d157      	bne.n	8008140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e242      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800809c:	d106      	bne.n	80080ac <HAL_RCC_OscConfig+0x74>
 800809e:	4b76      	ldr	r3, [pc, #472]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a75      	ldr	r2, [pc, #468]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 80080a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	e01d      	b.n	80080e8 <HAL_RCC_OscConfig+0xb0>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080b4:	d10c      	bne.n	80080d0 <HAL_RCC_OscConfig+0x98>
 80080b6:	4b70      	ldr	r3, [pc, #448]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a6f      	ldr	r2, [pc, #444]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 80080bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080c0:	6013      	str	r3, [r2, #0]
 80080c2:	4b6d      	ldr	r3, [pc, #436]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a6c      	ldr	r2, [pc, #432]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 80080c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	e00b      	b.n	80080e8 <HAL_RCC_OscConfig+0xb0>
 80080d0:	4b69      	ldr	r3, [pc, #420]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a68      	ldr	r2, [pc, #416]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 80080d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	4b66      	ldr	r3, [pc, #408]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a65      	ldr	r2, [pc, #404]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 80080e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d013      	beq.n	8008118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080f0:	f7fc fd2c 	bl	8004b4c <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080f8:	f7fc fd28 	bl	8004b4c <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b64      	cmp	r3, #100	; 0x64
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e207      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800810a:	4b5b      	ldr	r3, [pc, #364]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0f0      	beq.n	80080f8 <HAL_RCC_OscConfig+0xc0>
 8008116:	e014      	b.n	8008142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008118:	f7fc fd18 	bl	8004b4c <HAL_GetTick>
 800811c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800811e:	e008      	b.n	8008132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008120:	f7fc fd14 	bl	8004b4c <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b64      	cmp	r3, #100	; 0x64
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e1f3      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008132:	4b51      	ldr	r3, [pc, #324]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1f0      	bne.n	8008120 <HAL_RCC_OscConfig+0xe8>
 800813e:	e000      	b.n	8008142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d063      	beq.n	8008216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800814e:	4b4a      	ldr	r3, [pc, #296]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f003 030c 	and.w	r3, r3, #12
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00b      	beq.n	8008172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800815a:	4b47      	ldr	r3, [pc, #284]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008162:	2b08      	cmp	r3, #8
 8008164:	d11c      	bne.n	80081a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008166:	4b44      	ldr	r3, [pc, #272]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d116      	bne.n	80081a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008172:	4b41      	ldr	r3, [pc, #260]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <HAL_RCC_OscConfig+0x152>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d001      	beq.n	800818a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e1c7      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800818a:	4b3b      	ldr	r3, [pc, #236]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	00db      	lsls	r3, r3, #3
 8008198:	4937      	ldr	r1, [pc, #220]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 800819a:	4313      	orrs	r3, r2
 800819c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800819e:	e03a      	b.n	8008216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d020      	beq.n	80081ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081a8:	4b34      	ldr	r3, [pc, #208]	; (800827c <HAL_RCC_OscConfig+0x244>)
 80081aa:	2201      	movs	r2, #1
 80081ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ae:	f7fc fccd 	bl	8004b4c <HAL_GetTick>
 80081b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081b4:	e008      	b.n	80081c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081b6:	f7fc fcc9 	bl	8004b4c <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d901      	bls.n	80081c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e1a8      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081c8:	4b2b      	ldr	r3, [pc, #172]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d0f0      	beq.n	80081b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081d4:	4b28      	ldr	r3, [pc, #160]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	00db      	lsls	r3, r3, #3
 80081e2:	4925      	ldr	r1, [pc, #148]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	600b      	str	r3, [r1, #0]
 80081e8:	e015      	b.n	8008216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081ea:	4b24      	ldr	r3, [pc, #144]	; (800827c <HAL_RCC_OscConfig+0x244>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f0:	f7fc fcac 	bl	8004b4c <HAL_GetTick>
 80081f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081f6:	e008      	b.n	800820a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081f8:	f7fc fca8 	bl	8004b4c <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	2b02      	cmp	r3, #2
 8008204:	d901      	bls.n	800820a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e187      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800820a:	4b1b      	ldr	r3, [pc, #108]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1f0      	bne.n	80081f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0308 	and.w	r3, r3, #8
 800821e:	2b00      	cmp	r3, #0
 8008220:	d036      	beq.n	8008290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d016      	beq.n	8008258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800822a:	4b15      	ldr	r3, [pc, #84]	; (8008280 <HAL_RCC_OscConfig+0x248>)
 800822c:	2201      	movs	r2, #1
 800822e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008230:	f7fc fc8c 	bl	8004b4c <HAL_GetTick>
 8008234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008236:	e008      	b.n	800824a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008238:	f7fc fc88 	bl	8004b4c <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e167      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800824a:	4b0b      	ldr	r3, [pc, #44]	; (8008278 <HAL_RCC_OscConfig+0x240>)
 800824c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0f0      	beq.n	8008238 <HAL_RCC_OscConfig+0x200>
 8008256:	e01b      	b.n	8008290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008258:	4b09      	ldr	r3, [pc, #36]	; (8008280 <HAL_RCC_OscConfig+0x248>)
 800825a:	2200      	movs	r2, #0
 800825c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800825e:	f7fc fc75 	bl	8004b4c <HAL_GetTick>
 8008262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008264:	e00e      	b.n	8008284 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008266:	f7fc fc71 	bl	8004b4c <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	2b02      	cmp	r3, #2
 8008272:	d907      	bls.n	8008284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e150      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
 8008278:	40023800 	.word	0x40023800
 800827c:	42470000 	.word	0x42470000
 8008280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008284:	4b88      	ldr	r3, [pc, #544]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 8008286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1ea      	bne.n	8008266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 8097 	beq.w	80083cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800829e:	2300      	movs	r3, #0
 80082a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082a2:	4b81      	ldr	r3, [pc, #516]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 80082a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10f      	bne.n	80082ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082ae:	2300      	movs	r3, #0
 80082b0:	60bb      	str	r3, [r7, #8]
 80082b2:	4b7d      	ldr	r3, [pc, #500]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 80082b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b6:	4a7c      	ldr	r2, [pc, #496]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 80082b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082bc:	6413      	str	r3, [r2, #64]	; 0x40
 80082be:	4b7a      	ldr	r3, [pc, #488]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 80082c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082c6:	60bb      	str	r3, [r7, #8]
 80082c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082ca:	2301      	movs	r3, #1
 80082cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082ce:	4b77      	ldr	r3, [pc, #476]	; (80084ac <HAL_RCC_OscConfig+0x474>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d118      	bne.n	800830c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082da:	4b74      	ldr	r3, [pc, #464]	; (80084ac <HAL_RCC_OscConfig+0x474>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a73      	ldr	r2, [pc, #460]	; (80084ac <HAL_RCC_OscConfig+0x474>)
 80082e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082e6:	f7fc fc31 	bl	8004b4c <HAL_GetTick>
 80082ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082ec:	e008      	b.n	8008300 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082ee:	f7fc fc2d 	bl	8004b4c <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d901      	bls.n	8008300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e10c      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008300:	4b6a      	ldr	r3, [pc, #424]	; (80084ac <HAL_RCC_OscConfig+0x474>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008308:	2b00      	cmp	r3, #0
 800830a:	d0f0      	beq.n	80082ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d106      	bne.n	8008322 <HAL_RCC_OscConfig+0x2ea>
 8008314:	4b64      	ldr	r3, [pc, #400]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 8008316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008318:	4a63      	ldr	r2, [pc, #396]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 800831a:	f043 0301 	orr.w	r3, r3, #1
 800831e:	6713      	str	r3, [r2, #112]	; 0x70
 8008320:	e01c      	b.n	800835c <HAL_RCC_OscConfig+0x324>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	2b05      	cmp	r3, #5
 8008328:	d10c      	bne.n	8008344 <HAL_RCC_OscConfig+0x30c>
 800832a:	4b5f      	ldr	r3, [pc, #380]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 800832c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832e:	4a5e      	ldr	r2, [pc, #376]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 8008330:	f043 0304 	orr.w	r3, r3, #4
 8008334:	6713      	str	r3, [r2, #112]	; 0x70
 8008336:	4b5c      	ldr	r3, [pc, #368]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 8008338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833a:	4a5b      	ldr	r2, [pc, #364]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 800833c:	f043 0301 	orr.w	r3, r3, #1
 8008340:	6713      	str	r3, [r2, #112]	; 0x70
 8008342:	e00b      	b.n	800835c <HAL_RCC_OscConfig+0x324>
 8008344:	4b58      	ldr	r3, [pc, #352]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 8008346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008348:	4a57      	ldr	r2, [pc, #348]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 800834a:	f023 0301 	bic.w	r3, r3, #1
 800834e:	6713      	str	r3, [r2, #112]	; 0x70
 8008350:	4b55      	ldr	r3, [pc, #340]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 8008352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008354:	4a54      	ldr	r2, [pc, #336]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 8008356:	f023 0304 	bic.w	r3, r3, #4
 800835a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d015      	beq.n	8008390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008364:	f7fc fbf2 	bl	8004b4c <HAL_GetTick>
 8008368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800836a:	e00a      	b.n	8008382 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800836c:	f7fc fbee 	bl	8004b4c <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	f241 3288 	movw	r2, #5000	; 0x1388
 800837a:	4293      	cmp	r3, r2
 800837c:	d901      	bls.n	8008382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e0cb      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008382:	4b49      	ldr	r3, [pc, #292]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 8008384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008386:	f003 0302 	and.w	r3, r3, #2
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0ee      	beq.n	800836c <HAL_RCC_OscConfig+0x334>
 800838e:	e014      	b.n	80083ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008390:	f7fc fbdc 	bl	8004b4c <HAL_GetTick>
 8008394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008396:	e00a      	b.n	80083ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008398:	f7fc fbd8 	bl	8004b4c <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e0b5      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083ae:	4b3e      	ldr	r3, [pc, #248]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 80083b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1ee      	bne.n	8008398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d105      	bne.n	80083cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083c0:	4b39      	ldr	r3, [pc, #228]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 80083c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c4:	4a38      	ldr	r2, [pc, #224]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 80083c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 80a1 	beq.w	8008518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083d6:	4b34      	ldr	r3, [pc, #208]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f003 030c 	and.w	r3, r3, #12
 80083de:	2b08      	cmp	r3, #8
 80083e0:	d05c      	beq.n	800849c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d141      	bne.n	800846e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083ea:	4b31      	ldr	r3, [pc, #196]	; (80084b0 <HAL_RCC_OscConfig+0x478>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083f0:	f7fc fbac 	bl	8004b4c <HAL_GetTick>
 80083f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083f6:	e008      	b.n	800840a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083f8:	f7fc fba8 	bl	8004b4c <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	2b02      	cmp	r3, #2
 8008404:	d901      	bls.n	800840a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e087      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800840a:	4b27      	ldr	r3, [pc, #156]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1f0      	bne.n	80083f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	69da      	ldr	r2, [r3, #28]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	019b      	lsls	r3, r3, #6
 8008426:	431a      	orrs	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842c:	085b      	lsrs	r3, r3, #1
 800842e:	3b01      	subs	r3, #1
 8008430:	041b      	lsls	r3, r3, #16
 8008432:	431a      	orrs	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	061b      	lsls	r3, r3, #24
 800843a:	491b      	ldr	r1, [pc, #108]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 800843c:	4313      	orrs	r3, r2
 800843e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008440:	4b1b      	ldr	r3, [pc, #108]	; (80084b0 <HAL_RCC_OscConfig+0x478>)
 8008442:	2201      	movs	r2, #1
 8008444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008446:	f7fc fb81 	bl	8004b4c <HAL_GetTick>
 800844a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800844c:	e008      	b.n	8008460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800844e:	f7fc fb7d 	bl	8004b4c <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	2b02      	cmp	r3, #2
 800845a:	d901      	bls.n	8008460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e05c      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008460:	4b11      	ldr	r3, [pc, #68]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0f0      	beq.n	800844e <HAL_RCC_OscConfig+0x416>
 800846c:	e054      	b.n	8008518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800846e:	4b10      	ldr	r3, [pc, #64]	; (80084b0 <HAL_RCC_OscConfig+0x478>)
 8008470:	2200      	movs	r2, #0
 8008472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008474:	f7fc fb6a 	bl	8004b4c <HAL_GetTick>
 8008478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800847a:	e008      	b.n	800848e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800847c:	f7fc fb66 	bl	8004b4c <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	2b02      	cmp	r3, #2
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e045      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800848e:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <HAL_RCC_OscConfig+0x470>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1f0      	bne.n	800847c <HAL_RCC_OscConfig+0x444>
 800849a:	e03d      	b.n	8008518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d107      	bne.n	80084b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e038      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
 80084a8:	40023800 	.word	0x40023800
 80084ac:	40007000 	.word	0x40007000
 80084b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80084b4:	4b1b      	ldr	r3, [pc, #108]	; (8008524 <HAL_RCC_OscConfig+0x4ec>)
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d028      	beq.n	8008514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d121      	bne.n	8008514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084da:	429a      	cmp	r2, r3
 80084dc:	d11a      	bne.n	8008514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80084e4:	4013      	ands	r3, r2
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80084ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d111      	bne.n	8008514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fa:	085b      	lsrs	r3, r3, #1
 80084fc:	3b01      	subs	r3, #1
 80084fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008500:	429a      	cmp	r2, r3
 8008502:	d107      	bne.n	8008514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008510:	429a      	cmp	r2, r3
 8008512:	d001      	beq.n	8008518 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e000      	b.n	800851a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	40023800 	.word	0x40023800

08008528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e0cc      	b.n	80086d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800853c:	4b68      	ldr	r3, [pc, #416]	; (80086e0 <HAL_RCC_ClockConfig+0x1b8>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0307 	and.w	r3, r3, #7
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	429a      	cmp	r2, r3
 8008548:	d90c      	bls.n	8008564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800854a:	4b65      	ldr	r3, [pc, #404]	; (80086e0 <HAL_RCC_ClockConfig+0x1b8>)
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	b2d2      	uxtb	r2, r2
 8008550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008552:	4b63      	ldr	r3, [pc, #396]	; (80086e0 <HAL_RCC_ClockConfig+0x1b8>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	429a      	cmp	r2, r3
 800855e:	d001      	beq.n	8008564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e0b8      	b.n	80086d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0302 	and.w	r3, r3, #2
 800856c:	2b00      	cmp	r3, #0
 800856e:	d020      	beq.n	80085b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0304 	and.w	r3, r3, #4
 8008578:	2b00      	cmp	r3, #0
 800857a:	d005      	beq.n	8008588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800857c:	4b59      	ldr	r3, [pc, #356]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	4a58      	ldr	r2, [pc, #352]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0308 	and.w	r3, r3, #8
 8008590:	2b00      	cmp	r3, #0
 8008592:	d005      	beq.n	80085a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008594:	4b53      	ldr	r3, [pc, #332]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	4a52      	ldr	r2, [pc, #328]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 800859a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800859e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085a0:	4b50      	ldr	r3, [pc, #320]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	494d      	ldr	r1, [pc, #308]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d044      	beq.n	8008648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d107      	bne.n	80085d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085c6:	4b47      	ldr	r3, [pc, #284]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d119      	bne.n	8008606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e07f      	b.n	80086d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d003      	beq.n	80085e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d107      	bne.n	80085f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085e6:	4b3f      	ldr	r3, [pc, #252]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d109      	bne.n	8008606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e06f      	b.n	80086d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085f6:	4b3b      	ldr	r3, [pc, #236]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d101      	bne.n	8008606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e067      	b.n	80086d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008606:	4b37      	ldr	r3, [pc, #220]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f023 0203 	bic.w	r2, r3, #3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	4934      	ldr	r1, [pc, #208]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008614:	4313      	orrs	r3, r2
 8008616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008618:	f7fc fa98 	bl	8004b4c <HAL_GetTick>
 800861c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800861e:	e00a      	b.n	8008636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008620:	f7fc fa94 	bl	8004b4c <HAL_GetTick>
 8008624:	4602      	mov	r2, r0
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	f241 3288 	movw	r2, #5000	; 0x1388
 800862e:	4293      	cmp	r3, r2
 8008630:	d901      	bls.n	8008636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e04f      	b.n	80086d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008636:	4b2b      	ldr	r3, [pc, #172]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f003 020c 	and.w	r2, r3, #12
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	429a      	cmp	r2, r3
 8008646:	d1eb      	bne.n	8008620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008648:	4b25      	ldr	r3, [pc, #148]	; (80086e0 <HAL_RCC_ClockConfig+0x1b8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	429a      	cmp	r2, r3
 8008654:	d20c      	bcs.n	8008670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008656:	4b22      	ldr	r3, [pc, #136]	; (80086e0 <HAL_RCC_ClockConfig+0x1b8>)
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	b2d2      	uxtb	r2, r2
 800865c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800865e:	4b20      	ldr	r3, [pc, #128]	; (80086e0 <HAL_RCC_ClockConfig+0x1b8>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	429a      	cmp	r2, r3
 800866a:	d001      	beq.n	8008670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e032      	b.n	80086d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0304 	and.w	r3, r3, #4
 8008678:	2b00      	cmp	r3, #0
 800867a:	d008      	beq.n	800868e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800867c:	4b19      	ldr	r3, [pc, #100]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	4916      	ldr	r1, [pc, #88]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 800868a:	4313      	orrs	r3, r2
 800868c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0308 	and.w	r3, r3, #8
 8008696:	2b00      	cmp	r3, #0
 8008698:	d009      	beq.n	80086ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800869a:	4b12      	ldr	r3, [pc, #72]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	490e      	ldr	r1, [pc, #56]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 80086aa:	4313      	orrs	r3, r2
 80086ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80086ae:	f000 f821 	bl	80086f4 <HAL_RCC_GetSysClockFreq>
 80086b2:	4602      	mov	r2, r0
 80086b4:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <HAL_RCC_ClockConfig+0x1bc>)
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	091b      	lsrs	r3, r3, #4
 80086ba:	f003 030f 	and.w	r3, r3, #15
 80086be:	490a      	ldr	r1, [pc, #40]	; (80086e8 <HAL_RCC_ClockConfig+0x1c0>)
 80086c0:	5ccb      	ldrb	r3, [r1, r3]
 80086c2:	fa22 f303 	lsr.w	r3, r2, r3
 80086c6:	4a09      	ldr	r2, [pc, #36]	; (80086ec <HAL_RCC_ClockConfig+0x1c4>)
 80086c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80086ca:	4b09      	ldr	r3, [pc, #36]	; (80086f0 <HAL_RCC_ClockConfig+0x1c8>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fc f9f8 	bl	8004ac4 <HAL_InitTick>

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	40023c00 	.word	0x40023c00
 80086e4:	40023800 	.word	0x40023800
 80086e8:	0800bc90 	.word	0x0800bc90
 80086ec:	2000022c 	.word	0x2000022c
 80086f0:	20000230 	.word	0x20000230

080086f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086f8:	b094      	sub	sp, #80	; 0x50
 80086fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008700:	2300      	movs	r3, #0
 8008702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008704:	2300      	movs	r3, #0
 8008706:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800870c:	4b79      	ldr	r3, [pc, #484]	; (80088f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f003 030c 	and.w	r3, r3, #12
 8008714:	2b08      	cmp	r3, #8
 8008716:	d00d      	beq.n	8008734 <HAL_RCC_GetSysClockFreq+0x40>
 8008718:	2b08      	cmp	r3, #8
 800871a:	f200 80e1 	bhi.w	80088e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <HAL_RCC_GetSysClockFreq+0x34>
 8008722:	2b04      	cmp	r3, #4
 8008724:	d003      	beq.n	800872e <HAL_RCC_GetSysClockFreq+0x3a>
 8008726:	e0db      	b.n	80088e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008728:	4b73      	ldr	r3, [pc, #460]	; (80088f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800872a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800872c:	e0db      	b.n	80088e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800872e:	4b73      	ldr	r3, [pc, #460]	; (80088fc <HAL_RCC_GetSysClockFreq+0x208>)
 8008730:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008732:	e0d8      	b.n	80088e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008734:	4b6f      	ldr	r3, [pc, #444]	; (80088f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800873c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800873e:	4b6d      	ldr	r3, [pc, #436]	; (80088f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d063      	beq.n	8008812 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800874a:	4b6a      	ldr	r3, [pc, #424]	; (80088f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	099b      	lsrs	r3, r3, #6
 8008750:	2200      	movs	r2, #0
 8008752:	63bb      	str	r3, [r7, #56]	; 0x38
 8008754:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800875c:	633b      	str	r3, [r7, #48]	; 0x30
 800875e:	2300      	movs	r3, #0
 8008760:	637b      	str	r3, [r7, #52]	; 0x34
 8008762:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008766:	4622      	mov	r2, r4
 8008768:	462b      	mov	r3, r5
 800876a:	f04f 0000 	mov.w	r0, #0
 800876e:	f04f 0100 	mov.w	r1, #0
 8008772:	0159      	lsls	r1, r3, #5
 8008774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008778:	0150      	lsls	r0, r2, #5
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	4621      	mov	r1, r4
 8008780:	1a51      	subs	r1, r2, r1
 8008782:	6139      	str	r1, [r7, #16]
 8008784:	4629      	mov	r1, r5
 8008786:	eb63 0301 	sbc.w	r3, r3, r1
 800878a:	617b      	str	r3, [r7, #20]
 800878c:	f04f 0200 	mov.w	r2, #0
 8008790:	f04f 0300 	mov.w	r3, #0
 8008794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008798:	4659      	mov	r1, fp
 800879a:	018b      	lsls	r3, r1, #6
 800879c:	4651      	mov	r1, sl
 800879e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80087a2:	4651      	mov	r1, sl
 80087a4:	018a      	lsls	r2, r1, #6
 80087a6:	4651      	mov	r1, sl
 80087a8:	ebb2 0801 	subs.w	r8, r2, r1
 80087ac:	4659      	mov	r1, fp
 80087ae:	eb63 0901 	sbc.w	r9, r3, r1
 80087b2:	f04f 0200 	mov.w	r2, #0
 80087b6:	f04f 0300 	mov.w	r3, #0
 80087ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087c6:	4690      	mov	r8, r2
 80087c8:	4699      	mov	r9, r3
 80087ca:	4623      	mov	r3, r4
 80087cc:	eb18 0303 	adds.w	r3, r8, r3
 80087d0:	60bb      	str	r3, [r7, #8]
 80087d2:	462b      	mov	r3, r5
 80087d4:	eb49 0303 	adc.w	r3, r9, r3
 80087d8:	60fb      	str	r3, [r7, #12]
 80087da:	f04f 0200 	mov.w	r2, #0
 80087de:	f04f 0300 	mov.w	r3, #0
 80087e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80087e6:	4629      	mov	r1, r5
 80087e8:	024b      	lsls	r3, r1, #9
 80087ea:	4621      	mov	r1, r4
 80087ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80087f0:	4621      	mov	r1, r4
 80087f2:	024a      	lsls	r2, r1, #9
 80087f4:	4610      	mov	r0, r2
 80087f6:	4619      	mov	r1, r3
 80087f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087fa:	2200      	movs	r2, #0
 80087fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80087fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008800:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008804:	f7f8 f9b6 	bl	8000b74 <__aeabi_uldivmod>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4613      	mov	r3, r2
 800880e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008810:	e058      	b.n	80088c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008812:	4b38      	ldr	r3, [pc, #224]	; (80088f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	099b      	lsrs	r3, r3, #6
 8008818:	2200      	movs	r2, #0
 800881a:	4618      	mov	r0, r3
 800881c:	4611      	mov	r1, r2
 800881e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008822:	623b      	str	r3, [r7, #32]
 8008824:	2300      	movs	r3, #0
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
 8008828:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800882c:	4642      	mov	r2, r8
 800882e:	464b      	mov	r3, r9
 8008830:	f04f 0000 	mov.w	r0, #0
 8008834:	f04f 0100 	mov.w	r1, #0
 8008838:	0159      	lsls	r1, r3, #5
 800883a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800883e:	0150      	lsls	r0, r2, #5
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4641      	mov	r1, r8
 8008846:	ebb2 0a01 	subs.w	sl, r2, r1
 800884a:	4649      	mov	r1, r9
 800884c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008850:	f04f 0200 	mov.w	r2, #0
 8008854:	f04f 0300 	mov.w	r3, #0
 8008858:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800885c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008860:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008864:	ebb2 040a 	subs.w	r4, r2, sl
 8008868:	eb63 050b 	sbc.w	r5, r3, fp
 800886c:	f04f 0200 	mov.w	r2, #0
 8008870:	f04f 0300 	mov.w	r3, #0
 8008874:	00eb      	lsls	r3, r5, #3
 8008876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800887a:	00e2      	lsls	r2, r4, #3
 800887c:	4614      	mov	r4, r2
 800887e:	461d      	mov	r5, r3
 8008880:	4643      	mov	r3, r8
 8008882:	18e3      	adds	r3, r4, r3
 8008884:	603b      	str	r3, [r7, #0]
 8008886:	464b      	mov	r3, r9
 8008888:	eb45 0303 	adc.w	r3, r5, r3
 800888c:	607b      	str	r3, [r7, #4]
 800888e:	f04f 0200 	mov.w	r2, #0
 8008892:	f04f 0300 	mov.w	r3, #0
 8008896:	e9d7 4500 	ldrd	r4, r5, [r7]
 800889a:	4629      	mov	r1, r5
 800889c:	028b      	lsls	r3, r1, #10
 800889e:	4621      	mov	r1, r4
 80088a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80088a4:	4621      	mov	r1, r4
 80088a6:	028a      	lsls	r2, r1, #10
 80088a8:	4610      	mov	r0, r2
 80088aa:	4619      	mov	r1, r3
 80088ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ae:	2200      	movs	r2, #0
 80088b0:	61bb      	str	r3, [r7, #24]
 80088b2:	61fa      	str	r2, [r7, #28]
 80088b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088b8:	f7f8 f95c 	bl	8000b74 <__aeabi_uldivmod>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4613      	mov	r3, r2
 80088c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80088c4:	4b0b      	ldr	r3, [pc, #44]	; (80088f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	0c1b      	lsrs	r3, r3, #16
 80088ca:	f003 0303 	and.w	r3, r3, #3
 80088ce:	3301      	adds	r3, #1
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80088d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088de:	e002      	b.n	80088e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088e0:	4b05      	ldr	r3, [pc, #20]	; (80088f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80088e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3750      	adds	r7, #80	; 0x50
 80088ec:	46bd      	mov	sp, r7
 80088ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088f2:	bf00      	nop
 80088f4:	40023800 	.word	0x40023800
 80088f8:	00f42400 	.word	0x00f42400
 80088fc:	007a1200 	.word	0x007a1200

08008900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008904:	4b03      	ldr	r3, [pc, #12]	; (8008914 <HAL_RCC_GetHCLKFreq+0x14>)
 8008906:	681b      	ldr	r3, [r3, #0]
}
 8008908:	4618      	mov	r0, r3
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	2000022c 	.word	0x2000022c

08008918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800891c:	f7ff fff0 	bl	8008900 <HAL_RCC_GetHCLKFreq>
 8008920:	4602      	mov	r2, r0
 8008922:	4b05      	ldr	r3, [pc, #20]	; (8008938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	0a9b      	lsrs	r3, r3, #10
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	4903      	ldr	r1, [pc, #12]	; (800893c <HAL_RCC_GetPCLK1Freq+0x24>)
 800892e:	5ccb      	ldrb	r3, [r1, r3]
 8008930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008934:	4618      	mov	r0, r3
 8008936:	bd80      	pop	{r7, pc}
 8008938:	40023800 	.word	0x40023800
 800893c:	0800bca0 	.word	0x0800bca0

08008940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008944:	f7ff ffdc 	bl	8008900 <HAL_RCC_GetHCLKFreq>
 8008948:	4602      	mov	r2, r0
 800894a:	4b05      	ldr	r3, [pc, #20]	; (8008960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	0b5b      	lsrs	r3, r3, #13
 8008950:	f003 0307 	and.w	r3, r3, #7
 8008954:	4903      	ldr	r1, [pc, #12]	; (8008964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008956:	5ccb      	ldrb	r3, [r1, r3]
 8008958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800895c:	4618      	mov	r0, r3
 800895e:	bd80      	pop	{r7, pc}
 8008960:	40023800 	.word	0x40023800
 8008964:	0800bca0 	.word	0x0800bca0

08008968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e04c      	b.n	8008a14 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d111      	bne.n	80089aa <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f001 fc0c 	bl	800a1ac <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008998:	2b00      	cmp	r3, #0
 800899a:	d102      	bne.n	80089a2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a1f      	ldr	r2, [pc, #124]	; (8008a1c <HAL_TIM_Base_Init+0xb4>)
 80089a0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2202      	movs	r2, #2
 80089ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	3304      	adds	r3, #4
 80089ba:	4619      	mov	r1, r3
 80089bc:	4610      	mov	r0, r2
 80089be:	f001 f929 	bl	8009c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	080046cd 	.word	0x080046cd

08008a20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d001      	beq.n	8008a38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e03c      	b.n	8008ab2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a1e      	ldr	r2, [pc, #120]	; (8008ac0 <HAL_TIM_Base_Start+0xa0>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d018      	beq.n	8008a7c <HAL_TIM_Base_Start+0x5c>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a52:	d013      	beq.n	8008a7c <HAL_TIM_Base_Start+0x5c>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a1a      	ldr	r2, [pc, #104]	; (8008ac4 <HAL_TIM_Base_Start+0xa4>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d00e      	beq.n	8008a7c <HAL_TIM_Base_Start+0x5c>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a19      	ldr	r2, [pc, #100]	; (8008ac8 <HAL_TIM_Base_Start+0xa8>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d009      	beq.n	8008a7c <HAL_TIM_Base_Start+0x5c>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a17      	ldr	r2, [pc, #92]	; (8008acc <HAL_TIM_Base_Start+0xac>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d004      	beq.n	8008a7c <HAL_TIM_Base_Start+0x5c>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a16      	ldr	r2, [pc, #88]	; (8008ad0 <HAL_TIM_Base_Start+0xb0>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d111      	bne.n	8008aa0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f003 0307 	and.w	r3, r3, #7
 8008a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b06      	cmp	r3, #6
 8008a8c:	d010      	beq.n	8008ab0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f042 0201 	orr.w	r2, r2, #1
 8008a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a9e:	e007      	b.n	8008ab0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f042 0201 	orr.w	r2, r2, #1
 8008aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	40010000 	.word	0x40010000
 8008ac4:	40000400 	.word	0x40000400
 8008ac8:	40000800 	.word	0x40000800
 8008acc:	40000c00 	.word	0x40000c00
 8008ad0:	40014000 	.word	0x40014000

08008ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d001      	beq.n	8008aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e044      	b.n	8008b76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2202      	movs	r2, #2
 8008af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68da      	ldr	r2, [r3, #12]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f042 0201 	orr.w	r2, r2, #1
 8008b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a1e      	ldr	r2, [pc, #120]	; (8008b84 <HAL_TIM_Base_Start_IT+0xb0>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d018      	beq.n	8008b40 <HAL_TIM_Base_Start_IT+0x6c>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b16:	d013      	beq.n	8008b40 <HAL_TIM_Base_Start_IT+0x6c>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a1a      	ldr	r2, [pc, #104]	; (8008b88 <HAL_TIM_Base_Start_IT+0xb4>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d00e      	beq.n	8008b40 <HAL_TIM_Base_Start_IT+0x6c>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a19      	ldr	r2, [pc, #100]	; (8008b8c <HAL_TIM_Base_Start_IT+0xb8>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d009      	beq.n	8008b40 <HAL_TIM_Base_Start_IT+0x6c>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a17      	ldr	r2, [pc, #92]	; (8008b90 <HAL_TIM_Base_Start_IT+0xbc>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d004      	beq.n	8008b40 <HAL_TIM_Base_Start_IT+0x6c>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a16      	ldr	r2, [pc, #88]	; (8008b94 <HAL_TIM_Base_Start_IT+0xc0>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d111      	bne.n	8008b64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b06      	cmp	r3, #6
 8008b50:	d010      	beq.n	8008b74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f042 0201 	orr.w	r2, r2, #1
 8008b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b62:	e007      	b.n	8008b74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f042 0201 	orr.w	r2, r2, #1
 8008b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	40010000 	.word	0x40010000
 8008b88:	40000400 	.word	0x40000400
 8008b8c:	40000800 	.word	0x40000800
 8008b90:	40000c00 	.word	0x40000c00
 8008b94:	40014000 	.word	0x40014000

08008b98 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e04c      	b.n	8008c44 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d111      	bne.n	8008bda <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f001 faf4 	bl	800a1ac <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a1f      	ldr	r2, [pc, #124]	; (8008c4c <HAL_TIM_OC_Init+0xb4>)
 8008bd0:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2202      	movs	r2, #2
 8008bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	3304      	adds	r3, #4
 8008bea:	4619      	mov	r1, r3
 8008bec:	4610      	mov	r0, r2
 8008bee:	f001 f811 	bl	8009c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	08008c51 	.word	0x08008c51

08008c50 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e04c      	b.n	8008d10 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d111      	bne.n	8008ca6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f001 fa8e 	bl	800a1ac <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d102      	bne.n	8008c9e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a1f      	ldr	r2, [pc, #124]	; (8008d18 <HAL_TIM_PWM_Init+0xb4>)
 8008c9c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2202      	movs	r2, #2
 8008caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4610      	mov	r0, r2
 8008cba:	f000 ffab 	bl	8009c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	08004759 	.word	0x08004759

08008d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d109      	bne.n	8008d40 <HAL_TIM_PWM_Start+0x24>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	bf14      	ite	ne
 8008d38:	2301      	movne	r3, #1
 8008d3a:	2300      	moveq	r3, #0
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	e022      	b.n	8008d86 <HAL_TIM_PWM_Start+0x6a>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	d109      	bne.n	8008d5a <HAL_TIM_PWM_Start+0x3e>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	bf14      	ite	ne
 8008d52:	2301      	movne	r3, #1
 8008d54:	2300      	moveq	r3, #0
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	e015      	b.n	8008d86 <HAL_TIM_PWM_Start+0x6a>
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	2b08      	cmp	r3, #8
 8008d5e:	d109      	bne.n	8008d74 <HAL_TIM_PWM_Start+0x58>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	bf14      	ite	ne
 8008d6c:	2301      	movne	r3, #1
 8008d6e:	2300      	moveq	r3, #0
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	e008      	b.n	8008d86 <HAL_TIM_PWM_Start+0x6a>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	bf14      	ite	ne
 8008d80:	2301      	movne	r3, #1
 8008d82:	2300      	moveq	r3, #0
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e068      	b.n	8008e60 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d104      	bne.n	8008d9e <HAL_TIM_PWM_Start+0x82>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d9c:	e013      	b.n	8008dc6 <HAL_TIM_PWM_Start+0xaa>
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	2b04      	cmp	r3, #4
 8008da2:	d104      	bne.n	8008dae <HAL_TIM_PWM_Start+0x92>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dac:	e00b      	b.n	8008dc6 <HAL_TIM_PWM_Start+0xaa>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d104      	bne.n	8008dbe <HAL_TIM_PWM_Start+0xa2>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2202      	movs	r2, #2
 8008db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dbc:	e003      	b.n	8008dc6 <HAL_TIM_PWM_Start+0xaa>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f001 f9c6 	bl	800a160 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a23      	ldr	r2, [pc, #140]	; (8008e68 <HAL_TIM_PWM_Start+0x14c>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d107      	bne.n	8008dee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a1d      	ldr	r2, [pc, #116]	; (8008e68 <HAL_TIM_PWM_Start+0x14c>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d018      	beq.n	8008e2a <HAL_TIM_PWM_Start+0x10e>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e00:	d013      	beq.n	8008e2a <HAL_TIM_PWM_Start+0x10e>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a19      	ldr	r2, [pc, #100]	; (8008e6c <HAL_TIM_PWM_Start+0x150>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d00e      	beq.n	8008e2a <HAL_TIM_PWM_Start+0x10e>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a17      	ldr	r2, [pc, #92]	; (8008e70 <HAL_TIM_PWM_Start+0x154>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d009      	beq.n	8008e2a <HAL_TIM_PWM_Start+0x10e>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a16      	ldr	r2, [pc, #88]	; (8008e74 <HAL_TIM_PWM_Start+0x158>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d004      	beq.n	8008e2a <HAL_TIM_PWM_Start+0x10e>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a14      	ldr	r2, [pc, #80]	; (8008e78 <HAL_TIM_PWM_Start+0x15c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d111      	bne.n	8008e4e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	f003 0307 	and.w	r3, r3, #7
 8008e34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2b06      	cmp	r3, #6
 8008e3a:	d010      	beq.n	8008e5e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f042 0201 	orr.w	r2, r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e4c:	e007      	b.n	8008e5e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f042 0201 	orr.w	r2, r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	40010000 	.word	0x40010000
 8008e6c:	40000400 	.word	0x40000400
 8008e70:	40000800 	.word	0x40000800
 8008e74:	40000c00 	.word	0x40000c00
 8008e78:	40014000 	.word	0x40014000

08008e7c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e04c      	b.n	8008f2a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d111      	bne.n	8008ec0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f001 f981 	bl	800a1ac <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d102      	bne.n	8008eb8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a1f      	ldr	r2, [pc, #124]	; (8008f34 <HAL_TIM_OnePulse_Init+0xb8>)
 8008eb6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	3304      	adds	r3, #4
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	f000 fe9e 	bl	8009c14 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 0208 	bic.w	r2, r2, #8
 8008ee6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6819      	ldr	r1, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	08008f39 	.word	0x08008f39

08008f38 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f74:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d108      	bne.n	8008f8e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d105      	bne.n	8008f8e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f82:	7b7b      	ldrb	r3, [r7, #13]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d102      	bne.n	8008f8e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f88:	7b3b      	ldrb	r3, [r7, #12]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d001      	beq.n	8008f92 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e03b      	b.n	800900a <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2202      	movs	r2, #2
 8008f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2202      	movs	r2, #2
 8008fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68da      	ldr	r2, [r3, #12]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f042 0202 	orr.w	r2, r2, #2
 8008fc0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68da      	ldr	r2, [r3, #12]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f042 0204 	orr.w	r2, r2, #4
 8008fd0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	2100      	movs	r1, #0
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f001 f8c0 	bl	800a160 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	2104      	movs	r1, #4
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f001 f8b9 	bl	800a160 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a08      	ldr	r2, [pc, #32]	; (8009014 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d107      	bne.n	8009008 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009006:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	40010000 	.word	0x40010000

08009018 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e0a2      	b.n	8009172 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d111      	bne.n	800905c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f001 f8b3 	bl	800a1ac <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800904a:	2b00      	cmp	r3, #0
 800904c:	d102      	bne.n	8009054 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a4a      	ldr	r2, [pc, #296]	; (800917c <HAL_TIM_Encoder_Init+0x164>)
 8009052:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	6812      	ldr	r2, [r2, #0]
 800906e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009072:	f023 0307 	bic.w	r3, r3, #7
 8009076:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	3304      	adds	r3, #4
 8009080:	4619      	mov	r1, r3
 8009082:	4610      	mov	r0, r2
 8009084:	f000 fdc6 	bl	8009c14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090b0:	f023 0303 	bic.w	r3, r3, #3
 80090b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	689a      	ldr	r2, [r3, #8]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	699b      	ldr	r3, [r3, #24]
 80090be:	021b      	lsls	r3, r3, #8
 80090c0:	4313      	orrs	r3, r2
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80090ce:	f023 030c 	bic.w	r3, r3, #12
 80090d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	68da      	ldr	r2, [r3, #12]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	021b      	lsls	r3, r3, #8
 80090ea:	4313      	orrs	r3, r2
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	011a      	lsls	r2, r3, #4
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	031b      	lsls	r3, r3, #12
 80090fe:	4313      	orrs	r3, r2
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	4313      	orrs	r3, r2
 8009104:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800910c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009114:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	685a      	ldr	r2, [r3, #4]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	011b      	lsls	r3, r3, #4
 8009120:	4313      	orrs	r3, r2
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4313      	orrs	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	08004631 	.word	0x08004631

08009180 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009190:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009198:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80091a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80091a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d110      	bne.n	80091d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d102      	bne.n	80091bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80091b6:	7b7b      	ldrb	r3, [r7, #13]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d001      	beq.n	80091c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e069      	b.n	8009294 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2202      	movs	r2, #2
 80091c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2202      	movs	r2, #2
 80091cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091d0:	e031      	b.n	8009236 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	d110      	bne.n	80091fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80091d8:	7bbb      	ldrb	r3, [r7, #14]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d102      	bne.n	80091e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80091de:	7b3b      	ldrb	r3, [r7, #12]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d001      	beq.n	80091e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e055      	b.n	8009294 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091f8:	e01d      	b.n	8009236 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d108      	bne.n	8009212 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d105      	bne.n	8009212 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009206:	7b7b      	ldrb	r3, [r7, #13]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d102      	bne.n	8009212 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800920c:	7b3b      	ldrb	r3, [r7, #12]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d001      	beq.n	8009216 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e03e      	b.n	8009294 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2202      	movs	r2, #2
 800921a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2202      	movs	r2, #2
 8009222:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2202      	movs	r2, #2
 800922a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2202      	movs	r2, #2
 8009232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d003      	beq.n	8009244 <HAL_TIM_Encoder_Start+0xc4>
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b04      	cmp	r3, #4
 8009240:	d008      	beq.n	8009254 <HAL_TIM_Encoder_Start+0xd4>
 8009242:	e00f      	b.n	8009264 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2201      	movs	r2, #1
 800924a:	2100      	movs	r1, #0
 800924c:	4618      	mov	r0, r3
 800924e:	f000 ff87 	bl	800a160 <TIM_CCxChannelCmd>
      break;
 8009252:	e016      	b.n	8009282 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2201      	movs	r2, #1
 800925a:	2104      	movs	r1, #4
 800925c:	4618      	mov	r0, r3
 800925e:	f000 ff7f 	bl	800a160 <TIM_CCxChannelCmd>
      break;
 8009262:	e00e      	b.n	8009282 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2201      	movs	r2, #1
 800926a:	2100      	movs	r1, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f000 ff77 	bl	800a160 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2201      	movs	r2, #1
 8009278:	2104      	movs	r1, #4
 800927a:	4618      	mov	r0, r3
 800927c:	f000 ff70 	bl	800a160 <TIM_CCxChannelCmd>
      break;
 8009280:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f042 0201 	orr.w	r2, r2, #1
 8009290:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d128      	bne.n	8009304 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	f003 0302 	and.w	r3, r3, #2
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d121      	bne.n	8009304 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f06f 0202 	mvn.w	r2, #2
 80092c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	f003 0303 	and.w	r3, r3, #3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d005      	beq.n	80092ea <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	4798      	blx	r3
 80092e8:	e009      	b.n	80092fe <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	f003 0304 	and.w	r3, r3, #4
 800930e:	2b04      	cmp	r3, #4
 8009310:	d128      	bne.n	8009364 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	f003 0304 	and.w	r3, r3, #4
 800931c:	2b04      	cmp	r3, #4
 800931e:	d121      	bne.n	8009364 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f06f 0204 	mvn.w	r2, #4
 8009328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2202      	movs	r2, #2
 800932e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800933a:	2b00      	cmp	r3, #0
 800933c:	d005      	beq.n	800934a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	4798      	blx	r3
 8009348:	e009      	b.n	800935e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	f003 0308 	and.w	r3, r3, #8
 800936e:	2b08      	cmp	r3, #8
 8009370:	d128      	bne.n	80093c4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f003 0308 	and.w	r3, r3, #8
 800937c:	2b08      	cmp	r3, #8
 800937e:	d121      	bne.n	80093c4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f06f 0208 	mvn.w	r2, #8
 8009388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2204      	movs	r2, #4
 800938e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	69db      	ldr	r3, [r3, #28]
 8009396:	f003 0303 	and.w	r3, r3, #3
 800939a:	2b00      	cmp	r3, #0
 800939c:	d005      	beq.n	80093aa <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	4798      	blx	r3
 80093a8:	e009      	b.n	80093be <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f003 0310 	and.w	r3, r3, #16
 80093ce:	2b10      	cmp	r3, #16
 80093d0:	d128      	bne.n	8009424 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f003 0310 	and.w	r3, r3, #16
 80093dc:	2b10      	cmp	r3, #16
 80093de:	d121      	bne.n	8009424 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f06f 0210 	mvn.w	r2, #16
 80093e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2208      	movs	r2, #8
 80093ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d005      	beq.n	800940a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	4798      	blx	r3
 8009408:	e009      	b.n	800941e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	2b01      	cmp	r3, #1
 8009430:	d110      	bne.n	8009454 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	2b01      	cmp	r3, #1
 800943e:	d109      	bne.n	8009454 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f06f 0201 	mvn.w	r2, #1
 8009448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945e:	2b80      	cmp	r3, #128	; 0x80
 8009460:	d110      	bne.n	8009484 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800946c:	2b80      	cmp	r3, #128	; 0x80
 800946e:	d109      	bne.n	8009484 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800948e:	2b40      	cmp	r3, #64	; 0x40
 8009490:	d110      	bne.n	80094b4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949c:	2b40      	cmp	r3, #64	; 0x40
 800949e:	d109      	bne.n	80094b4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	f003 0320 	and.w	r3, r3, #32
 80094be:	2b20      	cmp	r3, #32
 80094c0:	d110      	bne.n	80094e4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	f003 0320 	and.w	r3, r3, #32
 80094cc:	2b20      	cmp	r3, #32
 80094ce:	d109      	bne.n	80094e4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f06f 0220 	mvn.w	r2, #32
 80094d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094e4:	bf00      	nop
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b086      	sub	sp, #24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009502:	2b01      	cmp	r3, #1
 8009504:	d101      	bne.n	800950a <HAL_TIM_OC_ConfigChannel+0x1e>
 8009506:	2302      	movs	r3, #2
 8009508:	e048      	b.n	800959c <HAL_TIM_OC_ConfigChannel+0xb0>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2b0c      	cmp	r3, #12
 8009516:	d839      	bhi.n	800958c <HAL_TIM_OC_ConfigChannel+0xa0>
 8009518:	a201      	add	r2, pc, #4	; (adr r2, 8009520 <HAL_TIM_OC_ConfigChannel+0x34>)
 800951a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951e:	bf00      	nop
 8009520:	08009555 	.word	0x08009555
 8009524:	0800958d 	.word	0x0800958d
 8009528:	0800958d 	.word	0x0800958d
 800952c:	0800958d 	.word	0x0800958d
 8009530:	08009563 	.word	0x08009563
 8009534:	0800958d 	.word	0x0800958d
 8009538:	0800958d 	.word	0x0800958d
 800953c:	0800958d 	.word	0x0800958d
 8009540:	08009571 	.word	0x08009571
 8009544:	0800958d 	.word	0x0800958d
 8009548:	0800958d 	.word	0x0800958d
 800954c:	0800958d 	.word	0x0800958d
 8009550:	0800957f 	.word	0x0800957f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68b9      	ldr	r1, [r7, #8]
 800955a:	4618      	mov	r0, r3
 800955c:	f000 fbda 	bl	8009d14 <TIM_OC1_SetConfig>
      break;
 8009560:	e017      	b.n	8009592 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68b9      	ldr	r1, [r7, #8]
 8009568:	4618      	mov	r0, r3
 800956a:	f000 fc39 	bl	8009de0 <TIM_OC2_SetConfig>
      break;
 800956e:	e010      	b.n	8009592 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68b9      	ldr	r1, [r7, #8]
 8009576:	4618      	mov	r0, r3
 8009578:	f000 fc9e 	bl	8009eb8 <TIM_OC3_SetConfig>
      break;
 800957c:	e009      	b.n	8009592 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68b9      	ldr	r1, [r7, #8]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 fd01 	bl	8009f8c <TIM_OC4_SetConfig>
      break;
 800958a:	e002      	b.n	8009592 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	75fb      	strb	r3, [r7, #23]
      break;
 8009590:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800959a:	7dfb      	ldrb	r3, [r7, #23]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d101      	bne.n	80095c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80095be:	2302      	movs	r3, #2
 80095c0:	e0ae      	b.n	8009720 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b0c      	cmp	r3, #12
 80095ce:	f200 809f 	bhi.w	8009710 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80095d2:	a201      	add	r2, pc, #4	; (adr r2, 80095d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80095d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d8:	0800960d 	.word	0x0800960d
 80095dc:	08009711 	.word	0x08009711
 80095e0:	08009711 	.word	0x08009711
 80095e4:	08009711 	.word	0x08009711
 80095e8:	0800964d 	.word	0x0800964d
 80095ec:	08009711 	.word	0x08009711
 80095f0:	08009711 	.word	0x08009711
 80095f4:	08009711 	.word	0x08009711
 80095f8:	0800968f 	.word	0x0800968f
 80095fc:	08009711 	.word	0x08009711
 8009600:	08009711 	.word	0x08009711
 8009604:	08009711 	.word	0x08009711
 8009608:	080096cf 	.word	0x080096cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68b9      	ldr	r1, [r7, #8]
 8009612:	4618      	mov	r0, r3
 8009614:	f000 fb7e 	bl	8009d14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	699a      	ldr	r2, [r3, #24]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0208 	orr.w	r2, r2, #8
 8009626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	699a      	ldr	r2, [r3, #24]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f022 0204 	bic.w	r2, r2, #4
 8009636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6999      	ldr	r1, [r3, #24]
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	691a      	ldr	r2, [r3, #16]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	430a      	orrs	r2, r1
 8009648:	619a      	str	r2, [r3, #24]
      break;
 800964a:	e064      	b.n	8009716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68b9      	ldr	r1, [r7, #8]
 8009652:	4618      	mov	r0, r3
 8009654:	f000 fbc4 	bl	8009de0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	699a      	ldr	r2, [r3, #24]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	699a      	ldr	r2, [r3, #24]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6999      	ldr	r1, [r3, #24]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	021a      	lsls	r2, r3, #8
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	430a      	orrs	r2, r1
 800968a:	619a      	str	r2, [r3, #24]
      break;
 800968c:	e043      	b.n	8009716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68b9      	ldr	r1, [r7, #8]
 8009694:	4618      	mov	r0, r3
 8009696:	f000 fc0f 	bl	8009eb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69da      	ldr	r2, [r3, #28]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f042 0208 	orr.w	r2, r2, #8
 80096a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	69da      	ldr	r2, [r3, #28]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 0204 	bic.w	r2, r2, #4
 80096b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	69d9      	ldr	r1, [r3, #28]
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	691a      	ldr	r2, [r3, #16]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	430a      	orrs	r2, r1
 80096ca:	61da      	str	r2, [r3, #28]
      break;
 80096cc:	e023      	b.n	8009716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68b9      	ldr	r1, [r7, #8]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f000 fc59 	bl	8009f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	69da      	ldr	r2, [r3, #28]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	69da      	ldr	r2, [r3, #28]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	69d9      	ldr	r1, [r3, #28]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	021a      	lsls	r2, r3, #8
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	430a      	orrs	r2, r1
 800970c:	61da      	str	r2, [r3, #28]
      break;
 800970e:	e002      	b.n	8009716 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	75fb      	strb	r3, [r7, #23]
      break;
 8009714:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800971e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <HAL_TIM_ConfigClockSource+0x1c>
 8009740:	2302      	movs	r3, #2
 8009742:	e0b4      	b.n	80098ae <HAL_TIM_ConfigClockSource+0x186>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800976a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800977c:	d03e      	beq.n	80097fc <HAL_TIM_ConfigClockSource+0xd4>
 800977e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009782:	f200 8087 	bhi.w	8009894 <HAL_TIM_ConfigClockSource+0x16c>
 8009786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800978a:	f000 8086 	beq.w	800989a <HAL_TIM_ConfigClockSource+0x172>
 800978e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009792:	d87f      	bhi.n	8009894 <HAL_TIM_ConfigClockSource+0x16c>
 8009794:	2b70      	cmp	r3, #112	; 0x70
 8009796:	d01a      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0xa6>
 8009798:	2b70      	cmp	r3, #112	; 0x70
 800979a:	d87b      	bhi.n	8009894 <HAL_TIM_ConfigClockSource+0x16c>
 800979c:	2b60      	cmp	r3, #96	; 0x60
 800979e:	d050      	beq.n	8009842 <HAL_TIM_ConfigClockSource+0x11a>
 80097a0:	2b60      	cmp	r3, #96	; 0x60
 80097a2:	d877      	bhi.n	8009894 <HAL_TIM_ConfigClockSource+0x16c>
 80097a4:	2b50      	cmp	r3, #80	; 0x50
 80097a6:	d03c      	beq.n	8009822 <HAL_TIM_ConfigClockSource+0xfa>
 80097a8:	2b50      	cmp	r3, #80	; 0x50
 80097aa:	d873      	bhi.n	8009894 <HAL_TIM_ConfigClockSource+0x16c>
 80097ac:	2b40      	cmp	r3, #64	; 0x40
 80097ae:	d058      	beq.n	8009862 <HAL_TIM_ConfigClockSource+0x13a>
 80097b0:	2b40      	cmp	r3, #64	; 0x40
 80097b2:	d86f      	bhi.n	8009894 <HAL_TIM_ConfigClockSource+0x16c>
 80097b4:	2b30      	cmp	r3, #48	; 0x30
 80097b6:	d064      	beq.n	8009882 <HAL_TIM_ConfigClockSource+0x15a>
 80097b8:	2b30      	cmp	r3, #48	; 0x30
 80097ba:	d86b      	bhi.n	8009894 <HAL_TIM_ConfigClockSource+0x16c>
 80097bc:	2b20      	cmp	r3, #32
 80097be:	d060      	beq.n	8009882 <HAL_TIM_ConfigClockSource+0x15a>
 80097c0:	2b20      	cmp	r3, #32
 80097c2:	d867      	bhi.n	8009894 <HAL_TIM_ConfigClockSource+0x16c>
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d05c      	beq.n	8009882 <HAL_TIM_ConfigClockSource+0x15a>
 80097c8:	2b10      	cmp	r3, #16
 80097ca:	d05a      	beq.n	8009882 <HAL_TIM_ConfigClockSource+0x15a>
 80097cc:	e062      	b.n	8009894 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6818      	ldr	r0, [r3, #0]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	6899      	ldr	r1, [r3, #8]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	f000 fc9f 	bl	800a120 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80097f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	609a      	str	r2, [r3, #8]
      break;
 80097fa:	e04f      	b.n	800989c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	6899      	ldr	r1, [r3, #8]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f000 fc88 	bl	800a120 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689a      	ldr	r2, [r3, #8]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800981e:	609a      	str	r2, [r3, #8]
      break;
 8009820:	e03c      	b.n	800989c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	6859      	ldr	r1, [r3, #4]
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	461a      	mov	r2, r3
 8009830:	f000 fbfc 	bl	800a02c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2150      	movs	r1, #80	; 0x50
 800983a:	4618      	mov	r0, r3
 800983c:	f000 fc55 	bl	800a0ea <TIM_ITRx_SetConfig>
      break;
 8009840:	e02c      	b.n	800989c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6818      	ldr	r0, [r3, #0]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	6859      	ldr	r1, [r3, #4]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	461a      	mov	r2, r3
 8009850:	f000 fc1b 	bl	800a08a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2160      	movs	r1, #96	; 0x60
 800985a:	4618      	mov	r0, r3
 800985c:	f000 fc45 	bl	800a0ea <TIM_ITRx_SetConfig>
      break;
 8009860:	e01c      	b.n	800989c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6818      	ldr	r0, [r3, #0]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	6859      	ldr	r1, [r3, #4]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	461a      	mov	r2, r3
 8009870:	f000 fbdc 	bl	800a02c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2140      	movs	r1, #64	; 0x40
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fc35 	bl	800a0ea <TIM_ITRx_SetConfig>
      break;
 8009880:	e00c      	b.n	800989c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4619      	mov	r1, r3
 800988c:	4610      	mov	r0, r2
 800988e:	f000 fc2c 	bl	800a0ea <TIM_ITRx_SetConfig>
      break;
 8009892:	e003      	b.n	800989c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	73fb      	strb	r3, [r7, #15]
      break;
 8009898:	e000      	b.n	800989c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800989a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b083      	sub	sp, #12
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80098be:	bf00      	nop
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b083      	sub	sp, #12
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80098d2:	bf00      	nop
 80098d4:	370c      	adds	r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr

080098de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098de:	b480      	push	{r7}
 80098e0:	b083      	sub	sp, #12
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098e6:	bf00      	nop
 80098e8:	370c      	adds	r7, #12
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b083      	sub	sp, #12
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098fa:	bf00      	nop
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009906:	b480      	push	{r7}
 8009908:	b083      	sub	sp, #12
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800990e:	bf00      	nop
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800991a:	b480      	push	{r7}
 800991c:	b083      	sub	sp, #12
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009922:	bf00      	nop
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800992e:	b480      	push	{r7}
 8009930:	b083      	sub	sp, #12
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009936:	bf00      	nop
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800994a:	bf00      	nop
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800995e:	bf00      	nop
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800996a:	b480      	push	{r7}
 800996c:	b083      	sub	sp, #12
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009972:	bf00      	nop
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
	...

08009980 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009980:	b480      	push	{r7}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	460b      	mov	r3, r1
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e135      	b.n	8009c08 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d101      	bne.n	80099aa <HAL_TIM_RegisterCallback+0x2a>
 80099a6:	2302      	movs	r3, #2
 80099a8:	e12e      	b.n	8009c08 <HAL_TIM_RegisterCallback+0x288>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	f040 80ba 	bne.w	8009b34 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 80099c0:	7afb      	ldrb	r3, [r7, #11]
 80099c2:	2b1a      	cmp	r3, #26
 80099c4:	f200 80b3 	bhi.w	8009b2e <HAL_TIM_RegisterCallback+0x1ae>
 80099c8:	a201      	add	r2, pc, #4	; (adr r2, 80099d0 <HAL_TIM_RegisterCallback+0x50>)
 80099ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ce:	bf00      	nop
 80099d0:	08009a3d 	.word	0x08009a3d
 80099d4:	08009a45 	.word	0x08009a45
 80099d8:	08009a4d 	.word	0x08009a4d
 80099dc:	08009a55 	.word	0x08009a55
 80099e0:	08009a5d 	.word	0x08009a5d
 80099e4:	08009a65 	.word	0x08009a65
 80099e8:	08009a6d 	.word	0x08009a6d
 80099ec:	08009a75 	.word	0x08009a75
 80099f0:	08009a7d 	.word	0x08009a7d
 80099f4:	08009a85 	.word	0x08009a85
 80099f8:	08009a8d 	.word	0x08009a8d
 80099fc:	08009a95 	.word	0x08009a95
 8009a00:	08009a9d 	.word	0x08009a9d
 8009a04:	08009aa5 	.word	0x08009aa5
 8009a08:	08009aad 	.word	0x08009aad
 8009a0c:	08009ab7 	.word	0x08009ab7
 8009a10:	08009ac1 	.word	0x08009ac1
 8009a14:	08009acb 	.word	0x08009acb
 8009a18:	08009ad5 	.word	0x08009ad5
 8009a1c:	08009adf 	.word	0x08009adf
 8009a20:	08009ae9 	.word	0x08009ae9
 8009a24:	08009af3 	.word	0x08009af3
 8009a28:	08009afd 	.word	0x08009afd
 8009a2c:	08009b07 	.word	0x08009b07
 8009a30:	08009b11 	.word	0x08009b11
 8009a34:	08009b1b 	.word	0x08009b1b
 8009a38:	08009b25 	.word	0x08009b25
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009a42:	e0dc      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009a4a:	e0d8      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009a52:	e0d4      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009a5a:	e0d0      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009a62:	e0cc      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009a6a:	e0c8      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009a72:	e0c4      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009a7a:	e0c0      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009a82:	e0bc      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009a8a:	e0b8      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009a92:	e0b4      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009a9a:	e0b0      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009aa2:	e0ac      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009aaa:	e0a8      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009ab4:	e0a3      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009abe:	e09e      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8009ac8:	e099      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009ad2:	e094      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009adc:	e08f      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8009ae6:	e08a      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009af0:	e085      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8009afa:	e080      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009b04:	e07b      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009b0e:	e076      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009b18:	e071      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009b22:	e06c      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009b2c:	e067      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	75fb      	strb	r3, [r7, #23]
        break;
 8009b32:	e064      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d15c      	bne.n	8009bfa <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8009b40:	7afb      	ldrb	r3, [r7, #11]
 8009b42:	2b0d      	cmp	r3, #13
 8009b44:	d856      	bhi.n	8009bf4 <HAL_TIM_RegisterCallback+0x274>
 8009b46:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <HAL_TIM_RegisterCallback+0x1cc>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009b85 	.word	0x08009b85
 8009b50:	08009b8d 	.word	0x08009b8d
 8009b54:	08009b95 	.word	0x08009b95
 8009b58:	08009b9d 	.word	0x08009b9d
 8009b5c:	08009ba5 	.word	0x08009ba5
 8009b60:	08009bad 	.word	0x08009bad
 8009b64:	08009bb5 	.word	0x08009bb5
 8009b68:	08009bbd 	.word	0x08009bbd
 8009b6c:	08009bc5 	.word	0x08009bc5
 8009b70:	08009bcd 	.word	0x08009bcd
 8009b74:	08009bd5 	.word	0x08009bd5
 8009b78:	08009bdd 	.word	0x08009bdd
 8009b7c:	08009be5 	.word	0x08009be5
 8009b80:	08009bed 	.word	0x08009bed
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009b8a:	e038      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009b92:	e034      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009b9a:	e030      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009ba2:	e02c      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009baa:	e028      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009bb2:	e024      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009bba:	e020      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009bc2:	e01c      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009bca:	e018      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009bd2:	e014      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009bda:	e010      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009be2:	e00c      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009bea:	e008      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009bf2:	e004      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	75fb      	strb	r3, [r7, #23]
        break;
 8009bf8:	e001      	b.n	8009bfe <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	371c      	adds	r7, #28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a34      	ldr	r2, [pc, #208]	; (8009cf8 <TIM_Base_SetConfig+0xe4>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d00f      	beq.n	8009c4c <TIM_Base_SetConfig+0x38>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c32:	d00b      	beq.n	8009c4c <TIM_Base_SetConfig+0x38>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a31      	ldr	r2, [pc, #196]	; (8009cfc <TIM_Base_SetConfig+0xe8>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d007      	beq.n	8009c4c <TIM_Base_SetConfig+0x38>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a30      	ldr	r2, [pc, #192]	; (8009d00 <TIM_Base_SetConfig+0xec>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d003      	beq.n	8009c4c <TIM_Base_SetConfig+0x38>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a2f      	ldr	r2, [pc, #188]	; (8009d04 <TIM_Base_SetConfig+0xf0>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d108      	bne.n	8009c5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a25      	ldr	r2, [pc, #148]	; (8009cf8 <TIM_Base_SetConfig+0xe4>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d01b      	beq.n	8009c9e <TIM_Base_SetConfig+0x8a>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c6c:	d017      	beq.n	8009c9e <TIM_Base_SetConfig+0x8a>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a22      	ldr	r2, [pc, #136]	; (8009cfc <TIM_Base_SetConfig+0xe8>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d013      	beq.n	8009c9e <TIM_Base_SetConfig+0x8a>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a21      	ldr	r2, [pc, #132]	; (8009d00 <TIM_Base_SetConfig+0xec>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d00f      	beq.n	8009c9e <TIM_Base_SetConfig+0x8a>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a20      	ldr	r2, [pc, #128]	; (8009d04 <TIM_Base_SetConfig+0xf0>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d00b      	beq.n	8009c9e <TIM_Base_SetConfig+0x8a>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a1f      	ldr	r2, [pc, #124]	; (8009d08 <TIM_Base_SetConfig+0xf4>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d007      	beq.n	8009c9e <TIM_Base_SetConfig+0x8a>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a1e      	ldr	r2, [pc, #120]	; (8009d0c <TIM_Base_SetConfig+0xf8>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d003      	beq.n	8009c9e <TIM_Base_SetConfig+0x8a>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a1d      	ldr	r2, [pc, #116]	; (8009d10 <TIM_Base_SetConfig+0xfc>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d108      	bne.n	8009cb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	689a      	ldr	r2, [r3, #8]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a08      	ldr	r2, [pc, #32]	; (8009cf8 <TIM_Base_SetConfig+0xe4>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d103      	bne.n	8009ce4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	691a      	ldr	r2, [r3, #16]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	615a      	str	r2, [r3, #20]
}
 8009cea:	bf00      	nop
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	40010000 	.word	0x40010000
 8009cfc:	40000400 	.word	0x40000400
 8009d00:	40000800 	.word	0x40000800
 8009d04:	40000c00 	.word	0x40000c00
 8009d08:	40014000 	.word	0x40014000
 8009d0c:	40014400 	.word	0x40014400
 8009d10:	40014800 	.word	0x40014800

08009d14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	f023 0201 	bic.w	r2, r3, #1
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f023 0303 	bic.w	r3, r3, #3
 8009d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f023 0302 	bic.w	r3, r3, #2
 8009d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a1c      	ldr	r2, [pc, #112]	; (8009ddc <TIM_OC1_SetConfig+0xc8>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d10c      	bne.n	8009d8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	f023 0308 	bic.w	r3, r3, #8
 8009d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f023 0304 	bic.w	r3, r3, #4
 8009d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a13      	ldr	r2, [pc, #76]	; (8009ddc <TIM_OC1_SetConfig+0xc8>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d111      	bne.n	8009db6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	693a      	ldr	r2, [r7, #16]
 8009dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	685a      	ldr	r2, [r3, #4]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	621a      	str	r2, [r3, #32]
}
 8009dd0:	bf00      	nop
 8009dd2:	371c      	adds	r7, #28
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr
 8009ddc:	40010000 	.word	0x40010000

08009de0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	f023 0210 	bic.w	r2, r3, #16
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	021b      	lsls	r3, r3, #8
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	f023 0320 	bic.w	r3, r3, #32
 8009e2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	011b      	lsls	r3, r3, #4
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a1e      	ldr	r2, [pc, #120]	; (8009eb4 <TIM_OC2_SetConfig+0xd4>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d10d      	bne.n	8009e5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	011b      	lsls	r3, r3, #4
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a15      	ldr	r2, [pc, #84]	; (8009eb4 <TIM_OC2_SetConfig+0xd4>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d113      	bne.n	8009e8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	695b      	ldr	r3, [r3, #20]
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	685a      	ldr	r2, [r3, #4]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	621a      	str	r2, [r3, #32]
}
 8009ea6:	bf00      	nop
 8009ea8:	371c      	adds	r7, #28
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	40010000 	.word	0x40010000

08009eb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	69db      	ldr	r3, [r3, #28]
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f023 0303 	bic.w	r3, r3, #3
 8009eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	021b      	lsls	r3, r3, #8
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a1d      	ldr	r2, [pc, #116]	; (8009f88 <TIM_OC3_SetConfig+0xd0>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d10d      	bne.n	8009f32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	021b      	lsls	r3, r3, #8
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a14      	ldr	r2, [pc, #80]	; (8009f88 <TIM_OC3_SetConfig+0xd0>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d113      	bne.n	8009f62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	011b      	lsls	r3, r3, #4
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	011b      	lsls	r3, r3, #4
 8009f5c:	693a      	ldr	r2, [r7, #16]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	621a      	str	r2, [r3, #32]
}
 8009f7c:	bf00      	nop
 8009f7e:	371c      	adds	r7, #28
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr
 8009f88:	40010000 	.word	0x40010000

08009f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b087      	sub	sp, #28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	021b      	lsls	r3, r3, #8
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	031b      	lsls	r3, r3, #12
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a10      	ldr	r2, [pc, #64]	; (800a028 <TIM_OC4_SetConfig+0x9c>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d109      	bne.n	800a000 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ff2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	695b      	ldr	r3, [r3, #20]
 8009ff8:	019b      	lsls	r3, r3, #6
 8009ffa:	697a      	ldr	r2, [r7, #20]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	697a      	ldr	r2, [r7, #20]
 800a004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	621a      	str	r2, [r3, #32]
}
 800a01a:	bf00      	nop
 800a01c:	371c      	adds	r7, #28
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	40010000 	.word	0x40010000

0800a02c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b087      	sub	sp, #28
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6a1b      	ldr	r3, [r3, #32]
 800a03c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	f023 0201 	bic.w	r2, r3, #1
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	011b      	lsls	r3, r3, #4
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	4313      	orrs	r3, r2
 800a060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f023 030a 	bic.w	r3, r3, #10
 800a068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	4313      	orrs	r3, r2
 800a070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	693a      	ldr	r2, [r7, #16]
 800a076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	697a      	ldr	r2, [r7, #20]
 800a07c:	621a      	str	r2, [r3, #32]
}
 800a07e:	bf00      	nop
 800a080:	371c      	adds	r7, #28
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b087      	sub	sp, #28
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	f023 0210 	bic.w	r2, r3, #16
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6a1b      	ldr	r3, [r3, #32]
 800a0ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	031b      	lsls	r3, r3, #12
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a0c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	011b      	lsls	r3, r3, #4
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	693a      	ldr	r2, [r7, #16]
 800a0dc:	621a      	str	r2, [r3, #32]
}
 800a0de:	bf00      	nop
 800a0e0:	371c      	adds	r7, #28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b085      	sub	sp, #20
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4313      	orrs	r3, r2
 800a108:	f043 0307 	orr.w	r3, r3, #7
 800a10c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	609a      	str	r2, [r3, #8]
}
 800a114:	bf00      	nop
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a13a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	021a      	lsls	r2, r3, #8
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	431a      	orrs	r2, r3
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	4313      	orrs	r3, r2
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	609a      	str	r2, [r3, #8]
}
 800a154:	bf00      	nop
 800a156:	371c      	adds	r7, #28
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a160:	b480      	push	{r7}
 800a162:	b087      	sub	sp, #28
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f003 031f 	and.w	r3, r3, #31
 800a172:	2201      	movs	r2, #1
 800a174:	fa02 f303 	lsl.w	r3, r2, r3
 800a178:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6a1a      	ldr	r2, [r3, #32]
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	43db      	mvns	r3, r3
 800a182:	401a      	ands	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6a1a      	ldr	r2, [r3, #32]
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	f003 031f 	and.w	r3, r3, #31
 800a192:	6879      	ldr	r1, [r7, #4]
 800a194:	fa01 f303 	lsl.w	r3, r1, r3
 800a198:	431a      	orrs	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	621a      	str	r2, [r3, #32]
}
 800a19e:	bf00      	nop
 800a1a0:	371c      	adds	r7, #28
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
	...

0800a1ac <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a1c      	ldr	r2, [pc, #112]	; (800a228 <TIM_ResetCallback+0x7c>)
 800a1b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a1b      	ldr	r2, [pc, #108]	; (800a22c <TIM_ResetCallback+0x80>)
 800a1c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a1a      	ldr	r2, [pc, #104]	; (800a230 <TIM_ResetCallback+0x84>)
 800a1c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a19      	ldr	r2, [pc, #100]	; (800a234 <TIM_ResetCallback+0x88>)
 800a1d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a18      	ldr	r2, [pc, #96]	; (800a238 <TIM_ResetCallback+0x8c>)
 800a1d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a17      	ldr	r2, [pc, #92]	; (800a23c <TIM_ResetCallback+0x90>)
 800a1e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a16      	ldr	r2, [pc, #88]	; (800a240 <TIM_ResetCallback+0x94>)
 800a1e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a15      	ldr	r2, [pc, #84]	; (800a244 <TIM_ResetCallback+0x98>)
 800a1f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a14      	ldr	r2, [pc, #80]	; (800a248 <TIM_ResetCallback+0x9c>)
 800a1f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a13      	ldr	r2, [pc, #76]	; (800a24c <TIM_ResetCallback+0xa0>)
 800a200:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a12      	ldr	r2, [pc, #72]	; (800a250 <TIM_ResetCallback+0xa4>)
 800a208:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a11      	ldr	r2, [pc, #68]	; (800a254 <TIM_ResetCallback+0xa8>)
 800a210:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a10      	ldr	r2, [pc, #64]	; (800a258 <TIM_ResetCallback+0xac>)
 800a218:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	080098b7 	.word	0x080098b7
 800a22c:	080098cb 	.word	0x080098cb
 800a230:	08009943 	.word	0x08009943
 800a234:	08009957 	.word	0x08009957
 800a238:	080098f3 	.word	0x080098f3
 800a23c:	08009907 	.word	0x08009907
 800a240:	080098df 	.word	0x080098df
 800a244:	0800991b 	.word	0x0800991b
 800a248:	0800992f 	.word	0x0800992f
 800a24c:	0800996b 	.word	0x0800996b
 800a250:	0800a339 	.word	0x0800a339
 800a254:	0800a34d 	.word	0x0800a34d
 800a258:	0800a361 	.word	0x0800a361

0800a25c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d101      	bne.n	800a274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a270:	2302      	movs	r3, #2
 800a272:	e050      	b.n	800a316 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2202      	movs	r2, #2
 800a280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a29a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a1c      	ldr	r2, [pc, #112]	; (800a324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d018      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2c0:	d013      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a18      	ldr	r2, [pc, #96]	; (800a328 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d00e      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a16      	ldr	r2, [pc, #88]	; (800a32c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d009      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a15      	ldr	r2, [pc, #84]	; (800a330 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d004      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a13      	ldr	r2, [pc, #76]	; (800a334 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d10c      	bne.n	800a304 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	40010000 	.word	0x40010000
 800a328:	40000400 	.word	0x40000400
 800a32c:	40000800 	.word	0x40000800
 800a330:	40000c00 	.word	0x40000c00
 800a334:	40014000 	.word	0x40014000

0800a338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	e04a      	b.n	800a41c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d111      	bne.n	800a3b6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fd2c 	bl	800adf8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d102      	bne.n	800a3ae <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a1e      	ldr	r2, [pc, #120]	; (800a424 <HAL_UART_Init+0xb0>)
 800a3ac:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2224      	movs	r2, #36	; 0x24
 800a3ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68da      	ldr	r2, [r3, #12]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fff6 	bl	800b3c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	691a      	ldr	r2, [r3, #16]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	695a      	ldr	r2, [r3, #20]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68da      	ldr	r2, [r3, #12]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a402:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2220      	movs	r2, #32
 800a40e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2220      	movs	r2, #32
 800a416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	08004811 	.word	0x08004811

0800a428 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	460b      	mov	r3, r1
 800a432:	607a      	str	r2, [r7, #4]
 800a434:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d107      	bne.n	800a450 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a444:	f043 0220 	orr.w	r2, r3, #32
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	e08c      	b.n	800a56a <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a456:	2b01      	cmp	r3, #1
 800a458:	d101      	bne.n	800a45e <HAL_UART_RegisterCallback+0x36>
 800a45a:	2302      	movs	r3, #2
 800a45c:	e085      	b.n	800a56a <HAL_UART_RegisterCallback+0x142>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b20      	cmp	r3, #32
 800a470:	d151      	bne.n	800a516 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800a472:	7afb      	ldrb	r3, [r7, #11]
 800a474:	2b0c      	cmp	r3, #12
 800a476:	d845      	bhi.n	800a504 <HAL_UART_RegisterCallback+0xdc>
 800a478:	a201      	add	r2, pc, #4	; (adr r2, 800a480 <HAL_UART_RegisterCallback+0x58>)
 800a47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47e:	bf00      	nop
 800a480:	0800a4b5 	.word	0x0800a4b5
 800a484:	0800a4bd 	.word	0x0800a4bd
 800a488:	0800a4c5 	.word	0x0800a4c5
 800a48c:	0800a4cd 	.word	0x0800a4cd
 800a490:	0800a4d5 	.word	0x0800a4d5
 800a494:	0800a4dd 	.word	0x0800a4dd
 800a498:	0800a4e5 	.word	0x0800a4e5
 800a49c:	0800a4ed 	.word	0x0800a4ed
 800a4a0:	0800a505 	.word	0x0800a505
 800a4a4:	0800a505 	.word	0x0800a505
 800a4a8:	0800a505 	.word	0x0800a505
 800a4ac:	0800a4f5 	.word	0x0800a4f5
 800a4b0:	0800a4fd 	.word	0x0800a4fd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800a4ba:	e051      	b.n	800a560 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a4c2:	e04d      	b.n	800a560 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a4ca:	e049      	b.n	800a560 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a4d2:	e045      	b.n	800a560 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a4da:	e041      	b.n	800a560 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a4e2:	e03d      	b.n	800a560 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a4ea:	e039      	b.n	800a560 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a4f2:	e035      	b.n	800a560 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a4fa:	e031      	b.n	800a560 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a502:	e02d      	b.n	800a560 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a508:	f043 0220 	orr.w	r2, r3, #32
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	75fb      	strb	r3, [r7, #23]
        break;
 800a514:	e024      	b.n	800a560 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d116      	bne.n	800a550 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800a522:	7afb      	ldrb	r3, [r7, #11]
 800a524:	2b0b      	cmp	r3, #11
 800a526:	d002      	beq.n	800a52e <HAL_UART_RegisterCallback+0x106>
 800a528:	2b0c      	cmp	r3, #12
 800a52a:	d004      	beq.n	800a536 <HAL_UART_RegisterCallback+0x10e>
 800a52c:	e007      	b.n	800a53e <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a534:	e014      	b.n	800a560 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a53c:	e010      	b.n	800a560 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a542:	f043 0220 	orr.w	r2, r3, #32
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	75fb      	strb	r3, [r7, #23]
        break;
 800a54e:	e007      	b.n	800a560 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a554:	f043 0220 	orr.w	r2, r3, #32
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a568:	7dfb      	ldrb	r3, [r7, #23]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	371c      	adds	r7, #28
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop

0800a578 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	4613      	mov	r3, r2
 800a584:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	2b20      	cmp	r3, #32
 800a590:	d11d      	bne.n	800a5ce <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <HAL_UART_Receive_IT+0x26>
 800a598:	88fb      	ldrh	r3, [r7, #6]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e016      	b.n	800a5d0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d101      	bne.n	800a5b0 <HAL_UART_Receive_IT+0x38>
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	e00f      	b.n	800a5d0 <HAL_UART_Receive_IT+0x58>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a5be:	88fb      	ldrh	r3, [r7, #6]
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	68b9      	ldr	r1, [r7, #8]
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f000 fcf7 	bl	800afb8 <UART_Start_Receive_IT>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	e000      	b.n	800a5d0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a5ce:	2302      	movs	r3, #2
  }
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b08c      	sub	sp, #48	; 0x30
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	2b20      	cmp	r3, #32
 800a5f0:	d165      	bne.n	800a6be <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d002      	beq.n	800a5fe <HAL_UART_Transmit_DMA+0x26>
 800a5f8:	88fb      	ldrh	r3, [r7, #6]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d101      	bne.n	800a602 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e05e      	b.n	800a6c0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d101      	bne.n	800a610 <HAL_UART_Transmit_DMA+0x38>
 800a60c:	2302      	movs	r3, #2
 800a60e:	e057      	b.n	800a6c0 <HAL_UART_Transmit_DMA+0xe8>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a618:	68ba      	ldr	r2, [r7, #8]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	88fa      	ldrh	r2, [r7, #6]
 800a622:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	88fa      	ldrh	r2, [r7, #6]
 800a628:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2221      	movs	r2, #33	; 0x21
 800a634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63c:	4a22      	ldr	r2, [pc, #136]	; (800a6c8 <HAL_UART_Transmit_DMA+0xf0>)
 800a63e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a644:	4a21      	ldr	r2, [pc, #132]	; (800a6cc <HAL_UART_Transmit_DMA+0xf4>)
 800a646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64c:	4a20      	ldr	r2, [pc, #128]	; (800a6d0 <HAL_UART_Transmit_DMA+0xf8>)
 800a64e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a654:	2200      	movs	r2, #0
 800a656:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a658:	f107 0308 	add.w	r3, r7, #8
 800a65c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a664:	6819      	ldr	r1, [r3, #0]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3304      	adds	r3, #4
 800a66c:	461a      	mov	r2, r3
 800a66e:	88fb      	ldrh	r3, [r7, #6]
 800a670:	f7fb f85e 	bl	8005730 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a67c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3314      	adds	r3, #20
 800a68c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	e853 3f00 	ldrex	r3, [r3]
 800a694:	617b      	str	r3, [r7, #20]
   return(result);
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a69c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3314      	adds	r3, #20
 800a6a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6a6:	627a      	str	r2, [r7, #36]	; 0x24
 800a6a8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6aa:	6a39      	ldr	r1, [r7, #32]
 800a6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ae:	e841 2300 	strex	r3, r2, [r1]
 800a6b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1e5      	bne.n	800a686 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	e000      	b.n	800a6c0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a6be:	2302      	movs	r3, #2
  }
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3730      	adds	r7, #48	; 0x30
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	0800ae69 	.word	0x0800ae69
 800a6cc:	0800af05 	.word	0x0800af05
 800a6d0:	0800af23 	.word	0x0800af23

0800a6d4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b09a      	sub	sp, #104	; 0x68
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	330c      	adds	r3, #12
 800a6e2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6e6:	e853 3f00 	ldrex	r3, [r3]
 800a6ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a6ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6f2:	667b      	str	r3, [r7, #100]	; 0x64
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	330c      	adds	r3, #12
 800a6fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6fc:	657a      	str	r2, [r7, #84]	; 0x54
 800a6fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a700:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a702:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a704:	e841 2300 	strex	r3, r2, [r1]
 800a708:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a70a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1e5      	bne.n	800a6dc <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3314      	adds	r3, #20
 800a716:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71a:	e853 3f00 	ldrex	r3, [r3]
 800a71e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a722:	f023 0301 	bic.w	r3, r3, #1
 800a726:	663b      	str	r3, [r7, #96]	; 0x60
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	3314      	adds	r3, #20
 800a72e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a730:	643a      	str	r2, [r7, #64]	; 0x40
 800a732:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a738:	e841 2300 	strex	r3, r2, [r1]
 800a73c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1e5      	bne.n	800a710 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d119      	bne.n	800a780 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	330c      	adds	r3, #12
 800a752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	6a3b      	ldr	r3, [r7, #32]
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	f023 0310 	bic.w	r3, r3, #16
 800a762:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	330c      	adds	r3, #12
 800a76a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a76c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a76e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e5      	bne.n	800a74c <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	695b      	ldr	r3, [r3, #20]
 800a786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a78a:	2b40      	cmp	r3, #64	; 0x40
 800a78c:	d136      	bne.n	800a7fc <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	3314      	adds	r3, #20
 800a794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	e853 3f00 	ldrex	r3, [r3]
 800a79c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7a4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	3314      	adds	r3, #20
 800a7ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7ae:	61ba      	str	r2, [r7, #24]
 800a7b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b2:	6979      	ldr	r1, [r7, #20]
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	e841 2300 	strex	r3, r2, [r1]
 800a7ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1e5      	bne.n	800a78e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d018      	beq.n	800a7fc <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fb f802 	bl	80057e0 <HAL_DMA_Abort>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00c      	beq.n	800a7fc <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fb fa24 	bl	8005c34 <HAL_DMA_GetError>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b20      	cmp	r3, #32
 800a7f0:	d104      	bne.n	800a7fc <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2210      	movs	r2, #16
 800a7f6:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e00a      	b.n	800a812 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2220      	movs	r2, #32
 800a806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3768      	adds	r7, #104	; 0x68
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
	...

0800a81c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b0ba      	sub	sp, #232	; 0xe8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a842:	2300      	movs	r3, #0
 800a844:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a848:	2300      	movs	r3, #0
 800a84a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a84e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a852:	f003 030f 	and.w	r3, r3, #15
 800a856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a85a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10f      	bne.n	800a882 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a866:	f003 0320 	and.w	r3, r3, #32
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d009      	beq.n	800a882 <HAL_UART_IRQHandler+0x66>
 800a86e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a872:	f003 0320 	and.w	r3, r3, #32
 800a876:	2b00      	cmp	r3, #0
 800a878:	d003      	beq.n	800a882 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fce3 	bl	800b246 <UART_Receive_IT>
      return;
 800a880:	e25b      	b.n	800ad3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 80e1 	beq.w	800aa4e <HAL_UART_IRQHandler+0x232>
 800a88c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a890:	f003 0301 	and.w	r3, r3, #1
 800a894:	2b00      	cmp	r3, #0
 800a896:	d106      	bne.n	800a8a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a89c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 80d4 	beq.w	800aa4e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a8a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8aa:	f003 0301 	and.w	r3, r3, #1
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00b      	beq.n	800a8ca <HAL_UART_IRQHandler+0xae>
 800a8b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d005      	beq.n	800a8ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c2:	f043 0201 	orr.w	r2, r3, #1
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ce:	f003 0304 	and.w	r3, r3, #4
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00b      	beq.n	800a8ee <HAL_UART_IRQHandler+0xd2>
 800a8d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8da:	f003 0301 	and.w	r3, r3, #1
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d005      	beq.n	800a8ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e6:	f043 0202 	orr.w	r2, r3, #2
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a8ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8f2:	f003 0302 	and.w	r3, r3, #2
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00b      	beq.n	800a912 <HAL_UART_IRQHandler+0xf6>
 800a8fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	2b00      	cmp	r3, #0
 800a904:	d005      	beq.n	800a912 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90a:	f043 0204 	orr.w	r2, r3, #4
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a916:	f003 0308 	and.w	r3, r3, #8
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d011      	beq.n	800a942 <HAL_UART_IRQHandler+0x126>
 800a91e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a922:	f003 0320 	and.w	r3, r3, #32
 800a926:	2b00      	cmp	r3, #0
 800a928:	d105      	bne.n	800a936 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a92a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a92e:	f003 0301 	and.w	r3, r3, #1
 800a932:	2b00      	cmp	r3, #0
 800a934:	d005      	beq.n	800a942 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a93a:	f043 0208 	orr.w	r2, r3, #8
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a946:	2b00      	cmp	r3, #0
 800a948:	f000 81f2 	beq.w	800ad30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a94c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a950:	f003 0320 	and.w	r3, r3, #32
 800a954:	2b00      	cmp	r3, #0
 800a956:	d008      	beq.n	800a96a <HAL_UART_IRQHandler+0x14e>
 800a958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a95c:	f003 0320 	and.w	r3, r3, #32
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fc6e 	bl	800b246 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a974:	2b40      	cmp	r3, #64	; 0x40
 800a976:	bf0c      	ite	eq
 800a978:	2301      	moveq	r3, #1
 800a97a:	2300      	movne	r3, #0
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a986:	f003 0308 	and.w	r3, r3, #8
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d103      	bne.n	800a996 <HAL_UART_IRQHandler+0x17a>
 800a98e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a992:	2b00      	cmp	r3, #0
 800a994:	d051      	beq.n	800aa3a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 fb74 	bl	800b084 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a6:	2b40      	cmp	r3, #64	; 0x40
 800a9a8:	d142      	bne.n	800aa30 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	3314      	adds	r3, #20
 800a9b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a9b8:	e853 3f00 	ldrex	r3, [r3]
 800a9bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a9c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a9c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3314      	adds	r3, #20
 800a9d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a9d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a9da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a9e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a9ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1d9      	bne.n	800a9aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d013      	beq.n	800aa26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa02:	4a7f      	ldr	r2, [pc, #508]	; (800ac00 <HAL_UART_IRQHandler+0x3e4>)
 800aa04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fa ff58 	bl	80058c0 <HAL_DMA_Abort_IT>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d019      	beq.n	800aa4a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aa20:	4610      	mov	r0, r2
 800aa22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa24:	e011      	b.n	800aa4a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa2e:	e00c      	b.n	800aa4a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa38:	e007      	b.n	800aa4a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aa48:	e172      	b.n	800ad30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa4a:	bf00      	nop
    return;
 800aa4c:	e170      	b.n	800ad30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	f040 814c 	bne.w	800acf0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800aa58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa5c:	f003 0310 	and.w	r3, r3, #16
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f000 8145 	beq.w	800acf0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aa66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa6a:	f003 0310 	and.w	r3, r3, #16
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f000 813e 	beq.w	800acf0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa74:	2300      	movs	r3, #0
 800aa76:	60bb      	str	r3, [r7, #8]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	60bb      	str	r3, [r7, #8]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	60bb      	str	r3, [r7, #8]
 800aa88:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	695b      	ldr	r3, [r3, #20]
 800aa90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa94:	2b40      	cmp	r3, #64	; 0x40
 800aa96:	f040 80b5 	bne.w	800ac04 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aaa6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f000 8142 	beq.w	800ad34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aab4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aab8:	429a      	cmp	r2, r3
 800aaba:	f080 813b 	bcs.w	800ad34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aac4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaca:	69db      	ldr	r3, [r3, #28]
 800aacc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aad0:	f000 8088 	beq.w	800abe4 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	330c      	adds	r3, #12
 800aada:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aade:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aae2:	e853 3f00 	ldrex	r3, [r3]
 800aae6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aaea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aaee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aaf2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	330c      	adds	r3, #12
 800aafc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ab00:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ab04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ab0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ab10:	e841 2300 	strex	r3, r2, [r1]
 800ab14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ab18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1d9      	bne.n	800aad4 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3314      	adds	r3, #20
 800ab26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab2a:	e853 3f00 	ldrex	r3, [r3]
 800ab2e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ab30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab32:	f023 0301 	bic.w	r3, r3, #1
 800ab36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3314      	adds	r3, #20
 800ab40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ab44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ab48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ab4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ab50:	e841 2300 	strex	r3, r2, [r1]
 800ab54:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ab56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1e1      	bne.n	800ab20 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	3314      	adds	r3, #20
 800ab62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab66:	e853 3f00 	ldrex	r3, [r3]
 800ab6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ab6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	3314      	adds	r3, #20
 800ab7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ab80:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ab82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ab86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ab88:	e841 2300 	strex	r3, r2, [r1]
 800ab8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ab8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1e3      	bne.n	800ab5c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2220      	movs	r2, #32
 800ab98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	330c      	adds	r3, #12
 800aba8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abac:	e853 3f00 	ldrex	r3, [r3]
 800abb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800abb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abb4:	f023 0310 	bic.w	r3, r3, #16
 800abb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	330c      	adds	r3, #12
 800abc2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800abc6:	65ba      	str	r2, [r7, #88]	; 0x58
 800abc8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800abce:	e841 2300 	strex	r3, r2, [r1]
 800abd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800abd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1e3      	bne.n	800aba2 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fa fdfe 	bl	80057e0 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800abf0:	b292      	uxth	r2, r2
 800abf2:	1a8a      	subs	r2, r1, r2
 800abf4:	b292      	uxth	r2, r2
 800abf6:	4611      	mov	r1, r2
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800abfc:	e09a      	b.n	800ad34 <HAL_UART_IRQHandler+0x518>
 800abfe:	bf00      	nop
 800ac00:	0800b14b 	.word	0x0800b14b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f000 808c 	beq.w	800ad38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ac20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 8087 	beq.w	800ad38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	330c      	adds	r3, #12
 800ac30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac34:	e853 3f00 	ldrex	r3, [r3]
 800ac38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	330c      	adds	r3, #12
 800ac4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ac4e:	647a      	str	r2, [r7, #68]	; 0x44
 800ac50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac56:	e841 2300 	strex	r3, r2, [r1]
 800ac5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1e3      	bne.n	800ac2a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	3314      	adds	r3, #20
 800ac68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	e853 3f00 	ldrex	r3, [r3]
 800ac70:	623b      	str	r3, [r7, #32]
   return(result);
 800ac72:	6a3b      	ldr	r3, [r7, #32]
 800ac74:	f023 0301 	bic.w	r3, r3, #1
 800ac78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3314      	adds	r3, #20
 800ac82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ac86:	633a      	str	r2, [r7, #48]	; 0x30
 800ac88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac8e:	e841 2300 	strex	r3, r2, [r1]
 800ac92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1e3      	bne.n	800ac62 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2220      	movs	r2, #32
 800ac9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	330c      	adds	r3, #12
 800acae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	e853 3f00 	ldrex	r3, [r3]
 800acb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f023 0310 	bic.w	r3, r3, #16
 800acbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	330c      	adds	r3, #12
 800acc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800accc:	61fa      	str	r2, [r7, #28]
 800acce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd0:	69b9      	ldr	r1, [r7, #24]
 800acd2:	69fa      	ldr	r2, [r7, #28]
 800acd4:	e841 2300 	strex	r3, r2, [r1]
 800acd8:	617b      	str	r3, [r7, #20]
   return(result);
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1e3      	bne.n	800aca8 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ace4:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800ace8:	4611      	mov	r1, r2
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800acee:	e023      	b.n	800ad38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800acf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d009      	beq.n	800ad10 <HAL_UART_IRQHandler+0x4f4>
 800acfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d003      	beq.n	800ad10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fa33 	bl	800b174 <UART_Transmit_IT>
    return;
 800ad0e:	e014      	b.n	800ad3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ad10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00e      	beq.n	800ad3a <HAL_UART_IRQHandler+0x51e>
 800ad1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d008      	beq.n	800ad3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fa73 	bl	800b214 <UART_EndTransmit_IT>
    return;
 800ad2e:	e004      	b.n	800ad3a <HAL_UART_IRQHandler+0x51e>
    return;
 800ad30:	bf00      	nop
 800ad32:	e002      	b.n	800ad3a <HAL_UART_IRQHandler+0x51e>
      return;
 800ad34:	bf00      	nop
 800ad36:	e000      	b.n	800ad3a <HAL_UART_IRQHandler+0x51e>
      return;
 800ad38:	bf00      	nop
  }
}
 800ad3a:	37e8      	adds	r7, #232	; 0xe8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ad48:	bf00      	nop
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ad98:	bf00      	nop
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a10      	ldr	r2, [pc, #64]	; (800ae44 <UART_InitCallbacksToDefault+0x4c>)
 800ae04:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a0f      	ldr	r2, [pc, #60]	; (800ae48 <UART_InitCallbacksToDefault+0x50>)
 800ae0a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a0f      	ldr	r2, [pc, #60]	; (800ae4c <UART_InitCallbacksToDefault+0x54>)
 800ae10:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4a0e      	ldr	r2, [pc, #56]	; (800ae50 <UART_InitCallbacksToDefault+0x58>)
 800ae16:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a0e      	ldr	r2, [pc, #56]	; (800ae54 <UART_InitCallbacksToDefault+0x5c>)
 800ae1c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a0d      	ldr	r2, [pc, #52]	; (800ae58 <UART_InitCallbacksToDefault+0x60>)
 800ae22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a0d      	ldr	r2, [pc, #52]	; (800ae5c <UART_InitCallbacksToDefault+0x64>)
 800ae28:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4a0c      	ldr	r2, [pc, #48]	; (800ae60 <UART_InitCallbacksToDefault+0x68>)
 800ae2e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a0c      	ldr	r2, [pc, #48]	; (800ae64 <UART_InitCallbacksToDefault+0x6c>)
 800ae34:	669a      	str	r2, [r3, #104]	; 0x68

}
 800ae36:	bf00      	nop
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	0800ad55 	.word	0x0800ad55
 800ae48:	0800ad41 	.word	0x0800ad41
 800ae4c:	0800ad7d 	.word	0x0800ad7d
 800ae50:	0800ad69 	.word	0x0800ad69
 800ae54:	0800ad91 	.word	0x0800ad91
 800ae58:	0800ada5 	.word	0x0800ada5
 800ae5c:	0800adb9 	.word	0x0800adb9
 800ae60:	0800adcd 	.word	0x0800adcd
 800ae64:	0800ade1 	.word	0x0800ade1

0800ae68 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b090      	sub	sp, #64	; 0x40
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae74:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d137      	bne.n	800aef4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ae84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae86:	2200      	movs	r2, #0
 800ae88:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	3314      	adds	r3, #20
 800ae90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	e853 3f00 	ldrex	r3, [r3]
 800ae98:	623b      	str	r3, [r7, #32]
   return(result);
 800ae9a:	6a3b      	ldr	r3, [r7, #32]
 800ae9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aea0:	63bb      	str	r3, [r7, #56]	; 0x38
 800aea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3314      	adds	r3, #20
 800aea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aeaa:	633a      	str	r2, [r7, #48]	; 0x30
 800aeac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aeb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeb2:	e841 2300 	strex	r3, r2, [r1]
 800aeb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1e5      	bne.n	800ae8a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	330c      	adds	r3, #12
 800aec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	e853 3f00 	ldrex	r3, [r3]
 800aecc:	60fb      	str	r3, [r7, #12]
   return(result);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aed4:	637b      	str	r3, [r7, #52]	; 0x34
 800aed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	330c      	adds	r3, #12
 800aedc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aede:	61fa      	str	r2, [r7, #28]
 800aee0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee2:	69b9      	ldr	r1, [r7, #24]
 800aee4:	69fa      	ldr	r2, [r7, #28]
 800aee6:	e841 2300 	strex	r3, r2, [r1]
 800aeea:	617b      	str	r3, [r7, #20]
   return(result);
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1e5      	bne.n	800aebe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aef2:	e003      	b.n	800aefc <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800aef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aef8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aefa:	4798      	blx	r3
}
 800aefc:	bf00      	nop
 800aefe:	3740      	adds	r7, #64	; 0x40
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af10:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af1a:	bf00      	nop
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b084      	sub	sp, #16
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af32:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	695b      	ldr	r3, [r3, #20]
 800af3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af3e:	2b80      	cmp	r3, #128	; 0x80
 800af40:	bf0c      	ite	eq
 800af42:	2301      	moveq	r3, #1
 800af44:	2300      	movne	r3, #0
 800af46:	b2db      	uxtb	r3, r3
 800af48:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2b21      	cmp	r3, #33	; 0x21
 800af54:	d108      	bne.n	800af68 <UART_DMAError+0x46>
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d005      	beq.n	800af68 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	2200      	movs	r2, #0
 800af60:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800af62:	68b8      	ldr	r0, [r7, #8]
 800af64:	f000 f866 	bl	800b034 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af72:	2b40      	cmp	r3, #64	; 0x40
 800af74:	bf0c      	ite	eq
 800af76:	2301      	moveq	r3, #1
 800af78:	2300      	movne	r3, #0
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af84:	b2db      	uxtb	r3, r3
 800af86:	2b22      	cmp	r3, #34	; 0x22
 800af88:	d108      	bne.n	800af9c <UART_DMAError+0x7a>
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d005      	beq.n	800af9c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	2200      	movs	r2, #0
 800af94:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800af96:	68b8      	ldr	r0, [r7, #8]
 800af98:	f000 f874 	bl	800b084 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa0:	f043 0210 	orr.w	r2, r3, #16
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afac:	68b8      	ldr	r0, [r7, #8]
 800afae:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afb0:	bf00      	nop
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	4613      	mov	r3, r2
 800afc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	68ba      	ldr	r2, [r7, #8]
 800afca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	88fa      	ldrh	r2, [r7, #6]
 800afd0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	88fa      	ldrh	r2, [r7, #6]
 800afd6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2200      	movs	r2, #0
 800afdc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2222      	movs	r2, #34	; 0x22
 800afe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d007      	beq.n	800b006 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68da      	ldr	r2, [r3, #12]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b004:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	695a      	ldr	r2, [r3, #20]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f042 0201 	orr.w	r2, r2, #1
 800b014:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68da      	ldr	r2, [r3, #12]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f042 0220 	orr.w	r2, r2, #32
 800b024:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3714      	adds	r7, #20
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b034:	b480      	push	{r7}
 800b036:	b089      	sub	sp, #36	; 0x24
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	330c      	adds	r3, #12
 800b042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	e853 3f00 	ldrex	r3, [r3]
 800b04a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b052:	61fb      	str	r3, [r7, #28]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	330c      	adds	r3, #12
 800b05a:	69fa      	ldr	r2, [r7, #28]
 800b05c:	61ba      	str	r2, [r7, #24]
 800b05e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b060:	6979      	ldr	r1, [r7, #20]
 800b062:	69ba      	ldr	r2, [r7, #24]
 800b064:	e841 2300 	strex	r3, r2, [r1]
 800b068:	613b      	str	r3, [r7, #16]
   return(result);
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d1e5      	bne.n	800b03c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2220      	movs	r2, #32
 800b074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b078:	bf00      	nop
 800b07a:	3724      	adds	r7, #36	; 0x24
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b084:	b480      	push	{r7}
 800b086:	b095      	sub	sp, #84	; 0x54
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	330c      	adds	r3, #12
 800b092:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b096:	e853 3f00 	ldrex	r3, [r3]
 800b09a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	330c      	adds	r3, #12
 800b0aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0ac:	643a      	str	r2, [r7, #64]	; 0x40
 800b0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0b4:	e841 2300 	strex	r3, r2, [r1]
 800b0b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1e5      	bne.n	800b08c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	3314      	adds	r3, #20
 800b0c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c8:	6a3b      	ldr	r3, [r7, #32]
 800b0ca:	e853 3f00 	ldrex	r3, [r3]
 800b0ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	f023 0301 	bic.w	r3, r3, #1
 800b0d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	3314      	adds	r3, #20
 800b0de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0e8:	e841 2300 	strex	r3, r2, [r1]
 800b0ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1e5      	bne.n	800b0c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d119      	bne.n	800b130 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	330c      	adds	r3, #12
 800b102:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	e853 3f00 	ldrex	r3, [r3]
 800b10a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	f023 0310 	bic.w	r3, r3, #16
 800b112:	647b      	str	r3, [r7, #68]	; 0x44
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	330c      	adds	r3, #12
 800b11a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b11c:	61ba      	str	r2, [r7, #24]
 800b11e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b120:	6979      	ldr	r1, [r7, #20]
 800b122:	69ba      	ldr	r2, [r7, #24]
 800b124:	e841 2300 	strex	r3, r2, [r1]
 800b128:	613b      	str	r3, [r7, #16]
   return(result);
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1e5      	bne.n	800b0fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2220      	movs	r2, #32
 800b134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b13e:	bf00      	nop
 800b140:	3754      	adds	r7, #84	; 0x54
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b156:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2200      	movs	r2, #0
 800b15c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2200      	movs	r2, #0
 800b162:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b16c:	bf00      	nop
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b182:	b2db      	uxtb	r3, r3
 800b184:	2b21      	cmp	r3, #33	; 0x21
 800b186:	d13e      	bne.n	800b206 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b190:	d114      	bne.n	800b1bc <UART_Transmit_IT+0x48>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d110      	bne.n	800b1bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a1b      	ldr	r3, [r3, #32]
 800b19e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a1b      	ldr	r3, [r3, #32]
 800b1b4:	1c9a      	adds	r2, r3, #2
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	621a      	str	r2, [r3, #32]
 800b1ba:	e008      	b.n	800b1ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a1b      	ldr	r3, [r3, #32]
 800b1c0:	1c59      	adds	r1, r3, #1
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	6211      	str	r1, [r2, #32]
 800b1c6:	781a      	ldrb	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d10f      	bne.n	800b202 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68da      	ldr	r2, [r3, #12]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68da      	ldr	r2, [r3, #12]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b200:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b202:	2300      	movs	r3, #0
 800b204:	e000      	b.n	800b208 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b206:	2302      	movs	r3, #2
  }
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68da      	ldr	r2, [r3, #12]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b22a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2220      	movs	r2, #32
 800b230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b08c      	sub	sp, #48	; 0x30
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b254:	b2db      	uxtb	r3, r3
 800b256:	2b22      	cmp	r3, #34	; 0x22
 800b258:	f040 80ad 	bne.w	800b3b6 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b264:	d117      	bne.n	800b296 <UART_Receive_IT+0x50>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d113      	bne.n	800b296 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b26e:	2300      	movs	r3, #0
 800b270:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b276:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	b29b      	uxth	r3, r3
 800b280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b284:	b29a      	uxth	r2, r3
 800b286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b288:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b28e:	1c9a      	adds	r2, r3, #2
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	629a      	str	r2, [r3, #40]	; 0x28
 800b294:	e026      	b.n	800b2e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b29a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b29c:	2300      	movs	r3, #0
 800b29e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2a8:	d007      	beq.n	800b2ba <UART_Receive_IT+0x74>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d10a      	bne.n	800b2c8 <UART_Receive_IT+0x82>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d106      	bne.n	800b2c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c4:	701a      	strb	r2, [r3, #0]
 800b2c6:	e008      	b.n	800b2da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2d4:	b2da      	uxtb	r2, r3
 800b2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2de:	1c5a      	adds	r2, r3, #1
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d15c      	bne.n	800b3b2 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68da      	ldr	r2, [r3, #12]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f022 0220 	bic.w	r2, r2, #32
 800b306:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68da      	ldr	r2, [r3, #12]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	695a      	ldr	r2, [r3, #20]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f022 0201 	bic.w	r2, r2, #1
 800b326:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2220      	movs	r2, #32
 800b32c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b334:	2b01      	cmp	r3, #1
 800b336:	d136      	bne.n	800b3a6 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	330c      	adds	r3, #12
 800b344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	e853 3f00 	ldrex	r3, [r3]
 800b34c:	613b      	str	r3, [r7, #16]
   return(result);
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	f023 0310 	bic.w	r3, r3, #16
 800b354:	627b      	str	r3, [r7, #36]	; 0x24
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	330c      	adds	r3, #12
 800b35c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b35e:	623a      	str	r2, [r7, #32]
 800b360:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b362:	69f9      	ldr	r1, [r7, #28]
 800b364:	6a3a      	ldr	r2, [r7, #32]
 800b366:	e841 2300 	strex	r3, r2, [r1]
 800b36a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1e5      	bne.n	800b33e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f003 0310 	and.w	r3, r3, #16
 800b37c:	2b10      	cmp	r3, #16
 800b37e:	d10a      	bne.n	800b396 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b380:	2300      	movs	r3, #0
 800b382:	60fb      	str	r3, [r7, #12]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	60fb      	str	r3, [r7, #12]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b39e:	4611      	mov	r1, r2
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	4798      	blx	r3
 800b3a4:	e003      	b.n	800b3ae <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	e002      	b.n	800b3b8 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	e000      	b.n	800b3b8 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b3b6:	2302      	movs	r3, #2
  }
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3730      	adds	r7, #48	; 0x30
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3c4:	b0c0      	sub	sp, #256	; 0x100
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b3d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3dc:	68d9      	ldr	r1, [r3, #12]
 800b3de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	ea40 0301 	orr.w	r3, r0, r1
 800b3e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b3ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ee:	689a      	ldr	r2, [r3, #8]
 800b3f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3f4:	691b      	ldr	r3, [r3, #16]
 800b3f6:	431a      	orrs	r2, r3
 800b3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3fc:	695b      	ldr	r3, [r3, #20]
 800b3fe:	431a      	orrs	r2, r3
 800b400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	4313      	orrs	r3, r2
 800b408:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b40c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b418:	f021 010c 	bic.w	r1, r1, #12
 800b41c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b426:	430b      	orrs	r3, r1
 800b428:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b42a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b43a:	6999      	ldr	r1, [r3, #24]
 800b43c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	ea40 0301 	orr.w	r3, r0, r1
 800b446:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	4b8f      	ldr	r3, [pc, #572]	; (800b68c <UART_SetConfig+0x2cc>)
 800b450:	429a      	cmp	r2, r3
 800b452:	d005      	beq.n	800b460 <UART_SetConfig+0xa0>
 800b454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	4b8d      	ldr	r3, [pc, #564]	; (800b690 <UART_SetConfig+0x2d0>)
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d104      	bne.n	800b46a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b460:	f7fd fa6e 	bl	8008940 <HAL_RCC_GetPCLK2Freq>
 800b464:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b468:	e003      	b.n	800b472 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b46a:	f7fd fa55 	bl	8008918 <HAL_RCC_GetPCLK1Freq>
 800b46e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b476:	69db      	ldr	r3, [r3, #28]
 800b478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b47c:	f040 810c 	bne.w	800b698 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b484:	2200      	movs	r2, #0
 800b486:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b48a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b48e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b492:	4622      	mov	r2, r4
 800b494:	462b      	mov	r3, r5
 800b496:	1891      	adds	r1, r2, r2
 800b498:	65b9      	str	r1, [r7, #88]	; 0x58
 800b49a:	415b      	adcs	r3, r3
 800b49c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b49e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b4a2:	4621      	mov	r1, r4
 800b4a4:	eb12 0801 	adds.w	r8, r2, r1
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	eb43 0901 	adc.w	r9, r3, r1
 800b4ae:	f04f 0200 	mov.w	r2, #0
 800b4b2:	f04f 0300 	mov.w	r3, #0
 800b4b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b4ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b4be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b4c2:	4690      	mov	r8, r2
 800b4c4:	4699      	mov	r9, r3
 800b4c6:	4623      	mov	r3, r4
 800b4c8:	eb18 0303 	adds.w	r3, r8, r3
 800b4cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b4d0:	462b      	mov	r3, r5
 800b4d2:	eb49 0303 	adc.w	r3, r9, r3
 800b4d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b4da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b4ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	18db      	adds	r3, r3, r3
 800b4f2:	653b      	str	r3, [r7, #80]	; 0x50
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	eb42 0303 	adc.w	r3, r2, r3
 800b4fa:	657b      	str	r3, [r7, #84]	; 0x54
 800b4fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b500:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b504:	f7f5 fb36 	bl	8000b74 <__aeabi_uldivmod>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	4b61      	ldr	r3, [pc, #388]	; (800b694 <UART_SetConfig+0x2d4>)
 800b50e:	fba3 2302 	umull	r2, r3, r3, r2
 800b512:	095b      	lsrs	r3, r3, #5
 800b514:	011c      	lsls	r4, r3, #4
 800b516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b51a:	2200      	movs	r2, #0
 800b51c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b520:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b524:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b528:	4642      	mov	r2, r8
 800b52a:	464b      	mov	r3, r9
 800b52c:	1891      	adds	r1, r2, r2
 800b52e:	64b9      	str	r1, [r7, #72]	; 0x48
 800b530:	415b      	adcs	r3, r3
 800b532:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b534:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b538:	4641      	mov	r1, r8
 800b53a:	eb12 0a01 	adds.w	sl, r2, r1
 800b53e:	4649      	mov	r1, r9
 800b540:	eb43 0b01 	adc.w	fp, r3, r1
 800b544:	f04f 0200 	mov.w	r2, #0
 800b548:	f04f 0300 	mov.w	r3, #0
 800b54c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b550:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b554:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b558:	4692      	mov	sl, r2
 800b55a:	469b      	mov	fp, r3
 800b55c:	4643      	mov	r3, r8
 800b55e:	eb1a 0303 	adds.w	r3, sl, r3
 800b562:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b566:	464b      	mov	r3, r9
 800b568:	eb4b 0303 	adc.w	r3, fp, r3
 800b56c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b57c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b580:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b584:	460b      	mov	r3, r1
 800b586:	18db      	adds	r3, r3, r3
 800b588:	643b      	str	r3, [r7, #64]	; 0x40
 800b58a:	4613      	mov	r3, r2
 800b58c:	eb42 0303 	adc.w	r3, r2, r3
 800b590:	647b      	str	r3, [r7, #68]	; 0x44
 800b592:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b596:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b59a:	f7f5 faeb 	bl	8000b74 <__aeabi_uldivmod>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	4b3b      	ldr	r3, [pc, #236]	; (800b694 <UART_SetConfig+0x2d4>)
 800b5a6:	fba3 2301 	umull	r2, r3, r3, r1
 800b5aa:	095b      	lsrs	r3, r3, #5
 800b5ac:	2264      	movs	r2, #100	; 0x64
 800b5ae:	fb02 f303 	mul.w	r3, r2, r3
 800b5b2:	1acb      	subs	r3, r1, r3
 800b5b4:	00db      	lsls	r3, r3, #3
 800b5b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b5ba:	4b36      	ldr	r3, [pc, #216]	; (800b694 <UART_SetConfig+0x2d4>)
 800b5bc:	fba3 2302 	umull	r2, r3, r3, r2
 800b5c0:	095b      	lsrs	r3, r3, #5
 800b5c2:	005b      	lsls	r3, r3, #1
 800b5c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b5c8:	441c      	add	r4, r3
 800b5ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b5d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b5d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b5dc:	4642      	mov	r2, r8
 800b5de:	464b      	mov	r3, r9
 800b5e0:	1891      	adds	r1, r2, r2
 800b5e2:	63b9      	str	r1, [r7, #56]	; 0x38
 800b5e4:	415b      	adcs	r3, r3
 800b5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b5ec:	4641      	mov	r1, r8
 800b5ee:	1851      	adds	r1, r2, r1
 800b5f0:	6339      	str	r1, [r7, #48]	; 0x30
 800b5f2:	4649      	mov	r1, r9
 800b5f4:	414b      	adcs	r3, r1
 800b5f6:	637b      	str	r3, [r7, #52]	; 0x34
 800b5f8:	f04f 0200 	mov.w	r2, #0
 800b5fc:	f04f 0300 	mov.w	r3, #0
 800b600:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b604:	4659      	mov	r1, fp
 800b606:	00cb      	lsls	r3, r1, #3
 800b608:	4651      	mov	r1, sl
 800b60a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b60e:	4651      	mov	r1, sl
 800b610:	00ca      	lsls	r2, r1, #3
 800b612:	4610      	mov	r0, r2
 800b614:	4619      	mov	r1, r3
 800b616:	4603      	mov	r3, r0
 800b618:	4642      	mov	r2, r8
 800b61a:	189b      	adds	r3, r3, r2
 800b61c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b620:	464b      	mov	r3, r9
 800b622:	460a      	mov	r2, r1
 800b624:	eb42 0303 	adc.w	r3, r2, r3
 800b628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b62c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b638:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b63c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b640:	460b      	mov	r3, r1
 800b642:	18db      	adds	r3, r3, r3
 800b644:	62bb      	str	r3, [r7, #40]	; 0x28
 800b646:	4613      	mov	r3, r2
 800b648:	eb42 0303 	adc.w	r3, r2, r3
 800b64c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b64e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b652:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b656:	f7f5 fa8d 	bl	8000b74 <__aeabi_uldivmod>
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	4b0d      	ldr	r3, [pc, #52]	; (800b694 <UART_SetConfig+0x2d4>)
 800b660:	fba3 1302 	umull	r1, r3, r3, r2
 800b664:	095b      	lsrs	r3, r3, #5
 800b666:	2164      	movs	r1, #100	; 0x64
 800b668:	fb01 f303 	mul.w	r3, r1, r3
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	00db      	lsls	r3, r3, #3
 800b670:	3332      	adds	r3, #50	; 0x32
 800b672:	4a08      	ldr	r2, [pc, #32]	; (800b694 <UART_SetConfig+0x2d4>)
 800b674:	fba2 2303 	umull	r2, r3, r2, r3
 800b678:	095b      	lsrs	r3, r3, #5
 800b67a:	f003 0207 	and.w	r2, r3, #7
 800b67e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4422      	add	r2, r4
 800b686:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b688:	e105      	b.n	800b896 <UART_SetConfig+0x4d6>
 800b68a:	bf00      	nop
 800b68c:	40011000 	.word	0x40011000
 800b690:	40011400 	.word	0x40011400
 800b694:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b69c:	2200      	movs	r2, #0
 800b69e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b6a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b6a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b6aa:	4642      	mov	r2, r8
 800b6ac:	464b      	mov	r3, r9
 800b6ae:	1891      	adds	r1, r2, r2
 800b6b0:	6239      	str	r1, [r7, #32]
 800b6b2:	415b      	adcs	r3, r3
 800b6b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b6b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b6ba:	4641      	mov	r1, r8
 800b6bc:	1854      	adds	r4, r2, r1
 800b6be:	4649      	mov	r1, r9
 800b6c0:	eb43 0501 	adc.w	r5, r3, r1
 800b6c4:	f04f 0200 	mov.w	r2, #0
 800b6c8:	f04f 0300 	mov.w	r3, #0
 800b6cc:	00eb      	lsls	r3, r5, #3
 800b6ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b6d2:	00e2      	lsls	r2, r4, #3
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	461d      	mov	r5, r3
 800b6d8:	4643      	mov	r3, r8
 800b6da:	18e3      	adds	r3, r4, r3
 800b6dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b6e0:	464b      	mov	r3, r9
 800b6e2:	eb45 0303 	adc.w	r3, r5, r3
 800b6e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b6ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b6f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b6fa:	f04f 0200 	mov.w	r2, #0
 800b6fe:	f04f 0300 	mov.w	r3, #0
 800b702:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b706:	4629      	mov	r1, r5
 800b708:	008b      	lsls	r3, r1, #2
 800b70a:	4621      	mov	r1, r4
 800b70c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b710:	4621      	mov	r1, r4
 800b712:	008a      	lsls	r2, r1, #2
 800b714:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b718:	f7f5 fa2c 	bl	8000b74 <__aeabi_uldivmod>
 800b71c:	4602      	mov	r2, r0
 800b71e:	460b      	mov	r3, r1
 800b720:	4b60      	ldr	r3, [pc, #384]	; (800b8a4 <UART_SetConfig+0x4e4>)
 800b722:	fba3 2302 	umull	r2, r3, r3, r2
 800b726:	095b      	lsrs	r3, r3, #5
 800b728:	011c      	lsls	r4, r3, #4
 800b72a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b72e:	2200      	movs	r2, #0
 800b730:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b734:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b738:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b73c:	4642      	mov	r2, r8
 800b73e:	464b      	mov	r3, r9
 800b740:	1891      	adds	r1, r2, r2
 800b742:	61b9      	str	r1, [r7, #24]
 800b744:	415b      	adcs	r3, r3
 800b746:	61fb      	str	r3, [r7, #28]
 800b748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b74c:	4641      	mov	r1, r8
 800b74e:	1851      	adds	r1, r2, r1
 800b750:	6139      	str	r1, [r7, #16]
 800b752:	4649      	mov	r1, r9
 800b754:	414b      	adcs	r3, r1
 800b756:	617b      	str	r3, [r7, #20]
 800b758:	f04f 0200 	mov.w	r2, #0
 800b75c:	f04f 0300 	mov.w	r3, #0
 800b760:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b764:	4659      	mov	r1, fp
 800b766:	00cb      	lsls	r3, r1, #3
 800b768:	4651      	mov	r1, sl
 800b76a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b76e:	4651      	mov	r1, sl
 800b770:	00ca      	lsls	r2, r1, #3
 800b772:	4610      	mov	r0, r2
 800b774:	4619      	mov	r1, r3
 800b776:	4603      	mov	r3, r0
 800b778:	4642      	mov	r2, r8
 800b77a:	189b      	adds	r3, r3, r2
 800b77c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b780:	464b      	mov	r3, r9
 800b782:	460a      	mov	r2, r1
 800b784:	eb42 0303 	adc.w	r3, r2, r3
 800b788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b78c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	67bb      	str	r3, [r7, #120]	; 0x78
 800b796:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b798:	f04f 0200 	mov.w	r2, #0
 800b79c:	f04f 0300 	mov.w	r3, #0
 800b7a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b7a4:	4649      	mov	r1, r9
 800b7a6:	008b      	lsls	r3, r1, #2
 800b7a8:	4641      	mov	r1, r8
 800b7aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b7ae:	4641      	mov	r1, r8
 800b7b0:	008a      	lsls	r2, r1, #2
 800b7b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b7b6:	f7f5 f9dd 	bl	8000b74 <__aeabi_uldivmod>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4b39      	ldr	r3, [pc, #228]	; (800b8a4 <UART_SetConfig+0x4e4>)
 800b7c0:	fba3 1302 	umull	r1, r3, r3, r2
 800b7c4:	095b      	lsrs	r3, r3, #5
 800b7c6:	2164      	movs	r1, #100	; 0x64
 800b7c8:	fb01 f303 	mul.w	r3, r1, r3
 800b7cc:	1ad3      	subs	r3, r2, r3
 800b7ce:	011b      	lsls	r3, r3, #4
 800b7d0:	3332      	adds	r3, #50	; 0x32
 800b7d2:	4a34      	ldr	r2, [pc, #208]	; (800b8a4 <UART_SetConfig+0x4e4>)
 800b7d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b7d8:	095b      	lsrs	r3, r3, #5
 800b7da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7de:	441c      	add	r4, r3
 800b7e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	673b      	str	r3, [r7, #112]	; 0x70
 800b7e8:	677a      	str	r2, [r7, #116]	; 0x74
 800b7ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b7ee:	4642      	mov	r2, r8
 800b7f0:	464b      	mov	r3, r9
 800b7f2:	1891      	adds	r1, r2, r2
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	415b      	adcs	r3, r3
 800b7f8:	60fb      	str	r3, [r7, #12]
 800b7fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b7fe:	4641      	mov	r1, r8
 800b800:	1851      	adds	r1, r2, r1
 800b802:	6039      	str	r1, [r7, #0]
 800b804:	4649      	mov	r1, r9
 800b806:	414b      	adcs	r3, r1
 800b808:	607b      	str	r3, [r7, #4]
 800b80a:	f04f 0200 	mov.w	r2, #0
 800b80e:	f04f 0300 	mov.w	r3, #0
 800b812:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b816:	4659      	mov	r1, fp
 800b818:	00cb      	lsls	r3, r1, #3
 800b81a:	4651      	mov	r1, sl
 800b81c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b820:	4651      	mov	r1, sl
 800b822:	00ca      	lsls	r2, r1, #3
 800b824:	4610      	mov	r0, r2
 800b826:	4619      	mov	r1, r3
 800b828:	4603      	mov	r3, r0
 800b82a:	4642      	mov	r2, r8
 800b82c:	189b      	adds	r3, r3, r2
 800b82e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b830:	464b      	mov	r3, r9
 800b832:	460a      	mov	r2, r1
 800b834:	eb42 0303 	adc.w	r3, r2, r3
 800b838:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b83a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	663b      	str	r3, [r7, #96]	; 0x60
 800b844:	667a      	str	r2, [r7, #100]	; 0x64
 800b846:	f04f 0200 	mov.w	r2, #0
 800b84a:	f04f 0300 	mov.w	r3, #0
 800b84e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b852:	4649      	mov	r1, r9
 800b854:	008b      	lsls	r3, r1, #2
 800b856:	4641      	mov	r1, r8
 800b858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b85c:	4641      	mov	r1, r8
 800b85e:	008a      	lsls	r2, r1, #2
 800b860:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b864:	f7f5 f986 	bl	8000b74 <__aeabi_uldivmod>
 800b868:	4602      	mov	r2, r0
 800b86a:	460b      	mov	r3, r1
 800b86c:	4b0d      	ldr	r3, [pc, #52]	; (800b8a4 <UART_SetConfig+0x4e4>)
 800b86e:	fba3 1302 	umull	r1, r3, r3, r2
 800b872:	095b      	lsrs	r3, r3, #5
 800b874:	2164      	movs	r1, #100	; 0x64
 800b876:	fb01 f303 	mul.w	r3, r1, r3
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	011b      	lsls	r3, r3, #4
 800b87e:	3332      	adds	r3, #50	; 0x32
 800b880:	4a08      	ldr	r2, [pc, #32]	; (800b8a4 <UART_SetConfig+0x4e4>)
 800b882:	fba2 2303 	umull	r2, r3, r2, r3
 800b886:	095b      	lsrs	r3, r3, #5
 800b888:	f003 020f 	and.w	r2, r3, #15
 800b88c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4422      	add	r2, r4
 800b894:	609a      	str	r2, [r3, #8]
}
 800b896:	bf00      	nop
 800b898:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b89c:	46bd      	mov	sp, r7
 800b89e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8a2:	bf00      	nop
 800b8a4:	51eb851f 	.word	0x51eb851f

0800b8a8 <__libc_init_array>:
 800b8a8:	b570      	push	{r4, r5, r6, lr}
 800b8aa:	4d0d      	ldr	r5, [pc, #52]	; (800b8e0 <__libc_init_array+0x38>)
 800b8ac:	4c0d      	ldr	r4, [pc, #52]	; (800b8e4 <__libc_init_array+0x3c>)
 800b8ae:	1b64      	subs	r4, r4, r5
 800b8b0:	10a4      	asrs	r4, r4, #2
 800b8b2:	2600      	movs	r6, #0
 800b8b4:	42a6      	cmp	r6, r4
 800b8b6:	d109      	bne.n	800b8cc <__libc_init_array+0x24>
 800b8b8:	4d0b      	ldr	r5, [pc, #44]	; (800b8e8 <__libc_init_array+0x40>)
 800b8ba:	4c0c      	ldr	r4, [pc, #48]	; (800b8ec <__libc_init_array+0x44>)
 800b8bc:	f000 f9da 	bl	800bc74 <_init>
 800b8c0:	1b64      	subs	r4, r4, r5
 800b8c2:	10a4      	asrs	r4, r4, #2
 800b8c4:	2600      	movs	r6, #0
 800b8c6:	42a6      	cmp	r6, r4
 800b8c8:	d105      	bne.n	800b8d6 <__libc_init_array+0x2e>
 800b8ca:	bd70      	pop	{r4, r5, r6, pc}
 800b8cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8d0:	4798      	blx	r3
 800b8d2:	3601      	adds	r6, #1
 800b8d4:	e7ee      	b.n	800b8b4 <__libc_init_array+0xc>
 800b8d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8da:	4798      	blx	r3
 800b8dc:	3601      	adds	r6, #1
 800b8de:	e7f2      	b.n	800b8c6 <__libc_init_array+0x1e>
 800b8e0:	0800bcf8 	.word	0x0800bcf8
 800b8e4:	0800bcf8 	.word	0x0800bcf8
 800b8e8:	0800bcf8 	.word	0x0800bcf8
 800b8ec:	0800bcfc 	.word	0x0800bcfc

0800b8f0 <memcpy>:
 800b8f0:	440a      	add	r2, r1
 800b8f2:	4291      	cmp	r1, r2
 800b8f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8f8:	d100      	bne.n	800b8fc <memcpy+0xc>
 800b8fa:	4770      	bx	lr
 800b8fc:	b510      	push	{r4, lr}
 800b8fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b902:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b906:	4291      	cmp	r1, r2
 800b908:	d1f9      	bne.n	800b8fe <memcpy+0xe>
 800b90a:	bd10      	pop	{r4, pc}

0800b90c <memset>:
 800b90c:	4402      	add	r2, r0
 800b90e:	4603      	mov	r3, r0
 800b910:	4293      	cmp	r3, r2
 800b912:	d100      	bne.n	800b916 <memset+0xa>
 800b914:	4770      	bx	lr
 800b916:	f803 1b01 	strb.w	r1, [r3], #1
 800b91a:	e7f9      	b.n	800b910 <memset+0x4>
 800b91c:	0000      	movs	r0, r0
	...

0800b920 <atan>:
 800b920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	ec55 4b10 	vmov	r4, r5, d0
 800b928:	4bc3      	ldr	r3, [pc, #780]	; (800bc38 <atan+0x318>)
 800b92a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b92e:	429e      	cmp	r6, r3
 800b930:	46ab      	mov	fp, r5
 800b932:	dd18      	ble.n	800b966 <atan+0x46>
 800b934:	4bc1      	ldr	r3, [pc, #772]	; (800bc3c <atan+0x31c>)
 800b936:	429e      	cmp	r6, r3
 800b938:	dc01      	bgt.n	800b93e <atan+0x1e>
 800b93a:	d109      	bne.n	800b950 <atan+0x30>
 800b93c:	b144      	cbz	r4, 800b950 <atan+0x30>
 800b93e:	4622      	mov	r2, r4
 800b940:	462b      	mov	r3, r5
 800b942:	4620      	mov	r0, r4
 800b944:	4629      	mov	r1, r5
 800b946:	f7f4 fc4d 	bl	80001e4 <__adddf3>
 800b94a:	4604      	mov	r4, r0
 800b94c:	460d      	mov	r5, r1
 800b94e:	e006      	b.n	800b95e <atan+0x3e>
 800b950:	f1bb 0f00 	cmp.w	fp, #0
 800b954:	f300 8131 	bgt.w	800bbba <atan+0x29a>
 800b958:	a59b      	add	r5, pc, #620	; (adr r5, 800bbc8 <atan+0x2a8>)
 800b95a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b95e:	ec45 4b10 	vmov	d0, r4, r5
 800b962:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b966:	4bb6      	ldr	r3, [pc, #728]	; (800bc40 <atan+0x320>)
 800b968:	429e      	cmp	r6, r3
 800b96a:	dc14      	bgt.n	800b996 <atan+0x76>
 800b96c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b970:	429e      	cmp	r6, r3
 800b972:	dc0d      	bgt.n	800b990 <atan+0x70>
 800b974:	a396      	add	r3, pc, #600	; (adr r3, 800bbd0 <atan+0x2b0>)
 800b976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97a:	ee10 0a10 	vmov	r0, s0
 800b97e:	4629      	mov	r1, r5
 800b980:	f7f4 fc30 	bl	80001e4 <__adddf3>
 800b984:	4baf      	ldr	r3, [pc, #700]	; (800bc44 <atan+0x324>)
 800b986:	2200      	movs	r2, #0
 800b988:	f7f5 f872 	bl	8000a70 <__aeabi_dcmpgt>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d1e6      	bne.n	800b95e <atan+0x3e>
 800b990:	f04f 3aff 	mov.w	sl, #4294967295
 800b994:	e02b      	b.n	800b9ee <atan+0xce>
 800b996:	f000 f963 	bl	800bc60 <fabs>
 800b99a:	4bab      	ldr	r3, [pc, #684]	; (800bc48 <atan+0x328>)
 800b99c:	429e      	cmp	r6, r3
 800b99e:	ec55 4b10 	vmov	r4, r5, d0
 800b9a2:	f300 80bf 	bgt.w	800bb24 <atan+0x204>
 800b9a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b9aa:	429e      	cmp	r6, r3
 800b9ac:	f300 80a0 	bgt.w	800baf0 <atan+0x1d0>
 800b9b0:	ee10 2a10 	vmov	r2, s0
 800b9b4:	ee10 0a10 	vmov	r0, s0
 800b9b8:	462b      	mov	r3, r5
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	f7f4 fc12 	bl	80001e4 <__adddf3>
 800b9c0:	4ba0      	ldr	r3, [pc, #640]	; (800bc44 <atan+0x324>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f7f4 fc0c 	bl	80001e0 <__aeabi_dsub>
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	4606      	mov	r6, r0
 800b9cc:	460f      	mov	r7, r1
 800b9ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	f7f4 fc05 	bl	80001e4 <__adddf3>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	460b      	mov	r3, r1
 800b9de:	4630      	mov	r0, r6
 800b9e0:	4639      	mov	r1, r7
 800b9e2:	f7f4 fedf 	bl	80007a4 <__aeabi_ddiv>
 800b9e6:	f04f 0a00 	mov.w	sl, #0
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	460d      	mov	r5, r1
 800b9ee:	4622      	mov	r2, r4
 800b9f0:	462b      	mov	r3, r5
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	f7f4 fdab 	bl	8000550 <__aeabi_dmul>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	4680      	mov	r8, r0
 800ba00:	4689      	mov	r9, r1
 800ba02:	f7f4 fda5 	bl	8000550 <__aeabi_dmul>
 800ba06:	a374      	add	r3, pc, #464	; (adr r3, 800bbd8 <atan+0x2b8>)
 800ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	460f      	mov	r7, r1
 800ba10:	f7f4 fd9e 	bl	8000550 <__aeabi_dmul>
 800ba14:	a372      	add	r3, pc, #456	; (adr r3, 800bbe0 <atan+0x2c0>)
 800ba16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1a:	f7f4 fbe3 	bl	80001e4 <__adddf3>
 800ba1e:	4632      	mov	r2, r6
 800ba20:	463b      	mov	r3, r7
 800ba22:	f7f4 fd95 	bl	8000550 <__aeabi_dmul>
 800ba26:	a370      	add	r3, pc, #448	; (adr r3, 800bbe8 <atan+0x2c8>)
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	f7f4 fbda 	bl	80001e4 <__adddf3>
 800ba30:	4632      	mov	r2, r6
 800ba32:	463b      	mov	r3, r7
 800ba34:	f7f4 fd8c 	bl	8000550 <__aeabi_dmul>
 800ba38:	a36d      	add	r3, pc, #436	; (adr r3, 800bbf0 <atan+0x2d0>)
 800ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3e:	f7f4 fbd1 	bl	80001e4 <__adddf3>
 800ba42:	4632      	mov	r2, r6
 800ba44:	463b      	mov	r3, r7
 800ba46:	f7f4 fd83 	bl	8000550 <__aeabi_dmul>
 800ba4a:	a36b      	add	r3, pc, #428	; (adr r3, 800bbf8 <atan+0x2d8>)
 800ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba50:	f7f4 fbc8 	bl	80001e4 <__adddf3>
 800ba54:	4632      	mov	r2, r6
 800ba56:	463b      	mov	r3, r7
 800ba58:	f7f4 fd7a 	bl	8000550 <__aeabi_dmul>
 800ba5c:	a368      	add	r3, pc, #416	; (adr r3, 800bc00 <atan+0x2e0>)
 800ba5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba62:	f7f4 fbbf 	bl	80001e4 <__adddf3>
 800ba66:	4642      	mov	r2, r8
 800ba68:	464b      	mov	r3, r9
 800ba6a:	f7f4 fd71 	bl	8000550 <__aeabi_dmul>
 800ba6e:	a366      	add	r3, pc, #408	; (adr r3, 800bc08 <atan+0x2e8>)
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	4680      	mov	r8, r0
 800ba76:	4689      	mov	r9, r1
 800ba78:	4630      	mov	r0, r6
 800ba7a:	4639      	mov	r1, r7
 800ba7c:	f7f4 fd68 	bl	8000550 <__aeabi_dmul>
 800ba80:	a363      	add	r3, pc, #396	; (adr r3, 800bc10 <atan+0x2f0>)
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	f7f4 fbab 	bl	80001e0 <__aeabi_dsub>
 800ba8a:	4632      	mov	r2, r6
 800ba8c:	463b      	mov	r3, r7
 800ba8e:	f7f4 fd5f 	bl	8000550 <__aeabi_dmul>
 800ba92:	a361      	add	r3, pc, #388	; (adr r3, 800bc18 <atan+0x2f8>)
 800ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba98:	f7f4 fba2 	bl	80001e0 <__aeabi_dsub>
 800ba9c:	4632      	mov	r2, r6
 800ba9e:	463b      	mov	r3, r7
 800baa0:	f7f4 fd56 	bl	8000550 <__aeabi_dmul>
 800baa4:	a35e      	add	r3, pc, #376	; (adr r3, 800bc20 <atan+0x300>)
 800baa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baaa:	f7f4 fb99 	bl	80001e0 <__aeabi_dsub>
 800baae:	4632      	mov	r2, r6
 800bab0:	463b      	mov	r3, r7
 800bab2:	f7f4 fd4d 	bl	8000550 <__aeabi_dmul>
 800bab6:	a35c      	add	r3, pc, #368	; (adr r3, 800bc28 <atan+0x308>)
 800bab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babc:	f7f4 fb90 	bl	80001e0 <__aeabi_dsub>
 800bac0:	4632      	mov	r2, r6
 800bac2:	463b      	mov	r3, r7
 800bac4:	f7f4 fd44 	bl	8000550 <__aeabi_dmul>
 800bac8:	4602      	mov	r2, r0
 800baca:	460b      	mov	r3, r1
 800bacc:	4640      	mov	r0, r8
 800bace:	4649      	mov	r1, r9
 800bad0:	f7f4 fb88 	bl	80001e4 <__adddf3>
 800bad4:	4622      	mov	r2, r4
 800bad6:	462b      	mov	r3, r5
 800bad8:	f7f4 fd3a 	bl	8000550 <__aeabi_dmul>
 800badc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bae0:	4602      	mov	r2, r0
 800bae2:	460b      	mov	r3, r1
 800bae4:	d14b      	bne.n	800bb7e <atan+0x25e>
 800bae6:	4620      	mov	r0, r4
 800bae8:	4629      	mov	r1, r5
 800baea:	f7f4 fb79 	bl	80001e0 <__aeabi_dsub>
 800baee:	e72c      	b.n	800b94a <atan+0x2a>
 800baf0:	ee10 0a10 	vmov	r0, s0
 800baf4:	4b53      	ldr	r3, [pc, #332]	; (800bc44 <atan+0x324>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	4629      	mov	r1, r5
 800bafa:	f7f4 fb71 	bl	80001e0 <__aeabi_dsub>
 800bafe:	4b51      	ldr	r3, [pc, #324]	; (800bc44 <atan+0x324>)
 800bb00:	4606      	mov	r6, r0
 800bb02:	460f      	mov	r7, r1
 800bb04:	2200      	movs	r2, #0
 800bb06:	4620      	mov	r0, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	f7f4 fb6b 	bl	80001e4 <__adddf3>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	4630      	mov	r0, r6
 800bb14:	4639      	mov	r1, r7
 800bb16:	f7f4 fe45 	bl	80007a4 <__aeabi_ddiv>
 800bb1a:	f04f 0a01 	mov.w	sl, #1
 800bb1e:	4604      	mov	r4, r0
 800bb20:	460d      	mov	r5, r1
 800bb22:	e764      	b.n	800b9ee <atan+0xce>
 800bb24:	4b49      	ldr	r3, [pc, #292]	; (800bc4c <atan+0x32c>)
 800bb26:	429e      	cmp	r6, r3
 800bb28:	da1d      	bge.n	800bb66 <atan+0x246>
 800bb2a:	ee10 0a10 	vmov	r0, s0
 800bb2e:	4b48      	ldr	r3, [pc, #288]	; (800bc50 <atan+0x330>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	4629      	mov	r1, r5
 800bb34:	f7f4 fb54 	bl	80001e0 <__aeabi_dsub>
 800bb38:	4b45      	ldr	r3, [pc, #276]	; (800bc50 <atan+0x330>)
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	460f      	mov	r7, r1
 800bb3e:	2200      	movs	r2, #0
 800bb40:	4620      	mov	r0, r4
 800bb42:	4629      	mov	r1, r5
 800bb44:	f7f4 fd04 	bl	8000550 <__aeabi_dmul>
 800bb48:	4b3e      	ldr	r3, [pc, #248]	; (800bc44 <atan+0x324>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f7f4 fb4a 	bl	80001e4 <__adddf3>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4630      	mov	r0, r6
 800bb56:	4639      	mov	r1, r7
 800bb58:	f7f4 fe24 	bl	80007a4 <__aeabi_ddiv>
 800bb5c:	f04f 0a02 	mov.w	sl, #2
 800bb60:	4604      	mov	r4, r0
 800bb62:	460d      	mov	r5, r1
 800bb64:	e743      	b.n	800b9ee <atan+0xce>
 800bb66:	462b      	mov	r3, r5
 800bb68:	ee10 2a10 	vmov	r2, s0
 800bb6c:	4939      	ldr	r1, [pc, #228]	; (800bc54 <atan+0x334>)
 800bb6e:	2000      	movs	r0, #0
 800bb70:	f7f4 fe18 	bl	80007a4 <__aeabi_ddiv>
 800bb74:	f04f 0a03 	mov.w	sl, #3
 800bb78:	4604      	mov	r4, r0
 800bb7a:	460d      	mov	r5, r1
 800bb7c:	e737      	b.n	800b9ee <atan+0xce>
 800bb7e:	4b36      	ldr	r3, [pc, #216]	; (800bc58 <atan+0x338>)
 800bb80:	4e36      	ldr	r6, [pc, #216]	; (800bc5c <atan+0x33c>)
 800bb82:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bb86:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bb8a:	e9da 2300 	ldrd	r2, r3, [sl]
 800bb8e:	f7f4 fb27 	bl	80001e0 <__aeabi_dsub>
 800bb92:	4622      	mov	r2, r4
 800bb94:	462b      	mov	r3, r5
 800bb96:	f7f4 fb23 	bl	80001e0 <__aeabi_dsub>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bba2:	f7f4 fb1d 	bl	80001e0 <__aeabi_dsub>
 800bba6:	f1bb 0f00 	cmp.w	fp, #0
 800bbaa:	4604      	mov	r4, r0
 800bbac:	460d      	mov	r5, r1
 800bbae:	f6bf aed6 	bge.w	800b95e <atan+0x3e>
 800bbb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbb6:	461d      	mov	r5, r3
 800bbb8:	e6d1      	b.n	800b95e <atan+0x3e>
 800bbba:	a51d      	add	r5, pc, #116	; (adr r5, 800bc30 <atan+0x310>)
 800bbbc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bbc0:	e6cd      	b.n	800b95e <atan+0x3e>
 800bbc2:	bf00      	nop
 800bbc4:	f3af 8000 	nop.w
 800bbc8:	54442d18 	.word	0x54442d18
 800bbcc:	bff921fb 	.word	0xbff921fb
 800bbd0:	8800759c 	.word	0x8800759c
 800bbd4:	7e37e43c 	.word	0x7e37e43c
 800bbd8:	e322da11 	.word	0xe322da11
 800bbdc:	3f90ad3a 	.word	0x3f90ad3a
 800bbe0:	24760deb 	.word	0x24760deb
 800bbe4:	3fa97b4b 	.word	0x3fa97b4b
 800bbe8:	a0d03d51 	.word	0xa0d03d51
 800bbec:	3fb10d66 	.word	0x3fb10d66
 800bbf0:	c54c206e 	.word	0xc54c206e
 800bbf4:	3fb745cd 	.word	0x3fb745cd
 800bbf8:	920083ff 	.word	0x920083ff
 800bbfc:	3fc24924 	.word	0x3fc24924
 800bc00:	5555550d 	.word	0x5555550d
 800bc04:	3fd55555 	.word	0x3fd55555
 800bc08:	2c6a6c2f 	.word	0x2c6a6c2f
 800bc0c:	bfa2b444 	.word	0xbfa2b444
 800bc10:	52defd9a 	.word	0x52defd9a
 800bc14:	3fadde2d 	.word	0x3fadde2d
 800bc18:	af749a6d 	.word	0xaf749a6d
 800bc1c:	3fb3b0f2 	.word	0x3fb3b0f2
 800bc20:	fe231671 	.word	0xfe231671
 800bc24:	3fbc71c6 	.word	0x3fbc71c6
 800bc28:	9998ebc4 	.word	0x9998ebc4
 800bc2c:	3fc99999 	.word	0x3fc99999
 800bc30:	54442d18 	.word	0x54442d18
 800bc34:	3ff921fb 	.word	0x3ff921fb
 800bc38:	440fffff 	.word	0x440fffff
 800bc3c:	7ff00000 	.word	0x7ff00000
 800bc40:	3fdbffff 	.word	0x3fdbffff
 800bc44:	3ff00000 	.word	0x3ff00000
 800bc48:	3ff2ffff 	.word	0x3ff2ffff
 800bc4c:	40038000 	.word	0x40038000
 800bc50:	3ff80000 	.word	0x3ff80000
 800bc54:	bff00000 	.word	0xbff00000
 800bc58:	0800bcd0 	.word	0x0800bcd0
 800bc5c:	0800bcb0 	.word	0x0800bcb0

0800bc60 <fabs>:
 800bc60:	ec51 0b10 	vmov	r0, r1, d0
 800bc64:	ee10 2a10 	vmov	r2, s0
 800bc68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc6c:	ec43 2b10 	vmov	d0, r2, r3
 800bc70:	4770      	bx	lr
	...

0800bc74 <_init>:
 800bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc76:	bf00      	nop
 800bc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc7a:	bc08      	pop	{r3}
 800bc7c:	469e      	mov	lr, r3
 800bc7e:	4770      	bx	lr

0800bc80 <_fini>:
 800bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc82:	bf00      	nop
 800bc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc86:	bc08      	pop	{r3}
 800bc88:	469e      	mov	lr, r3
 800bc8a:	4770      	bx	lr
